{"version":3,"sources":["../../../../garnishjs/lib/Base.js","../../../../garnishjs/src/Garnish.js","../../../../garnishjs/src/BaseDrag.js","../../../../garnishjs/src/CheckboxSelect.js","../../../../garnishjs/src/ContextMenu.js","../../../../garnishjs/src/Drag.js","../../../../garnishjs/src/DragDrop.js","../../../../garnishjs/src/DragMove.js","../../../../garnishjs/src/DragSort.js","../../../../garnishjs/src/EscManager.js","../../../../garnishjs/src/HUD.js","../../../../garnishjs/src/Menu.js","../../../../garnishjs/src/MenuBtn.js","../../../../garnishjs/src/MixedInput.js","../../../../garnishjs/src/Modal.js","../../../../garnishjs/src/NiceText.js","../../../../garnishjs/src/Pill.js","../../../../garnishjs/src/Select.js","../../../../garnishjs/src/SelectMenu.js","garnish.js"],"names":["$","getErd","undefined","erd","elementResizeDetectorMaker","callOnAdd","triggerResizeEvent","elem","trigger","Base","extend","_instance","_static","prototype","_prototyping","proto","this","call","base","constructor","klass","_constructing","apply","arguments","ancestor","forEach","implement","toString","valueOf","type","init","source","value","length","test","method","previous","returnValue","toSource","hidden","i","key","desc","Object","getOwnPropertyDescriptor","defineProperty","version","object","block","context","String","Garnish","$win","window","$doc","document","$bod","body","rtl","hasClass","ltr","$scrollContainer","DELETE_KEY","SHIFT_KEY","CTRL_KEY","ALT_KEY","RETURN_KEY","ESC_KEY","SPACE_KEY","LEFT_KEY","UP_KEY","RIGHT_KEY","DOWN_KEY","A_KEY","S_KEY","CMD_KEY","PRIMARY_CLICK","SECONDARY_CLICK","X_AXIS","Y_AXIS","FX_DURATION","TEXT_NODE","log","msg","console","_isMobileBrowser","_isMobileOrTabletBrowser","isMobileBrowser","detectTablets","a","navigator","userAgent","vendor","opera","RegExp","substr","isArray","val","Array","isJquery","jQuery","isString","hasAttr","attr","isTextNode","nodeType","getOffset","_offset","offset","top","scrollTop","left","scrollLeft","getDist","x1","y1","x2","y2","Math","sqrt","pow","hitTest","x","y","_$elem","_x1","_y1","_x2","outerWidth","_y2","outerHeight","isCursorOver","ev","pageX","pageY","copyTextStyles","target","$source","$target","css","fontFamily","fontSize","fontWeight","letterSpacing","lineHeight","textAlign","textIndent","whiteSpace","wordSpacing","wordWrap","getBodyScrollTop","_scrollTop","_maxScrollTop","height","requestAnimationFrame","raf","mozRequestAnimationFrame","webkitRequestAnimationFrame","fn","setTimeout","cancelAnimationFrame","cancel","mozCancelAnimationFrame","webkitCancelAnimationFrame","clearTimeout","id","scrollContainerToElement","container","$elem","$container","scrollParent","prop","elemOffset","elemScrollOffset","targetScrollTop","elemHeight","containerHeight","innerHeight","clientHeight","velocity","mobileHA","SHAKE_STEPS","SHAKE_STEP_DURATION","shake","startingPoint","parseInt","isNaN","_properties","getElement","makeArray","getInputBasename","name","replace","getInputPostVal","$input","findInputs","find","getPostData","postData","arrayInputCounters","$inputs","eq","inputName","inputVal","isArrayInput","croppedName","substring","j","copyInputValues","$sourceInputs","$targetInputs","isCtrlKeyPressed","platform","match","metaKey","ctrlKey","altKey","settings","_eventHandlers","_namespace","_$listeners","_disabled","floor","random","_listeners","noop","setSettings","defaults","baseSettings","on","events","data","handler","_normalizeEvents","push","namespace","off","eventHandler","splice","_ev","split","_splitEvents","trim","_formatEvents","slice","join","addListener","func","proxy","inArray","removeListener","removeAllListeners","disable","enable","destroy","event","special","activate","setup","namespaces","eventHandle","mousedown.garnish-activate","e","preventDefault","click.garnish-activate","keydown.garnish-activate","keyCode","addClass","removeClass","removeAttr","teardown","textchange","handle","el","args","delay","handleObj","targetData","delayTimeout","resize","listenTo","each","BaseDrag","$items","dragging","mousedownX","mousedownY","realMouseX","realMouseY","mouseX","mouseY","mouseDistX","mouseDistY","mouseOffsetX","mouseOffsetY","$targetItem","scrollProperty","scrollAxis","scrollDist","scrollProxy","scrollFrame","_","items","isPlainObject","addItems","allowDragging","startDragging","onDragStart","drag","didMouseMove","_scrollProperty","axis","_winScrollTop","_minMouseScrollY","windowScrollTargetSize","_scrollAxis","_scrollDist","round","_maxMouseScrollY","_winScrollLeft","_minMouseScrollX","_maxMouseScrollX","width","_cancelWindowScroll","onDrag","stopDragging","onDragStop","item","removeItems","add","index","_deinitItem","removeAllItems","_handleMouseDown","which","$handle","_getItemHandle","currentTarget","is","closest","ignoreHandleSelector","_handleMouseMove","_mouseDist","minMouseDist","_handleMouseUp","_scrollWindow","scrollPos","removeData","CheckboxSelect","$all","$options","$checkboxes","filter","not","onAllChange","isAllChecked","checked","disabled","ContextMenu","options","$menu","showingMenu","counter","buildMenu","menuClass","$ul","appendTo","option","$li","$a","label","onClick","mousedown","hideMenu","showMenu","showing","show","hide","Drag","targetItemWidth","targetItemHeight","targetItemPositionInDraggee","$draggee","otherItems","totalOtherItems","helpers","helperTargets","helperPositions","helperLagIncrement","updateHelperPosProxy","updateHelperPosFrame","lastMouseX","lastMouseY","_returningHelpersToDraggees","draggeeDisplay","setDraggee","findDraggee","helperLagIncrementDividend","concat","toArray","singleHelper","_createHelper","removeDraggee","collapseDraggees","appendDraggee","$newDraggee","oldLength","newLength","draggeeVirtualMidpointX","draggeeVirtualMidpointY","getHelperTargetX","getHelperTargetY","returnHelpersToDraggees","$helper","display","visibility","draggeeOffset","callback","onReturnHelpersToDraggees","$draggeeHelper","clone","copyDraggeeInputValuesToHelper","margin","helper","append","helperPos","_getHelperTarget","position","zIndex","helperBaseZindex","opacity","helperOpacity","_updateHelperPos","_i","_j","_lag","helperLagBase","helperSpacingX","helperSpacingY","_showDraggee","remove","DragDrop","$dropTargets","$activeDropTarget","updateDropTargets","dropTargets","_activeDropTarget","_elem","activeDropTargetClass","onDropTargetChange","fadeOutHelpers","duration","complete","DragMove","DragSort","$heightedContainer","$insertion","insertionVisible","oldDraggeeIndexes","newDraggeeIndexes","closestItem","_midpointVersion","_$prevItem","createInsertion","insertion","magnetStrength","_draggeeOffsetX","_draggeeOffsetY","canInsertBefore","$item","canInsertAfter","_getDraggeeIndexes","moveTargetItemToFront","_getItemIndex","first","insertBefore","_placeInsertionWithDraggee","_clearMidpoints","parent","_removeInsertion","_getClosestItem","_updateInsertion","insertAfter","onSortChange","onInsertionPointChange","indexes","_closestItem","_testForClosestItem","_midpoint","_getItemMidpoint","_startXDist","_lastXDist","abs","_startYDist","_lastYDist","_$otherItem","prev","_xDist","_yDist","last","next","_repositionDraggee","get","_moveDraggeeToItem","_$item","prependTo","_mouseDistX","_mouseDistY","_closestItemMouseDistY","_closestItemMouseDistX","EscManager","handlers","escapeLatest","register","obj","unregister","pop","escManager","HUD","$trigger","$fixedTriggerParent","$hud","$tip","$body","$header","$footer","$mainContainer","$main","$shade","orientation","listeningForUpdateSizeAndPositionEvents","pendingUpdateSizeAndPosition","bodyContents","onShow","onHide","onSubmit","activeHUDs","class","shadeClass","hudClass","tipClass","bodyClass","mainContainerClass","mainClass","updateBody","$parent","offsetParent","windowWidth","closeBtn","removeUpdateSizeAndPositionListeners","html","headerClass","footerClass","stopPropagation","closeOtherHUDs","hudID","queueUpdateSizeAndPosition","updateSizeAndPosition","windowHeight","triggerWidth","triggerHeight","triggerOffset","windowScrollLeft","windowScrollTop","scrollContainerTriggerOffset","scrollContainerScrollLeft","scrollContainerScrollTop","hudBodyWidth","hudBodyHeight","right","bottom","overflow-x","overflow-y","clearances","orientations","relevantSize","windowSpacing","triggerSpacing","tipClasses","maxHudBodyWidth","maxHudBodyHeight","minBodyWidth","minBodyHeight","mainHeight","maxLeft","minLeft","triggerCenter","tipLeft","tipWidth","maxTop","minTop","tipTop","addUpdateSizeAndPositionListeners","toggle","submit","_handleSubmit","Menu","$anchor","menuId","_windowWidth","_windowHeight","_windowScrollLeft","_windowScrollTop","_anchorOffset","_anchorWidth","_anchorHeight","_anchorOffsetRight","_anchorOffsetBottom","_menuWidth","_menuHeight","addOptions","$menuList","role","aria-hidden","attachToElement","anchor","optionKey","tabindex","setPositionRelativeToAnchor","topClearance","bottomClearance","align","_alignCenter","rightClearance","leftClearance","_alignRight","_alignLeft","detach","selectOption","onOptionSelect","selectedOption","MenuBtn","$btn","menu","btn","menuAnchor","aria-owns","aria-haspopup","aria-expanded","onBlur","onKeyDown","$currentOption","click","$option","focusOption","onMouseDown","onMenuHide","MixedInput","elements","focussedElement","blurTimeout","getElementIndex","isText","onFocus","setFocus","setCarotPos","addTextElement","text","TextElement","addElement","focussedElementIndex","selectionStart","selectionEnd","preVal","postVal","newText","removeElement","$prevElem","$nextElem","prevElemVal","newVal","blurFocussedElement","focus","focusPreviousElement","$from","focusNextElement","pos","parentInput","$stage","focussed","interval","padding","setWidth","getIndex","buildStage","getTextWidth","stageWidth","setInterval","NiceText","checkInput","clearInterval","getVal","setVal","changed","onChange","Modal","visible","dragger","desiredWidth","desiredHeight","resizeDragger","resizeStartWidth","resizeStartHeight","setContainer","autoShow","instances","draggable","dragHandleSelector","resizable","$resizeDragHandle","closeOtherModals","visibleModal","onFadeIn","hideOnShadeClick","hideOnEsc","quickShow","quickHide","max","min-width","min-height","_width","min","getWidth","minGutter","_height","getHeight","onFadeOut","_handleResizeStart","_handleResize","relativeElemPadding","$hint","$charsLeft","autoHeight","maxLength","showCharsLeft","showingHint","inputBoxSizing","minHeight","initialized","input","isVisible","initialize","getHeightForValue","updateHeight","hint","$hintContainer","charsLeftClass","updateCharsLeft","initializeIfVisible","showHint","hintFadeDuration","hideHint","onTextChange","border-top","border-right","border-bottom","border-left","padding-top","padding-right","padding-bottom","padding-left","-webkit-box-sizing","-moz-box-sizing","box-sizing","spaces","onHeightChange","updateHeightIfWidthChanged","_charsLeft","negativeCharsLeftClass","Pill","$outerContainer","$innerContainer","$btns","$selectedBtn","outerContainer","preventOutlineOnMouseFocus","select","selectNext","nextIndex","_getSelectedBtnIndex","selectPrev","prevIndex","Select","$selectedItems","mousedownTarget","mouseUpTimeout","callbackFrame","$focusable","$first","$last","allowEmpty","checkboxMode","ignoreClick","deselectAll","getItemIndex","isSelected","selectItem","preventScroll","multi","setFocusableItem","focusItem","_selectItems","selectAll","selectRange","sliceFrom","sliceTo","deselectItem","_deselectItems","clearFirst","deselectOthers","toggleItem","_canDeselect","clearMouseUpTimeout","getFirstItem","getLastItem","isPreviousItem","isNextItem","getPreviousItem","getNextItem","getItemToTheLeft","horizontal","vertical","getClosestItem","getItemToTheRight","getItemAbove","getItemBelow","dir","axisProps","closestItemAxisProps","dirProps","closestItemDirectionProps","$thisItem","thisOffset","thisMidpoint","midpointOffset","midpointSizeFunc","otherRowPos","smallestMidpointDiff","$closestItem","step","$otherItem","otherOffset","isNextRow","rowOffset","otherMidpoint","midpointDiff","isWrongDirection","getFurthestItemToTheLeft","getFurthestItem","getFurthestItemToTheRight","getFurthestItemAbove","getFurthestItemBelow","$testItem","totalSelected","getTotalSelected","updateIndexes","itemsChanged","selectionChanged","selectedIndex","selectedClass","onSelectionChange","resetItemOrder","scrollTo","getSelectedItems","shiftKey","_actAsCheckbox","onMouseUp","<","b",">","SelectMenu","selected","build","_addSelectedOptionClass","dom","ul","className","setBtnText","$btnLabel","ulClass"],"mappings":"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","file":"garnish.min.js","sourcesContent":["/*!\r\n\tBase.js, version 1.1a\r\n\tCopyright 2006-2010, Dean Edwards\r\n\tLicense: http://www.opensource.org/licenses/mit-license.php\r\n*/\r\n\r\nvar Base = function() {\r\n\t// dummy\r\n};\r\n\r\nBase.extend = function(_instance, _static) { // subclass\r\n\tvar extend = Base.prototype.extend;\r\n\r\n\t// build the prototype\r\n\tBase._prototyping = true;\r\n\tvar proto = new this;\r\n\textend.call(proto, _instance);\r\n\tproto.base = function() {\r\n\t\t// call this method from any other method to invoke that method's ancestor\r\n\t};\r\n\tdelete Base._prototyping;\r\n\r\n\t// create the wrapper for the constructor function\r\n\t//var constructor = proto.constructor.valueOf(); //-dean\r\n\tvar constructor = proto.constructor;\r\n\tvar klass = proto.constructor = function() {\r\n\t\tif (!Base._prototyping) {\r\n\t\t\tif (this._constructing || this.constructor == klass) { // instantiation\r\n\t\t\t\tthis._constructing = true;\r\n\t\t\t\tconstructor.apply(this, arguments);\r\n\t\t\t\tdelete this._constructing;\r\n\t\t\t} else if (arguments[0] != null) { // casting\r\n\t\t\t\treturn (arguments[0].extend || extend).call(arguments[0], proto);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// build the class interface\r\n\tklass.ancestor = this;\r\n\tklass.extend = this.extend;\r\n\tklass.forEach = this.forEach;\r\n\tklass.implement = this.implement;\r\n\tklass.prototype = proto;\r\n\tklass.toString = this.toString;\r\n\tklass.valueOf = function(type) {\r\n\t\t//return (type == \"object\") ? klass : constructor; //-dean\r\n\t\treturn (type == \"object\") ? klass : constructor.valueOf();\r\n\t};\r\n\textend.call(klass, _static);\r\n\t// class initialisation\r\n\tif (typeof klass.init == \"function\") klass.init();\r\n\treturn klass;\r\n};\r\n\r\nBase.prototype = {\r\n\textend: function(source, value) {\r\n\t\tif (arguments.length > 1) { // extending with a name/value pair\r\n\t\t\tvar ancestor = this[source];\r\n\t\t\tif (ancestor && (typeof value == \"function\") && // overriding a method?\r\n\t\t\t\t// the valueOf() comparison is to avoid circular references\r\n\t\t\t\t(!ancestor.valueOf || ancestor.valueOf() != value.valueOf()) &&\r\n\t\t\t\t/\\bbase\\b/.test(value)) {\r\n\t\t\t\t// get the underlying method\r\n\t\t\t\tvar method = value.valueOf();\r\n\t\t\t\t// override\r\n\t\t\t\tvalue = function() {\r\n\t\t\t\t\tvar previous = this.base || Base.prototype.base;\r\n\t\t\t\t\tthis.base = ancestor;\r\n\t\t\t\t\tvar returnValue = method.apply(this, arguments);\r\n\t\t\t\t\tthis.base = previous;\r\n\t\t\t\t\treturn returnValue;\r\n\t\t\t\t};\r\n\t\t\t\t// point to the underlying method\r\n\t\t\t\tvalue.valueOf = function(type) {\r\n\t\t\t\t\treturn (type == \"object\") ? value : method;\r\n\t\t\t\t};\r\n\t\t\t\tvalue.toString = Base.toString;\r\n\t\t\t}\r\n\t\t\tthis[source] = value;\r\n\t\t} else if (source) { // extending with an object literal\r\n\t\t\tvar extend = Base.prototype.extend;\r\n\t\t\t// if this object has a customised extend method then use it\r\n\t\t\tif (!Base._prototyping && typeof this != \"function\") {\r\n\t\t\t\textend = this.extend || extend;\r\n\t\t\t}\r\n\t\t\tvar proto = {toSource: null};\r\n\t\t\t// do the \"toString\" and other methods manually\r\n\t\t\tvar hidden = [\"constructor\", \"toString\", \"valueOf\"];\r\n\t\t\t// if we are prototyping then include the constructor\r\n\t\t\tvar i = Base._prototyping ? 0 : 1;\r\n\t\t\twhile (key = hidden[i++]) {\r\n\t\t\t\tif (source[key] != proto[key]) {\r\n\t\t\t\t\textend.call(this, key, source[key]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// copy each of the source object's properties to this object\r\n\t\t\tfor (var key in source) {\r\n\t\t\t\tif (!proto[key]) {\r\n\t\t\t\t\tvar desc = Object.getOwnPropertyDescriptor(source, key);\r\n\t\t\t\t\tif (typeof desc.value != typeof undefined) {\r\n\t\t\t\t\t\t// set the value normally in case it's a function that needs to be overwritten\r\n\t\t\t\t\t\textend.call(this, key, desc.value);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// set it while maintaining the original descriptor settings\r\n\t\t\t\t\t\tObject.defineProperty(this, key, desc);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n};\r\n\r\n// initialise\r\nBase = Base.extend({\r\n\tconstructor: function() {\r\n\t\tthis.extend(arguments[0]);\r\n\t}\r\n}, {\r\n\tancestor: Object,\r\n\tversion: \"1.1\",\r\n\r\n\tforEach: function(object, block, context) {\r\n\t\tfor (var key in object) {\r\n\t\t\tif (this.prototype[key] === undefined) {\r\n\t\t\t\tblock.call(context, object[key], key, object);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\timplement: function() {\r\n\t\tfor (var i = 0; i < arguments.length; i++) {\r\n\t\t\tif (typeof arguments[i] == \"function\") {\r\n\t\t\t\t// if it's a function, call it\r\n\t\t\t\targuments[i](this.prototype);\r\n\t\t\t} else {\r\n\t\t\t\t// add the interface using the extend method\r\n\t\t\t\tthis.prototype.extend(arguments[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t},\r\n\r\n\ttoString: function() {\r\n\t\treturn String(this.valueOf());\r\n\t}\r\n});\r\n","/**\n * @namespace Garnish\n */\n\n// Bail if Garnish is already defined\nif (typeof Garnish !== 'undefined') {\n    throw 'Garnish is already defined!';\n}\n\nGarnish = {\n\n    // jQuery objects for common elements\n    $win: $(window),\n    $doc: $(document),\n    $bod: $(document.body)\n\n};\n\nGarnish.rtl = Garnish.$bod.hasClass('rtl');\nGarnish.ltr = !Garnish.rtl;\n\nGarnish = $.extend(Garnish, {\n\n    $scrollContainer: Garnish.$win,\n\n    // Key code constants\n    DELETE_KEY: 8,\n    SHIFT_KEY: 16,\n    CTRL_KEY: 17,\n    ALT_KEY: 18,\n    RETURN_KEY: 13,\n    ESC_KEY: 27,\n    SPACE_KEY: 32,\n    LEFT_KEY: 37,\n    UP_KEY: 38,\n    RIGHT_KEY: 39,\n    DOWN_KEY: 40,\n    A_KEY: 65,\n    S_KEY: 83,\n    CMD_KEY: 91,\n\n    // Mouse button constants\n    PRIMARY_CLICK: 1,\n    SECONDARY_CLICK: 3,\n\n    // Axis constants\n    X_AXIS: 'x',\n    Y_AXIS: 'y',\n\n    FX_DURATION: 100,\n\n    // Node types\n    TEXT_NODE: 3,\n\n    /**\n     * Logs a message to the browser's console, if the browser has one.\n     *\n     * @param string msg\n     */\n    log: function(msg) {\n        if (typeof console !== 'undefined' && typeof console.log == 'function') {\n            console.log(msg);\n        }\n    },\n\n    _isMobileBrowser: null,\n    _isMobileOrTabletBrowser: null,\n\n    /**\n     * Returns whether this is a mobile browser.\n     * Detection script courtesy of http://detectmobilebrowsers.com\n     *\n     * Last updated: 2014-11-24\n     *\n     * @param bool detectTablets\n     * @return bool\n     */\n    isMobileBrowser: function(detectTablets) {\n        var key = detectTablets ? '_isMobileOrTabletBrowser' : '_isMobileBrowser';\n\n        if (Garnish[key] === null) {\n            var a = navigator.userAgent || navigator.vendor || window.opera;\n            Garnish[key] = ((new RegExp('(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino' + (detectTablets ? '|android|ipad|playbook|silk' : ''), 'i')).test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4)));\n        }\n\n        return Garnish[key];\n    },\n\n    /**\n     * Returns whether a variable is an array.\n     *\n     * @param mixed val\n     * @return bool\n     */\n    isArray: function(val) {\n        return (val instanceof Array);\n    },\n\n    /**\n     * Returns whether a variable is a jQuery collection.\n     *\n     * @param mixed val\n     * @return bool\n     */\n    isJquery: function(val) {\n        return (val instanceof jQuery);\n    },\n\n    /**\n     * Returns whether a variable is a string.\n     *\n     * @param mixed val\n     * @return bool\n     */\n    isString: function(val) {\n        return (typeof val == 'string');\n    },\n\n    /**\n     * Returns whether an element has an attribute.\n     *\n     * @see http://stackoverflow.com/questions/1318076/jquery-hasattr-checking-to-see-if-there-is-an-attribute-on-an-element/1318091#1318091\n     */\n    hasAttr: function(elem, attr) {\n        var val = $(elem).attr(attr);\n        return (val !== undefined && val !== false);\n    },\n\n    /**\n     * Returns whether something is a text node.\n     *\n     * @param object elem\n     * @return bool\n     */\n    isTextNode: function(elem) {\n        return (elem.nodeType == Garnish.TEXT_NODE);\n    },\n\n    /**\n     * Returns the offset of an element within the scroll container, whether that's the window or something else\n     */\n    getOffset: function(elem) {\n        this.getOffset._offset = $(elem).offset();\n\n        if (Garnish.$scrollContainer[0] != Garnish.$win[0]) {\n            this.getOffset._offset.top += Garnish.$scrollContainer.scrollTop();\n            this.getOffset._offset.left += Garnish.$scrollContainer.scrollLeft();\n        }\n\n        return this.getOffset._offset;\n    },\n\n    /**\n     * Returns the distance between two coordinates.\n     *\n     * @param int x1 The first coordinate's X position.\n     * @param int y1 The first coordinate's Y position.\n     * @param int x2 The second coordinate's X position.\n     * @param int y2 The second coordinate's Y position.\n     * @return float\n     */\n    getDist: function(x1, y1, x2, y2) {\n        return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n    },\n\n    /**\n     * Returns whether an element is touching an x/y coordinate.\n     *\n     * @param int    x    The coordinate's X position.\n     * @param int    y    The coordinate's Y position.\n     * @param object elem Either an actual element or a jQuery collection.\n     * @return bool\n     */\n    hitTest: function(x, y, elem) {\n        Garnish.hitTest._$elem = $(elem);\n        Garnish.hitTest._offset = Garnish.hitTest._$elem.offset();\n        Garnish.hitTest._x1 = Garnish.hitTest._offset.left;\n        Garnish.hitTest._y1 = Garnish.hitTest._offset.top;\n        Garnish.hitTest._x2 = Garnish.hitTest._x1 + Garnish.hitTest._$elem.outerWidth();\n        Garnish.hitTest._y2 = Garnish.hitTest._y1 + Garnish.hitTest._$elem.outerHeight();\n\n        return (x >= Garnish.hitTest._x1 && x < Garnish.hitTest._x2 && y >= Garnish.hitTest._y1 && y < Garnish.hitTest._y2);\n    },\n\n    /**\n     * Returns whether the cursor is touching an element.\n     *\n     * @param object ev   The mouse event object containing pageX and pageY properties.\n     * @param object elem Either an actual element or a jQuery collection.\n     * @return bool\n     */\n    isCursorOver: function(ev, elem) {\n        return Garnish.hitTest(ev.pageX, ev.pageY, elem);\n    },\n\n    /**\n     * Copies text styles from one element to another.\n     *\n     * @param object source The source element. Can be either an actual element or a jQuery collection.\n     * @param object target The target element. Can be either an actual element or a jQuery collection.\n     */\n    copyTextStyles: function(source, target) {\n        var $source = $(source),\n            $target = $(target);\n\n        $target.css({\n            fontFamily: $source.css('fontFamily'),\n            fontSize: $source.css('fontSize'),\n            fontWeight: $source.css('fontWeight'),\n            letterSpacing: $source.css('letterSpacing'),\n            lineHeight: $source.css('lineHeight'),\n            textAlign: $source.css('textAlign'),\n            textIndent: $source.css('textIndent'),\n            whiteSpace: $source.css('whiteSpace'),\n            wordSpacing: $source.css('wordSpacing'),\n            wordWrap: $source.css('wordWrap')\n        });\n    },\n\n    /**\n     * Returns the body's real scrollTop, discarding any window banding in Safari.\n     *\n     * @return int\n     */\n    getBodyScrollTop: function() {\n        Garnish.getBodyScrollTop._scrollTop = document.body.scrollTop;\n\n        if (Garnish.getBodyScrollTop._scrollTop < 0) {\n            Garnish.getBodyScrollTop._scrollTop = 0;\n        }\n        else {\n            Garnish.getBodyScrollTop._maxScrollTop = Garnish.$bod.outerHeight() - Garnish.$win.height();\n\n            if (Garnish.getBodyScrollTop._scrollTop > Garnish.getBodyScrollTop._maxScrollTop) {\n                Garnish.getBodyScrollTop._scrollTop = Garnish.getBodyScrollTop._maxScrollTop;\n            }\n        }\n\n        return Garnish.getBodyScrollTop._scrollTop;\n    },\n\n    requestAnimationFrame: (function() {\n            var raf = (\n                window.requestAnimationFrame ||\n                window.mozRequestAnimationFrame ||\n                window.webkitRequestAnimationFrame ||\n                function(fn) {\n                    return window.setTimeout(fn, 20);\n                }\n            );\n\n            return function(fn) {\n                return raf(fn);\n            };\n        })(),\n\n    cancelAnimationFrame: (function() {\n            var cancel = (\n                window.cancelAnimationFrame ||\n                window.mozCancelAnimationFrame ||\n                window.webkitCancelAnimationFrame ||\n                window.clearTimeout\n            );\n\n            return function(id) {\n                return cancel(id);\n            };\n        })(),\n\n    /**\n     * Scrolls a container element to an element within it.\n     *\n     * @param object container Either an actual element or a jQuery collection.\n     * @param object elem      Either an actual element or a jQuery collection.\n     */\n    scrollContainerToElement: function(container, elem) {\n        if (elem === undefined) {\n            var $elem = $(container);\n            $container = $elem.scrollParent();\n        }\n        else {\n            var $container = $(container),\n                $elem = $(elem);\n        }\n\n        if ($container.prop('nodeName') === 'HTML' || $container[0] == Garnish.$doc[0]) {\n            $container = Garnish.$win;\n        }\n\n        var scrollTop = $container.scrollTop(),\n            elemOffset = $elem.offset().top;\n\n        if ($container[0] == window) {\n            var elemScrollOffset = elemOffset - scrollTop;\n        }\n        else {\n            var elemScrollOffset = elemOffset - $container.offset().top;\n        }\n\n        var targetScrollTop = false;\n\n        // Is the element above the fold?\n        if (elemScrollOffset < 0) {\n            targetScrollTop = scrollTop + elemScrollOffset - 10;\n        }\n        else {\n            var elemHeight = $elem.outerHeight(),\n                containerHeight = ($container[0] == window ? window.innerHeight : $container[0].clientHeight);\n\n            // Is it below the fold?\n            if (elemScrollOffset + elemHeight > containerHeight) {\n                targetScrollTop = scrollTop + (elemScrollOffset - (containerHeight - elemHeight)) + 10;\n            }\n        }\n\n        if (targetScrollTop !== false) {\n            // Velocity only allows you to scroll to an arbitrary position if you're scrolling the main window\n            if ($container[0] == window) {\n                $('html').velocity('scroll', {\n                    offset: targetScrollTop + 'px',\n                    mobileHA: false\n                });\n            }\n            else {\n                $container.scrollTop(targetScrollTop);\n            }\n        }\n    },\n\n    SHAKE_STEPS: 10,\n    SHAKE_STEP_DURATION: 25,\n\n    /**\n     * Shakes an element.\n     *\n     * @param mixed  elem Either an actual element or a jQuery collection.\n     * @param string prop The property that should be adjusted (default is 'margin-left').\n     */\n    shake: function(elem, prop) {\n        var $elem = $(elem);\n\n        if (!prop) {\n            prop = 'margin-left';\n        }\n\n        var startingPoint = parseInt($elem.css(prop));\n        if (isNaN(startingPoint)) {\n            startingPoint = 0;\n        }\n\n        for (var i = 0; i <= Garnish.SHAKE_STEPS; i++) {\n            (function(i) {\n                setTimeout(function() {\n                    Garnish.shake._properties = {};\n                    Garnish.shake._properties[prop] = startingPoint + (i % 2 ? -1 : 1) * (10 - i);\n                    $elem.velocity(Garnish.shake._properties, Garnish.SHAKE_STEP_DURATION);\n                }, (Garnish.SHAKE_STEP_DURATION * i));\n            })(i);\n        }\n    },\n\n    /**\n     * Returns the first element in an array or jQuery collection.\n     *\n     * @param mixed elem\n     * @return mixed\n     */\n    getElement: function(elem) {\n        return $.makeArray(elem)[0];\n    },\n\n    /**\n     * Returns the beginning of an input's name= attribute value with any [bracktes] stripped out.\n     *\n     * @param object elem\n     * @return string|null\n     */\n    getInputBasename: function(elem) {\n        var name = $(elem).attr('name');\n\n        if (name) {\n            return name.replace(/\\[.*/, '');\n        }\n        else {\n            return null;\n        }\n    },\n\n    /**\n     * Returns an input's value as it would be POSTed.\n     * So unchecked checkboxes and radio buttons return null,\n     * and multi-selects whose name don't end in \"[]\" only return the last selection\n     *\n     * @param jQuery $input\n     * @return mixed\n     */\n    getInputPostVal: function($input) {\n        var type = $input.attr('type'),\n            val = $input.val();\n\n        // Is this an unchecked checkbox or radio button?\n        if ((type == 'checkbox' || type == 'radio')) {\n            if ($input.prop('checked')) {\n                return val;\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Flatten any array values whose input name doesn't end in \"[]\"\n        //  - e.g. a multi-select\n        else if (Garnish.isArray(val) && $input.attr('name').substr(-2) != '[]') {\n            if (val.length) {\n                return val[val.length - 1];\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Just return the value\n        else {\n            return val;\n        }\n    },\n\n    /**\n     * Returns the inputs within a container\n     *\n     * @param mixed container The container element. Can be either an actual element or a jQuery collection.\n     * @return jQuery\n     */\n    findInputs: function(container) {\n        return $(container).find('input,text,textarea,select,button');\n    },\n\n    /**\n     * Returns the post data within a container.\n     *\n     * @param mixed container\n     * @return array\n     */\n    getPostData: function(container) {\n        var postData = {},\n            arrayInputCounters = {},\n            $inputs = Garnish.findInputs(container);\n\n        for (var i = 0; i < $inputs.length; i++) {\n            var $input = $inputs.eq(i);\n\n            if ($input.prop('disabled')) {\n                continue;\n            }\n\n            var inputName = $input.attr('name');\n            if (!inputName) {\n                continue;\n            }\n\n            var inputVal = Garnish.getInputPostVal($input);\n            if (inputVal === null) {\n                continue;\n            }\n\n            var isArrayInput = (inputName.substr(-2) == '[]');\n\n            if (isArrayInput) {\n                // Get the cropped input name\n                var croppedName = inputName.substring(0, inputName.length - 2);\n\n                // Prep the input counter\n                if (arrayInputCounters[croppedName] === undefined) {\n                    arrayInputCounters[croppedName] = 0;\n                }\n            }\n\n            if (!Garnish.isArray(inputVal)) {\n                inputVal = [inputVal];\n            }\n\n            for (var j = 0; j < inputVal.length; j++) {\n                if (isArrayInput) {\n                    var inputName = croppedName + '[' + arrayInputCounters[croppedName] + ']';\n                    arrayInputCounters[croppedName]++;\n                }\n\n                postData[inputName] = inputVal[j];\n            }\n        }\n\n        return postData;\n    },\n\n    copyInputValues: function(source, target) {\n        var $sourceInputs = Garnish.findInputs(source),\n            $targetInputs = Garnish.findInputs(target);\n\n        for (var i = 0; i < $sourceInputs.length; i++) {\n            if ($targetInputs[i] === undefined) {\n                break;\n            }\n\n            $targetInputs.eq(i).val(\n                $sourceInputs.eq(i).val()\n            );\n        }\n    },\n\n    /**\n     * Returns whether the \"Ctrl\" key is pressed (or ⌘ if this is a Mac) for a given keyboard event\n     *\n     * @param ev The keyboard event\n     *\n     * @return boolean Whether the \"Ctrl\" key is pressed\n     */\n    isCtrlKeyPressed: function(ev) {\n        if (window.navigator.platform.match(/Mac/)) {\n            // metaKey maps to ⌘ on Macs\n            return ev.metaKey;\n        }\n        else {\n            // Both altKey and ctrlKey == true on some Windows keyboards when the right-hand ALT key is pressed\n            // so just be safe and make sure altKey == false\n            return (ev.ctrlKey && !ev.altKey);\n        }\n    }\n});\n\n\n/**\n * Garnish base class\n */\nGarnish.Base = Base.extend({\n\n    settings: null,\n\n    _eventHandlers: null,\n    _namespace: null,\n    _$listeners: null,\n    _disabled: false,\n\n    constructor: function() {\n        this._eventHandlers = [];\n        this._namespace = '.Garnish' + Math.floor(Math.random() * 1000000000);\n        this._listeners = [];\n        this.init.apply(this, arguments);\n    },\n\n    init: $.noop,\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (this.settings === undefined ? {} : this.settings);\n        this.settings = $.extend({}, baseSettings, defaults, settings);\n    },\n\n    on: function(events, data, handler) {\n        if (typeof data == 'function') {\n            handler = data;\n            data = {};\n        }\n\n        var events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            this._eventHandlers.push({\n                type: ev[0],\n                namespace: ev[1],\n                data: data,\n                handler: handler\n            });\n        }\n    },\n\n    off: function(events, handler) {\n        var events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            for (var j = this._eventHandlers.length - 1; j >= 0; j--) {\n                var eventHandler = this._eventHandlers[j];\n\n                if (eventHandler.type == ev[0] && (!ev[1] || eventHandler.namespace == ev[1]) && eventHandler.handler === handler) {\n                    this._eventHandlers.splice(j, 1);\n                }\n            }\n        }\n    },\n\n    trigger: function(type, data) {\n        var ev = {\n            type: type,\n            target: this\n        };\n\n        for (var i = 0; i < this._eventHandlers.length; i++) {\n            var handler = this._eventHandlers[i];\n\n            if (handler.type == type) {\n                var _ev = $.extend({data: handler.data}, data, ev);\n                handler.handler(_ev)\n            }\n        }\n    },\n\n    _normalizeEvents: function(events) {\n        if (typeof events == 'string') {\n            events = events.split(' ');\n        }\n\n        for (var i = 0; i < events.length; i++) {\n            if (typeof events[i] == 'string') {\n                events[i] = events[i].split('.');\n            }\n        }\n\n        return events;\n    },\n\n    _splitEvents: function(events) {\n        if (typeof events == 'string') {\n            events = events.split(',');\n\n            for (var i = 0; i < events.length; i++) {\n                events[i] = $.trim(events[i]);\n            }\n        }\n\n        return events;\n    },\n\n    _formatEvents: function(events) {\n        var events = this._splitEvents(events).slice(0);\n\n        for (var i = 0; i < events.length; i++) {\n            events[i] += this._namespace;\n        }\n\n        return events.join(' ');\n    },\n\n    addListener: function(elem, events, data, func) {\n        var $elem = $(elem);\n\n        // Ignore if there aren't any elements\n        if (!$elem.length) {\n            return;\n        }\n\n        events = this._splitEvents(events);\n\n        // Param mapping\n        if (func === undefined && typeof data != 'object') {\n            // (elem, events, func)\n            func = data;\n            data = {};\n        }\n\n        if (typeof func == 'function') {\n            func = $.proxy(func, this);\n        }\n        else {\n            func = $.proxy(this, func);\n        }\n\n        $elem.on(this._formatEvents(events), data, $.proxy(function() {\n            if (!this._disabled) {\n                func.apply(this, arguments);\n            }\n        }, this));\n\n        // Remember that we're listening to this element\n        if ($.inArray(elem, this._listeners) == -1) {\n            this._listeners.push(elem);\n        }\n    },\n\n    removeListener: function(elem, events) {\n        $(elem).off(this._formatEvents(events));\n    },\n\n    removeAllListeners: function(elem) {\n        $(elem).off(this._namespace);\n    },\n\n    disable: function() {\n        this._disabled = true;\n    },\n\n    enable: function() {\n        this._disabled = false;\n    },\n\n    destroy: function() {\n        this.trigger('destroy');\n        this.removeAllListeners(this._listeners);\n    }\n});\n\n// Custom events\n// -----------------------------------------------------------------------------\n\nvar erd;\n\nfunction getErd() {\n    if (erd === undefined) {\n        erd = elementResizeDetectorMaker({\n            callOnAdd: false\n        });\n    }\n\n    return erd;\n}\n\nfunction triggerResizeEvent(elem) {\n    $(elem).trigger('resize');\n};\n\n// Work them into jQuery's event system\n$.extend(jQuery.event.special, {\n    activate: {\n        setup: function(data, namespaces, eventHandle) {\n            var activateNamespace = this._namespace + '-activate';\n            var $elem = $(this);\n\n            $elem.on({\n                'mousedown.garnish-activate': function(e) {\n                    // Prevent buttons from getting focus on click\n                    e.preventDefault();\n                },\n                'click.garnish-activate': function(e) {\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.trigger('activate');\n                    }\n                },\n                'keydown.garnish-activate': function(e) {\n                    // Ignore if the event was bubbled up, or if it wasn't the space key\n                    if (this != $elem[0] || e.keyCode != Garnish.SPACE_KEY) {\n                        return;\n                    }\n\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.addClass('active');\n\n                        Garnish.$doc.on('keyup.garnish-activate', function(e) {\n                            $elem.removeClass('active');\n\n                            if (e.keyCode == Garnish.SPACE_KEY) {\n                                e.preventDefault();\n                                $elem.trigger('activate');\n                            }\n\n                            Garnish.$doc.off('keyup.garnish-activate');\n                        });\n                    }\n                }\n            });\n\n            if (!$elem.hasClass('disabled')) {\n                $elem.attr('tabindex', '0');\n            } else {\n                $elem.removeAttr('tabindex');\n            }\n        },\n        teardown: function() {\n            $(this).off('.garnish-activate');\n        }\n    },\n\n    textchange: {\n        setup: function(data, namespaces, eventHandle) {\n            var $elem = $(this);\n            $elem.data('garnish-textchange-value', $elem.val());\n            $elem.on('keypress.garnish-textchange keyup.garnish-textchange change.garnish-textchange blur.garnish-textchange', function(e) {\n                var val = $elem.val();\n                if (val != $elem.data('garnish-textchange-value')) {\n                    $elem.data('garnish-textchange-value', val);\n                    $elem.trigger('textchange');\n                }\n            });\n        },\n        teardown: function() {\n            $(this).off('.garnish-textchange');\n        },\n        handle: function(ev, data) {\n            var el = this;\n            var args = arguments;\n            var delay = data && data.delay !== undefined ? data.delay : (ev.data && ev.data.delay !== undefined ? ev.data.delay : null);\n            var handleObj = ev.handleObj;\n            var targetData = $.data(ev.target);\n\n            // Was this event configured with a delay?\n            if (delay) {\n                if (targetData.delayTimeout) {\n                    clearTimeout(targetData.delayTimeout);\n                }\n\n                targetData.delayTimeout = setTimeout(function() {\n                    handleObj.handler.apply(el, args);\n                }, delay);\n            } else {\n                return handleObj.handler.apply(el, args);\n            }\n        }\n    },\n\n    resize: {\n        setup: function(data, namespaces, eventHandle) {\n            // window is the only element that natively supports a resize event\n            if (this == window) {\n                return false;\n            }\n\n            $('> :last-child', this).addClass('last');\n            getErd().listenTo(this, triggerResizeEvent)\n        },\n        teardown: function() {\n            if (this == window) {\n                return false;\n            }\n\n            getErd().removeListener(this, triggerResizeEvent);\n        }\n    }\n});\n\n// Give them their own element collection chaining methods\njQuery.each(['activate', 'textchange', 'resize'], function(i, name) {\n    jQuery.fn[name] = function(data, fn) {\n        return arguments.length > 0 ?\n            this.on(name, null, data, fn) :\n            this.trigger(name);\n    };\n});\n","/** global: Garnish */\n/**\n * Base drag class\n *\n * Does all the grunt work for manipulating elements via click-and-drag,\n * while leaving the actual element manipulation up to a subclass.\n */\nGarnish.BaseDrag = Garnish.Base.extend(\n    {\n        $items: null,\n\n        dragging: false,\n\n        mousedownX: null,\n        mousedownY: null,\n        realMouseX: null,\n        realMouseY: null,\n        mouseX: null,\n        mouseY: null,\n        mouseDistX: null,\n        mouseDistY: null,\n        mouseOffsetX: null,\n        mouseOffsetY: null,\n\n        $targetItem: null,\n\n        scrollProperty: null,\n        scrollAxis: null,\n        scrollDist: null,\n        scrollProxy: null,\n        scrollFrame: null,\n\n        _: null,\n\n        /**\n         * Constructor\n         *\n         * @param mixed  items    Elements that should be draggable right away. (Can be skipped.)\n         * @param object settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (settings === undefined && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            this.settings = $.extend({}, Garnish.BaseDrag.defaults, settings);\n\n            this.$items = $();\n            this._ = {};\n\n            if (items) {\n                this.addItems(items);\n            }\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            return true;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            this.dragging = true;\n            this.onDragStart();\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            if (didMouseMove) {\n                // Is the mouse up against one of the window edges?\n                this.drag._scrollProperty = null;\n\n                if (this.settings.axis != Garnish.X_AXIS) {\n                    // Scrolling up?\n                    this.drag._winScrollTop = Garnish.$win.scrollTop();\n                    this.drag._minMouseScrollY = this.drag._winScrollTop + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseY < this.drag._minMouseScrollY) {\n                        this.drag._scrollProperty = 'scrollTop';\n                        this.drag._scrollAxis = 'Y';\n                        this.drag._scrollDist = Math.round((this.mouseY - this.drag._minMouseScrollY) / 2);\n                    }\n                    else {\n                        // Scrolling down?\n                        this.drag._maxMouseScrollY = this.drag._winScrollTop + Garnish.$win.height() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseY > this.drag._maxMouseScrollY) {\n                            this.drag._scrollProperty = 'scrollTop';\n                            this.drag._scrollAxis = 'Y';\n                            this.drag._scrollDist = Math.round((this.mouseY - this.drag._maxMouseScrollY) / 2);\n                        }\n                    }\n                }\n\n                if (!this.drag._scrollProperty && this.settings.axis != Garnish.Y_AXIS) {\n                    // Scrolling left?\n                    this.drag._winScrollLeft = Garnish.$win.scrollLeft();\n                    this.drag._minMouseScrollX = this.drag._winScrollLeft + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseX < this.drag._minMouseScrollX) {\n                        this.drag._scrollProperty = 'scrollLeft';\n                        this.drag._scrollAxis = 'X';\n                        this.drag._scrollDist = Math.round((this.mouseX - this.drag._minMouseScrollX) / 2);\n                    }\n                    else {\n                        // Scrolling right?\n                        this.drag._maxMouseScrollX = this.drag._winScrollLeft + Garnish.$win.width() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseX > this.drag._maxMouseScrollX) {\n                            this.drag._scrollProperty = 'scrollLeft';\n                            this.drag._scrollAxis = 'X';\n                            this.drag._scrollDist = Math.round((this.mouseX - this.drag._maxMouseScrollX) / 2);\n                        }\n                    }\n                }\n\n                if (this.drag._scrollProperty) {\n                    // Are we starting to scroll now?\n                    if (!this.scrollProperty) {\n                        if (!this.scrollProxy) {\n                            this.scrollProxy = $.proxy(this, '_scrollWindow');\n                        }\n\n                        if (this.scrollFrame) {\n                            Garnish.cancelAnimationFrame(this.scrollFrame);\n                            this.scrollFrame = null;\n                        }\n\n                        this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n                    }\n\n                    this.scrollProperty = this.drag._scrollProperty;\n                    this.scrollAxis = this.drag._scrollAxis;\n                    this.scrollDist = this.drag._scrollDist;\n                }\n                else {\n                    this._cancelWindowScroll();\n                }\n            }\n\n            this.onDrag();\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            this.dragging = false;\n            this.onDragStop();\n\n            // Clear the scroll animation\n            this._cancelWindowScroll();\n        },\n\n        /**\n         * Add Items\n         *\n         * @param mixed items Elements that should be draggable.\n         */\n        addItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure this element doesn't belong to another dragger\n                if ($.data(item, 'drag')) {\n                    Garnish.log('Element was added to more than one dragger');\n                    $.data(item, 'drag').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'drag', this);\n\n                // Add the listener\n                this.addListener(item, 'mousedown', '_handleMouseDown');\n            }\n\n            this.$items = this.$items.add(items);\n        },\n\n        /**\n         * Remove Items\n         *\n         * @param mixed items Elements that should no longer be draggable.\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index != -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('dragStart');\n                this.settings.onDragStart();\n            }, this));\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('drag');\n                this.settings.onDrag();\n            }, this));\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('dragStop');\n                this.settings.onDragStop();\n            }, this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Handle Mouse Down\n         */\n        _handleMouseDown: function(ev) {\n            // Ignore right clicks\n            if (ev.which != Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Ignore if we already have a target\n            if (this.$targetItem) {\n                return;\n            }\n\n            // Ignore if they didn't actually click on the handle\n            var $target = $(ev.target),\n                $handle = this._getItemHandle(ev.currentTarget);\n\n            if (!$target.is($handle) && !$target.closest($handle).length) {\n                return;\n            }\n\n            // Make sure the target isn't a button (unless the button is the handle)\n            if (ev.currentTarget != ev.target && this.settings.ignoreHandleSelector) {\n                if (\n                    $target.is(this.settings.ignoreHandleSelector) ||\n                    $target.closest(this.settings.ignoreHandleSelector).length\n                ) {\n                    return;\n                }\n            }\n\n            ev.preventDefault();\n\n            // Make sure that dragging is allowed right now\n            if (!this.allowDragging()) {\n                return;\n            }\n\n            // Capture the target\n            this.$targetItem = $(ev.currentTarget);\n\n            // Capture the current mouse position\n            this.mousedownX = this.mouseX = ev.pageX;\n            this.mousedownY = this.mouseY = ev.pageY;\n\n            // Capture the difference between the mouse position and the target item's offset\n            var offset = this.$targetItem.offset();\n            this.mouseOffsetX = ev.pageX - offset.left;\n            this.mouseOffsetY = ev.pageY - offset.top;\n\n            // Listen for mousemove, mouseup\n            this.addListener(Garnish.$doc, 'mousemove', '_handleMouseMove');\n            this.addListener(Garnish.$doc, 'mouseup', '_handleMouseUp');\n        },\n\n        _getItemHandle: function(item) {\n            if (this.settings.handle) {\n                if (typeof this.settings.handle == 'object') {\n                    return $(this.settings.handle);\n                }\n\n                if (typeof this.settings.handle == 'string') {\n                    return $(this.settings.handle, item);\n                }\n\n                if (typeof this.settings.handle == 'function') {\n                    return $(this.settings.handle(item));\n                }\n            }\n\n            return $(item);\n        },\n\n        /**\n         * Handle Mouse Move\n         */\n        _handleMouseMove: function(ev) {\n            ev.preventDefault();\n\n            this.realMouseX = ev.pageX;\n            this.realMouseY = ev.pageY;\n\n            if (this.settings.axis != Garnish.Y_AXIS) {\n                this.mouseX = ev.pageX;\n            }\n\n            if (this.settings.axis != Garnish.X_AXIS) {\n                this.mouseY = ev.pageY;\n            }\n\n            this.mouseDistX = this.mouseX - this.mousedownX;\n            this.mouseDistY = this.mouseY - this.mousedownY;\n\n            if (!this.dragging) {\n                // Has the mouse moved far enough to initiate dragging yet?\n                this._handleMouseMove._mouseDist = Garnish.getDist(this.mousedownX, this.mousedownY, this.realMouseX, this.realMouseY);\n\n                if (this._handleMouseMove._mouseDist >= Garnish.BaseDrag.minMouseDist) {\n                    this.startDragging();\n                }\n            }\n\n            if (this.dragging) {\n                this.drag(true);\n            }\n        },\n\n        /**\n         * Handle Moues Up\n         */\n        _handleMouseUp: function(ev) {\n            // Unbind the document events\n            this.removeAllListeners(Garnish.$doc);\n\n            if (this.dragging) {\n                this.stopDragging();\n            }\n\n            this.$targetItem = null;\n        },\n\n        /**\n         * Scroll Window\n         */\n        _scrollWindow: function() {\n            this._.scrollPos = Garnish.$scrollContainer[this.scrollProperty]();\n            Garnish.$scrollContainer[this.scrollProperty](this._.scrollPos + this.scrollDist);\n\n            this['mouse' + this.scrollAxis] -= this._.scrollPos - Garnish.$scrollContainer[this.scrollProperty]();\n            this['realMouse' + this.scrollAxis] = this['mouse' + this.scrollAxis];\n\n            this.drag();\n\n            this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n        },\n\n        /**\n         * Cancel Window Scroll\n         */\n        _cancelWindowScroll: function() {\n            if (this.scrollFrame) {\n                Garnish.cancelAnimationFrame(this.scrollFrame);\n                this.scrollFrame = null;\n            }\n\n            this.scrollProperty = null;\n            this.scrollAxis = null;\n            this.scrollDist = null;\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            this.removeAllListeners(item);\n            $.removeData(item, 'drag');\n        }\n    },\n    {\n        minMouseDist: 1,\n        windowScrollTargetSize: 25,\n\n        defaults: {\n            handle: null,\n            axis: null,\n            ignoreHandleSelector: 'input, textarea, button, select, .btn',\n\n            onDragStart: $.noop,\n            onDrag: $.noop,\n            onDragStop: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Checkbox select class\n */\nGarnish.CheckboxSelect = Garnish.Base.extend(\n    {\n        $container: null,\n        $all: null,\n        $options: null,\n\n        init: function(container) {\n            this.$container = $(container);\n\n            // Is this already a checkbox select?\n            if (this.$container.data('checkboxSelect')) {\n                Garnish.log('Double-instantiating a checkbox select on an element');\n                this.$container.data('checkbox-select').destroy();\n            }\n\n            this.$container.data('checkboxSelect', this);\n\n            var $checkboxes = this.$container.find('input');\n            this.$all = $checkboxes.filter('.all:first');\n            this.$options = $checkboxes.not(this.$all);\n\n            this.addListener(this.$all, 'change', 'onAllChange');\n        },\n\n        onAllChange: function() {\n            var isAllChecked = this.$all.prop('checked');\n\n            this.$options.prop({\n                checked: isAllChecked,\n                disabled: isAllChecked\n            });\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('checkboxSelect');\n            this.base();\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Context Menu\n */\nGarnish.ContextMenu = Garnish.Base.extend(\n    {\n        $target: null,\n        options: null,\n        $menu: null,\n        showingMenu: false,\n\n        /**\n         * Constructor\n         */\n        init: function(target, options, settings) {\n            this.$target = $(target);\n\n            // Is this already a context menu target?\n            if (this.$target.data('contextmenu')) {\n                Garnish.log('Double-instantiating a context menu on an element');\n                this.$target.data('contextmenu').destroy();\n            }\n\n            this.$target.data('contextmenu', this);\n\n            this.options = options;\n            this.setSettings(settings, Garnish.ContextMenu.defaults);\n\n            Garnish.ContextMenu.counter++;\n\n            this.enable();\n        },\n\n        /**\n         * Build Menu\n         */\n        buildMenu: function() {\n            this.$menu = $('<div class=\"' + this.settings.menuClass + '\" style=\"display: none\" />');\n\n            var $ul = $('<ul/>').appendTo(this.$menu);\n\n            for (var i in this.options) {\n                var option = this.options[i];\n\n                if (option == '-') {\n                    // Create a new <ul>\n                    $('<hr/>').appendTo(this.$menu);\n                    $ul = $('<ul/>').appendTo(this.$menu);\n                }\n                else {\n                    var $li = $('<li></li>').appendTo($ul),\n                        $a = $('<a>' + option.label + '</a>').appendTo($li);\n\n                    if (typeof option.onClick == 'function') {\n                        // maintain the current $a and options.onClick variables\n                        (function($a, onClick) {\n                            setTimeout($.proxy(function() {\n                                $a.mousedown($.proxy(function(ev) {\n                                    this.hideMenu();\n                                    // call the onClick callback, with the scope set to the item,\n                                    // and pass it the event with currentTarget set to the item as well\n                                    onClick.call(this.currentTarget, $.extend(ev, {currentTarget: this.currentTarget}));\n                                }, this));\n                            }, this), 1);\n                        }).call(this, $a, option.onClick);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Show Menu\n         */\n        showMenu: function(ev) {\n            // Ignore left mouse clicks\n            if (ev.type == 'mousedown' && ev.which != Garnish.SECONDARY_CLICK) {\n                return;\n            }\n\n            if (ev.type == 'contextmenu') {\n                // Prevent the real context menu from showing\n                ev.preventDefault();\n            }\n\n            // Ignore if already showing\n            if (this.showing && ev.currentTarget == this.currentTarget) {\n                return;\n            }\n\n            this.currentTarget = ev.currentTarget;\n\n            if (!this.$menu) {\n                this.buildMenu();\n            }\n\n            this.$menu.appendTo(document.body);\n            this.$menu.show();\n            this.$menu.css({left: ev.pageX + 1, top: ev.pageY - 4});\n\n            this.showing = true;\n\n            setTimeout($.proxy(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'hideMenu');\n            }, this), 0);\n        },\n\n        /**\n         * Hide Menu\n         */\n        hideMenu: function() {\n            this.removeListener(Garnish.$doc, 'mousedown');\n            this.$menu.hide();\n            this.showing = false;\n        },\n\n        /**\n         * Enable\n         */\n        enable: function() {\n            this.addListener(this.$target, 'contextmenu,mousedown', 'showMenu');\n        },\n\n        /**\n         * Disable\n         */\n        disable: function() {\n            this.removeListener(this.$target, 'contextmenu,mousedown');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$target.removeData('contextmenu');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuClass: 'menu'\n        },\n        counter: 0\n    }\n);\n","/** global: Garnish */\n/**\n * Drag class\n *\n * Builds on the BaseDrag class by \"picking up\" the selceted element(s),\n * without worrying about what to do when an element is being dragged.\n */\nGarnish.Drag = Garnish.BaseDrag.extend(\n    {\n        targetItemWidth: null,\n        targetItemHeight: null,\n        targetItemPositionInDraggee: null,\n\n        $draggee: null,\n\n        otherItems: null,\n        totalOtherItems: null,\n\n        helpers: null,\n        helperTargets: null,\n        helperPositions: null,\n        helperLagIncrement: null,\n        updateHelperPosProxy: null,\n        updateHelperPosFrame: null,\n\n        lastMouseX: null,\n        lastMouseY: null,\n\n        _returningHelpersToDraggees: false,\n\n        /**\n         * Constructor\n         *\n         * @param mixed  items    Elements that should be draggable right away. (Can be skipped.)\n         * @param object settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (settings === undefined && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.Drag.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            // Don't allow dragging if we're in the middle of animating the helpers back to the draggees\n            return !this._returningHelpersToDraggees;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            // Reset some things\n            this.helpers = [];\n            this.helperTargets = [];\n            this.helperPositions = [];\n            this.lastMouseX = this.lastMouseY = null;\n\n            // Capture the target item's width/height\n            this.targetItemWidth = this.$targetItem.outerWidth();\n            this.targetItemHeight = this.$targetItem.outerHeight();\n\n            // Save the draggee's display style (block/table-row) so we can re-apply it later\n            this.draggeeDisplay = this.$targetItem.css('display');\n\n            // Set the $draggee\n            this.setDraggee(this.findDraggee());\n\n            // Create an array of all the other items\n            this.otherItems = [];\n\n            for (var i = 0; i < this.$items.length; i++) {\n                var item = this.$items[i];\n\n                if ($.inArray(item, this.$draggee) == -1) {\n                    this.otherItems.push(item);\n                }\n            }\n            ;\n\n            this.totalOtherItems = this.otherItems.length;\n\n            // Keep the helpers following the cursor, with a little lag to smooth it out\n            if (!this.updateHelperPosProxy) {\n                this.updateHelperPosProxy = $.proxy(this, '_updateHelperPos');\n            }\n\n            this.helperLagIncrement = this.helpers.length == 1 ? 0 : this.settings.helperLagIncrementDividend / (this.helpers.length - 1);\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n\n            this.base();\n        },\n\n        /**\n         * Sets the draggee.\n         */\n        setDraggee: function($draggee) {\n            // Record the target item's position in the draggee\n            this.targetItemPositionInDraggee = $.inArray(this.$targetItem[0], $draggee.add(this.$targetItem[0]));\n\n            // Keep the target item at the front of the list\n            this.$draggee = $([this.$targetItem[0]].concat($draggee.not(this.$targetItem).toArray()));\n\n            // Create the helper(s)\n            if (this.settings.singleHelper) {\n                this._createHelper(0);\n            }\n            else {\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee) {\n                this.$draggee.hide();\n            }\n            else if (this.settings.collapseDraggees) {\n                this.$targetItem.css('visibility', 'hidden');\n                this.$draggee.not(this.$targetItem).hide();\n            }\n            else {\n                this.$draggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Appends additional items to the draggee.\n         */\n        appendDraggee: function($newDraggee) {\n            if (!$newDraggee.length) {\n                return;\n            }\n\n            if (!this.settings.collapseDraggees) {\n                var oldLength = this.$draggee.length;\n            }\n\n            this.$draggee = $(this.$draggee.toArray().concat($newDraggee.toArray()));\n\n            // Create new helpers?\n            if (!this.settings.collapseDraggees) {\n                var newLength = this.$draggee.length;\n\n                for (var i = oldLength; i < newLength; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee || this.settings.collapseDraggees) {\n                $newDraggee.hide();\n            }\n            else {\n                $newDraggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            // Update the draggee's virtual midpoint\n            this.draggeeVirtualMidpointX = this.mouseX - this.mouseOffsetX + (this.targetItemWidth / 2);\n            this.draggeeVirtualMidpointY = this.mouseY - this.mouseOffsetY + (this.targetItemHeight / 2);\n\n            this.base(didMouseMove);\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            // Clear the helper animation\n            Garnish.cancelAnimationFrame(this.updateHelperPosFrame);\n\n            this.base();\n        },\n\n        /**\n         * Identifies the item(s) that are being dragged.\n         */\n        findDraggee: function() {\n            switch (typeof this.settings.filter) {\n                case 'function': {\n                    return this.settings.filter();\n                }\n\n                case 'string': {\n                    return this.$items.filter(this.settings.filter);\n                }\n\n                default: {\n                    return this.$targetItem;\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            return this.mouseX - this.mouseOffsetX;\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            return this.mouseY - this.mouseOffsetY;\n        },\n\n        /**\n         * Return Helpers to Draggees\n         */\n        returnHelpersToDraggees: function() {\n            this._returningHelpersToDraggees = true;\n\n            for (var i = 0; i < this.helpers.length; i++) {\n                var $draggee = this.$draggee.eq(i),\n                    $helper = this.helpers[i];\n\n                $draggee.css({\n                    display: this.draggeeDisplay,\n                    visibility: 'hidden'\n                });\n\n                var draggeeOffset = $draggee.offset();\n\n                if (i == 0) {\n                    var callback = $.proxy(this, '_showDraggee');\n                }\n                else {\n                    var callback = null;\n                }\n\n                $helper.velocity({left: draggeeOffset.left, top: draggeeOffset.top}, Garnish.FX_DURATION, callback);\n            }\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        onReturnHelpersToDraggees: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('returnHelpersToDraggees');\n                this.settings.onReturnHelpersToDraggees();\n            }, this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Creates a helper.\n         */\n        _createHelper: function(i) {\n            var $draggee = this.$draggee.eq(i),\n                $draggeeHelper = $draggee.clone().addClass('draghelper');\n\n            if (this.settings.copyDraggeeInputValuesToHelper) {\n                Garnish.copyInputValues($draggee, $draggeeHelper);\n            }\n\n            // Remove any name= attributes so radio buttons don't lose their values\n            $draggeeHelper.find('[name]').attr('name', '');\n\n            $draggeeHelper.css({\n                width: $draggee.width() + 1, // Prevent the brower from wrapping text if the width was actually a fraction of a pixel larger\n                height: $draggee.height(),\n                margin: 0\n            });\n\n            if (this.settings.helper) {\n                if (typeof this.settings.helper == 'function') {\n                    $draggeeHelper = this.settings.helper($draggeeHelper);\n                }\n                else {\n                    $draggeeHelper = $(this.settings.helper).append($draggeeHelper);\n                }\n            }\n\n            $draggeeHelper.appendTo(Garnish.$bod);\n\n            var helperPos = this._getHelperTarget(i);\n\n            $draggeeHelper.css({\n                position: 'absolute',\n                top: helperPos.top,\n                left: helperPos.left,\n                zIndex: this.settings.helperBaseZindex + this.$draggee.length - i,\n                opacity: this.settings.helperOpacity\n            });\n\n            this.helperPositions[i] = {\n                top: helperPos.top,\n                left: helperPos.left\n            };\n\n            this.helpers.push($draggeeHelper);\n        },\n\n        /**\n         * Update Helper Position\n         */\n        _updateHelperPos: function() {\n            // Has the mouse moved?\n            if (this.mouseX !== this.lastMouseX || this.mouseY !== this.lastMouseY) {\n                // Get the new target helper positions\n                for (this._updateHelperPos._i = 0; this._updateHelperPos._i < this.helpers.length; this._updateHelperPos._i++) {\n                    this.helperTargets[this._updateHelperPos._i] = this._getHelperTarget(this._updateHelperPos._i);\n                }\n\n                this.lastMouseX = this.mouseX;\n                this.lastMouseY = this.mouseY;\n            }\n\n            // Gravitate helpers toward their target positions\n            for (this._updateHelperPos._j = 0; this._updateHelperPos._j < this.helpers.length; this._updateHelperPos._j++) {\n                this._updateHelperPos._lag = this.settings.helperLagBase + (this.helperLagIncrement * this._updateHelperPos._j);\n\n                this.helperPositions[this._updateHelperPos._j] = {\n                    left: this.helperPositions[this._updateHelperPos._j].left + ((this.helperTargets[this._updateHelperPos._j].left - this.helperPositions[this._updateHelperPos._j].left) / this._updateHelperPos._lag),\n                    top: this.helperPositions[this._updateHelperPos._j].top + ((this.helperTargets[this._updateHelperPos._j].top - this.helperPositions[this._updateHelperPos._j].top) / this._updateHelperPos._lag)\n                };\n\n                this.helpers[this._updateHelperPos._j].css(this.helperPositions[this._updateHelperPos._j]);\n            }\n\n            // Let's do this again on the next frame!\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n        },\n\n        /**\n         * Get the helper position for a draggee helper\n         */\n        _getHelperTarget: function(i) {\n            return {\n                left: this.getHelperTargetX() + (this.settings.helperSpacingX * i),\n                top: this.getHelperTargetY() + (this.settings.helperSpacingY * i)\n            };\n        },\n\n        _showDraggee: function() {\n            // Remove the helpers\n            for (var i = 0; i < this.helpers.length; i++) {\n                this.helpers[i].remove();\n            }\n\n            this.helpers = null;\n\n            this.$draggee.show().css('visibility', 'inherit');\n\n            this.onReturnHelpersToDraggees();\n\n            this._returningHelpersToDraggees = false;\n        }\n    },\n    {\n        defaults: {\n            filter: null,\n            singleHelper: false,\n            collapseDraggees: false,\n            removeDraggee: false,\n            copyDraggeeInputValuesToHelper: false,\n            helperOpacity: 1,\n            helper: null,\n            helperBaseZindex: 1000,\n            helperLagBase: 1,\n            helperLagIncrementDividend: 1.5,\n            helperSpacingX: 5,\n            helperSpacingY: 5,\n            onReturnHelpersToDraggees: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Drag-and-drop class\n *\n * Builds on the Drag class by allowing you to set up \"drop targets\"\n * which the dragged elemements can be dropped onto.\n */\nGarnish.DragDrop = Garnish.Drag.extend({\n\n        $dropTargets: null,\n        $activeDropTarget: null,\n\n        /**\n         * Constructor\n         */\n        init: function(settings) {\n            settings = $.extend({}, Garnish.DragDrop.defaults, settings);\n            this.base(settings);\n        },\n\n        updateDropTargets: function() {\n            if (this.settings.dropTargets) {\n                if (typeof this.settings.dropTargets == 'function') {\n                    this.$dropTargets = $(this.settings.dropTargets());\n                }\n                else {\n                    this.$dropTargets = $(this.settings.dropTargets);\n                }\n\n                // Discard if it's an empty array\n                if (!this.$dropTargets.length) {\n                    this.$dropTargets = null;\n                }\n            }\n        },\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.updateDropTargets();\n            this.$activeDropTarget = null;\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            if (this.$dropTargets) {\n                this.onDrag._activeDropTarget = null;\n\n                // is the cursor over any of the drop target?\n                for (this.onDrag._i = 0; this.onDrag._i < this.$dropTargets.length; this.onDrag._i++) {\n                    this.onDrag._elem = this.$dropTargets[this.onDrag._i];\n\n                    if (Garnish.hitTest(this.mouseX, this.mouseY, this.onDrag._elem)) {\n                        this.onDrag._activeDropTarget = this.onDrag._elem;\n                        break;\n                    }\n                }\n\n                // has the drop target changed?\n                if (\n                    (this.$activeDropTarget && this.onDrag._activeDropTarget != this.$activeDropTarget[0]) ||\n                    (!this.$activeDropTarget && this.onDrag._activeDropTarget !== null)\n                ) {\n                    // was there a previous one?\n                    if (this.$activeDropTarget) {\n                        this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n                    }\n\n                    // remember the new one\n                    if (this.onDrag._activeDropTarget) {\n                        this.$activeDropTarget = $(this.onDrag._activeDropTarget).addClass(this.settings.activeDropTargetClass);\n                    }\n                    else {\n                        this.$activeDropTarget = null;\n                    }\n\n                    this.settings.onDropTargetChange(this.$activeDropTarget);\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.$dropTargets && this.$activeDropTarget) {\n                this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n            }\n\n            this.base();\n        },\n\n        /**\n         * Fade Out Helpers\n         */\n        fadeOutHelpers: function() {\n            for (var i = 0; i < this.helpers.length; i++) {\n                (function($draggeeHelper) {\n                    $draggeeHelper.velocity('fadeOut', {\n                        duration: Garnish.FX_DURATION,\n                        complete: function() {\n                            $draggeeHelper.remove();\n                        }\n                    });\n                })(this.helpers[i]);\n            }\n        }\n    },\n    {\n        defaults: {\n            dropTargets: null,\n            onDropTargetChange: $.noop,\n            activeDropTargetClass: 'active'\n        }\n    });\n","/** global: Garnish */\n/**\n * Drag-to-move clas\n *\n * Builds on the BaseDrag class by simply moving the dragged element(s) along with the mouse.\n */\nGarnish.DragMove = Garnish.BaseDrag.extend(\n    {\n        onDrag: function(items, settings) {\n            this.$targetItem.css({\n                left: this.mouseX - this.mouseOffsetX,\n                top: this.mouseY - this.mouseOffsetY\n            });\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Drag-to-sort class\n *\n * Builds on the Drag class by allowing you to sort the elements amongst themselves.\n */\nGarnish.DragSort = Garnish.Drag.extend(\n    {\n        $heightedContainer: null,\n        $insertion: null,\n        insertionVisible: false,\n        oldDraggeeIndexes: null,\n        newDraggeeIndexes: null,\n        closestItem: null,\n\n        _midpointVersion: 0,\n        _$prevItem: null,\n\n        /**\n         * Constructor\n         *\n         * @param mixed  items    Elements that should be draggable right away. (Can be skipped.)\n         * @param object settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (settings === undefined && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.DragSort.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Creates the insertion element.\n         */\n        createInsertion: function() {\n            if (this.settings.insertion) {\n                if (typeof this.settings.insertion == 'function') {\n                    return $(this.settings.insertion(this.$draggee));\n                }\n                else {\n                    return $(this.settings.insertion);\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            if (this.settings.magnetStrength != 1) {\n                this.getHelperTargetX._draggeeOffsetX = this.$draggee.offset().left;\n                return this.getHelperTargetX._draggeeOffsetX + ((this.mouseX - this.mouseOffsetX - this.getHelperTargetX._draggeeOffsetX) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            if (this.settings.magnetStrength != 1) {\n                this.getHelperTargetY._draggeeOffsetY = this.$draggee.offset().top;\n                return this.getHelperTargetY._draggeeOffsetY + ((this.mouseY - this.mouseOffsetY - this.getHelperTargetY._draggeeOffsetY) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            return true;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            return true;\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.oldDraggeeIndexes = this._getDraggeeIndexes();\n\n            // Are we supposed to be moving the target item to the front, and is it not already there?\n            if (\n                this.settings.moveTargetItemToFront &&\n                this.$draggee.length > 1 &&\n                this._getItemIndex(this.$draggee[0]) > this._getItemIndex(this.$draggee[1])\n            ) {\n                // Reposition the target item before the other draggee items in the DOM\n                this.$draggee.first().insertBefore(this.$draggee[1]);\n            }\n\n            // Create the insertion\n            this.$insertion = this.createInsertion();\n            this._placeInsertionWithDraggee();\n\n            this.closestItem = null;\n            this._clearMidpoints();\n\n            //  Get the closest container that has a height\n            if (this.settings.container) {\n                this.$heightedContainer = $(this.settings.container);\n\n                while (!this.$heightedContainer.height()) {\n                    this.$heightedContainer = this.$heightedContainer.parent();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            // If there's a container set, make sure that we're hovering over it\n            if (this.$heightedContainer && !Garnish.hitTest(this.mouseX, this.mouseY, this.$heightedContainer)) {\n                if (this.closestItem) {\n                    this.closestItem = null;\n                    this._removeInsertion();\n                }\n            }\n            else {\n                // Is there a new closest item?\n                if (\n                    this.closestItem !== (this.closestItem = this._getClosestItem()) &&\n                    this.closestItem !== null\n                ) {\n                    this._updateInsertion();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._removeInsertion();\n\n            // Should we keep the target item where it was?\n            if (!this.settings.moveTargetItemToFront && this.targetItemPositionInDraggee != 0) {\n                this.$targetItem.insertAfter(this.$draggee.eq(this.targetItemPositionInDraggee));\n            }\n\n            // Return the helpers to the draggees\n            this.returnHelpersToDraggees();\n\n            this.base();\n\n            // Has the item actually moved?\n            this.$items = $().add(this.$items);\n            this.newDraggeeIndexes = this._getDraggeeIndexes();\n\n            if (this.newDraggeeIndexes.join(',') != this.oldDraggeeIndexes.join(',')) {\n                this.onSortChange();\n            }\n        },\n\n        /**\n         * On Insertion Point Change event\n         */\n        onInsertionPointChange: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('insertionPointChange');\n                this.settings.onInsertionPointChange();\n            }, this));\n        },\n\n        /**\n         * On Sort Change event\n         */\n        onSortChange: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('sortChange');\n                this.settings.onSortChange();\n            }, this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _getItemIndex: function(item) {\n            return $.inArray(item, this.$items);\n        },\n\n        _getDraggeeIndexes: function() {\n            var indexes = [];\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                indexes.push(this._getItemIndex(this.$draggee[i]))\n            }\n\n            return indexes;\n        },\n\n        /**\n         * Returns the closest item to the cursor.\n         */\n        _getClosestItem: function() {\n            this._getClosestItem._closestItem = null;\n\n            // Start by checking the draggee/insertion, if either are visible\n            if (!this.settings.removeDraggee) {\n                this._testForClosestItem(this.$draggee[0]);\n            }\n            else if (this.insertionVisible) {\n                this._testForClosestItem(this.$insertion[0]);\n            }\n\n            // Check items before the draggee\n            if (this._getClosestItem._closestItem) {\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._closestItem)\n            }\n            if (this.settings.axis != Garnish.Y_AXIS) {\n                this._getClosestItem._startXDist = this._getClosestItem._lastXDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX) : null;\n            }\n            if (this.settings.axis != Garnish.X_AXIS) {\n                this._getClosestItem._startYDist = this._getClosestItem._lastYDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY) : null;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.first().prev();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis != Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis != Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis == Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis == Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis != Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis != Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertBefore(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.prev();\n            }\n\n            // Check items after the draggee\n            if (this.settings.axis != Garnish.Y_AXIS) {\n                this._getClosestItem._lastXDist = this._getClosestItem._startXDist;\n            }\n            if (this.settings.axis != Garnish.X_AXIS) {\n                this._getClosestItem._lastYDist = this._getClosestItem._startYDist;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.last().next();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis != Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis != Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis == Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis == Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis != Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis != Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertAfter(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.next();\n            }\n\n            // Return the result\n\n            // Ignore if it's the draggee or insertion\n            if (\n                this._getClosestItem._closestItem != this.$draggee[0] &&\n                (!this.insertionVisible || this._getClosestItem._closestItem != this.$insertion[0])\n            ) {\n                return this._getClosestItem._closestItem;\n            }\n            else {\n                return null;\n            }\n        },\n\n        _clearMidpoints: function() {\n            this._midpointVersion++;\n            this._$prevItem = null;\n        },\n\n        _getItemMidpoint: function(item) {\n            if ($.data(item, 'midpointVersion') != this._midpointVersion) {\n                // If this isn't the draggee, temporarily move the draggee to this item\n                this._getItemMidpoint._repositionDraggee = (\n                    !this.settings.axis &&\n                    (!this.settings.removeDraggee || this.insertionVisible) &&\n                    item != this.$draggee[0] &&\n                    (!this.$insertion || item != this.$insertion.get(0))\n                );\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Is this the first time we've had to temporarily reposition the draggee since the last midpoint clearing?\n                    if (!this._$prevItem) {\n                        this._$prevItem = (this.insertionVisible ? this.$insertion : this.$draggee).first().prev();\n                    }\n\n                    this._moveDraggeeToItem(item);\n\n                    // Now figure out which element we're actually getting the midpoint of\n                    if (!this.settings.removeDraggee) {\n                        this._getItemMidpoint._$item = this.$draggee;\n                    }\n                    else {\n                        this._getItemMidpoint._$item = this.$insertion;\n                    }\n                }\n                else {\n                    // We're actually getting the midpoint of this item\n                    this._getItemMidpoint._$item = $(item);\n                }\n\n                this._getItemMidpoint._offset = this._getItemMidpoint._$item.offset();\n\n                $.data(item, 'midpoint', {\n                    x: this._getItemMidpoint._offset.left + this._getItemMidpoint._$item.outerWidth() / 2,\n                    y: this._getItemMidpoint._offset.top + this._getItemMidpoint._$item.outerHeight() / 2\n                });\n\n                $.data(item, 'midpointVersion', this._midpointVersion);\n\n                delete this._getItemMidpoint._$item;\n                delete this._getItemMidpoint._offset;\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Move the draggee back\n                    if (this._$prevItem.length) {\n                        this.$draggee.insertAfter(this._$prevItem);\n                    }\n                    else {\n                        this.$draggee.prependTo(this.$draggee.parent());\n                    }\n\n                    this._placeInsertionWithDraggee();\n                }\n            }\n\n            return $.data(item, 'midpoint');\n        },\n\n        _testForClosestItem: function(item) {\n            this._testForClosestItem._midpoint = this._getItemMidpoint(item);\n            this._testForClosestItem._mouseDistX = Math.abs(this._testForClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n            this._testForClosestItem._mouseDistY = Math.abs(this._testForClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n\n            // Don't even consider items that are further away on the Y axis\n            if (\n                this._getClosestItem._closestItem === null ||\n                this._testForClosestItem._mouseDistY < this._getClosestItem._closestItemMouseDistY ||\n                (\n                    this._testForClosestItem._mouseDistY == this._getClosestItem._closestItemMouseDistY &&\n                    this._testForClosestItem._mouseDistX <= this._getClosestItem._closestItemMouseDistX\n                )\n            ) {\n                this._getClosestItem._closestItem = item;\n                this._getClosestItem._closestItemMouseDistX = this._testForClosestItem._mouseDistX;\n                this._getClosestItem._closestItemMouseDistY = this._testForClosestItem._mouseDistY;\n            }\n        },\n\n        /**\n         * Updates the position of the insertion point.\n         */\n        _updateInsertion: function() {\n            if (this.closestItem) {\n                this._moveDraggeeToItem(this.closestItem);\n            }\n\n            // Now that things have shifted around, invalidate the midpoints\n            this._clearMidpoints();\n\n            this.onInsertionPointChange();\n        },\n\n        _moveDraggeeToItem: function(item) {\n            // Going down?\n            if (this.$draggee.index() < $(item).index()) {\n                this.$draggee.insertAfter(item);\n            }\n            else {\n                this.$draggee.insertBefore(item);\n            }\n\n            this._placeInsertionWithDraggee();\n        },\n\n        _placeInsertionWithDraggee: function() {\n            if (this.$insertion) {\n                this.$insertion.insertBefore(this.$draggee.first());\n                this.insertionVisible = true;\n            }\n        },\n\n        /**\n         * Removes the insertion, if it's visible.\n         */\n        _removeInsertion: function() {\n            if (this.insertionVisible) {\n                this.$insertion.remove();\n                this.insertionVisible = false;\n            }\n        }\n    },\n    {\n        defaults: {\n            container: null,\n            insertion: null,\n            moveTargetItemToFront: false,\n            magnetStrength: 1,\n            onInsertionPointChange: $.noop,\n            onSortChange: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * ESC key manager class\n */\nGarnish.EscManager = Garnish.Base.extend(\n    {\n        handlers: null,\n\n        init: function() {\n            this.handlers = [];\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode == Garnish.ESC_KEY) {\n                    this.escapeLatest(ev);\n                }\n            });\n        },\n\n        register: function(obj, func) {\n            this.handlers.push({\n                obj: obj,\n                func: func\n            });\n        },\n\n        unregister: function(obj) {\n            for (var i = this.handlers.length - 1; i >= 0; i--) {\n                if (this.handlers[i].obj == obj) {\n                    this.handlers.splice(i, 1);\n                }\n            }\n        },\n\n        escapeLatest: function(ev) {\n            if (this.handlers.length) {\n                var handler = this.handlers.pop();\n\n                if (typeof handler.func == 'function') {\n                    var func = handler.func;\n                }\n                else {\n                    var func = handler.obj[handler.func];\n                }\n\n                func.call(handler.obj, ev);\n\n                if (typeof handler.obj.trigger == 'function') {\n                    handler.obj.trigger('escape');\n                }\n            }\n        }\n    }\n);\n\nGarnish.escManager = new Garnish.EscManager();\n","/** global: Garnish */\n/**\n * HUD\n */\nGarnish.HUD = Garnish.Base.extend(\n    {\n        $trigger: null,\n        $fixedTriggerParent: null,\n        $hud: null,\n        $tip: null,\n        $body: null,\n        $header: null,\n        $footer: null,\n        $mainContainer: null,\n        $main: null,\n        $shade: null,\n\n        showing: false,\n        orientation: null,\n        listeningForUpdateSizeAndPositionEvents: false,\n        pendingUpdateSizeAndPosition: false,\n\n        /**\n         * Constructor\n         */\n        init: function(trigger, bodyContents, settings) {\n\n            this.$trigger = $(trigger);\n\n            this.setSettings(settings, Garnish.HUD.defaults);\n            this.on('show', this.settings.onShow);\n            this.on('hide', this.settings.onHide);\n            this.on('submit', this.settings.onSubmit);\n\n            if (Garnish.HUD.activeHUDs === undefined) {\n                Garnish.HUD.activeHUDs = {};\n            }\n\n            this.$shade = $('<div/>', {'class': this.settings.shadeClass});\n            this.$hud = $('<div/>', {'class': this.settings.hudClass});\n            this.$tip = $('<div/>', {'class': this.settings.tipClass}).appendTo(this.$hud);\n            this.$body = $('<form/>', {'class': this.settings.bodyClass}).appendTo(this.$hud);\n            this.$mainContainer = $('<div/>', {'class': this.settings.mainContainerClass}).appendTo(this.$body);\n            this.$main = $('<div/>', {'class': this.settings.mainClass}).appendTo(this.$mainContainer);\n\n            this.updateBody(bodyContents);\n\n            // See if the trigger is fixed\n            var $parent = this.$trigger;\n\n            do {\n                if ($parent.css('position') == 'fixed') {\n                    this.$fixedTriggerParent = $parent;\n                    break;\n                }\n\n                $parent = $parent.offsetParent();\n            }\n            while ($parent.length && $parent.prop('nodeName') != 'HTML');\n\n            if (this.$fixedTriggerParent) {\n                this.$hud.css('position', 'fixed');\n            }\n            else {\n                this.$hud.css('position', 'absolute');\n            }\n\n            // Hide the HUD until it gets positioned\n\t\t\tvar windowWidth = Garnish.$win.width();\n\n\t\t\tthis.$hud.css({\n                left: '-' + windowWidth + 'px',\n\t\t\t});\n\n            this.show();\n\n            this.addListener(this.$body, 'submit', '_handleSubmit');\n            this.addListener(this.$shade, 'tap', 'hide');\n\n            if (this.settings.closeBtn) {\n                this.addListener(this.settings.closeBtn, 'activate', 'hide');\n            }\n        },\n\n        /**\n         * Update the body contents\n         */\n        updateBody: function(bodyContents) {\n            this.removeUpdateSizeAndPositionListeners();\n\n            // Cleanup\n            this.$main.html('');\n\n            if (this.$header) {\n                this.$hud.removeClass('has-header');\n                this.$header.remove();\n                this.$header = null;\n            }\n\n            if (this.$footer) {\n                this.$hud.removeClass('has-footer');\n                this.$footer.remove();\n                this.$footer = null;\n            }\n\n            // Append the new body contents\n            this.$main.append(bodyContents);\n\n            // Look for a header and footer\n            var $header = this.$main.find('.' + this.settings.headerClass + ':first'),\n                $footer = this.$main.find('.' + this.settings.footerClass + ':first');\n\n            if ($header.length) {\n                this.$header = $header.insertBefore(this.$mainContainer);\n                this.$hud.addClass('has-header');\n            }\n\n            if ($footer.length) {\n                this.$footer = $footer.insertAfter(this.$mainContainer);\n                this.$hud.addClass('has-footer');\n            }\n        },\n\n        /**\n         * Show\n         */\n        show: function(ev) {\n            if (ev && ev.stopPropagation) {\n                ev.stopPropagation();\n            }\n\n            if (this.showing) {\n                return;\n            }\n\n            if (this.settings.closeOtherHUDs) {\n                for (var hudID in Garnish.HUD.activeHUDs) {\n                    Garnish.HUD.activeHUDs[hudID].hide();\n                }\n            }\n\n            // Prevent the browser from jumping\n            this.$hud.css('top', Garnish.$scrollContainer.scrollTop());\n\n            // Move it to the end of <body> so it gets the highest sub-z-index\n            this.$shade.appendTo(Garnish.$bod);\n            this.$hud.appendTo(Garnish.$bod);\n\n            this.$hud.show();\n            this.$shade.show();\n            this.showing = true;\n            Garnish.HUD.activeHUDs[this._namespace] = this;\n            Garnish.escManager.register(this, 'hide');\n\n            this.onShow();\n            this.enable();\n\n            this.queueUpdateSizeAndPosition();\n        },\n\n        onShow: function() {\n            this.trigger('show');\n        },\n\n        updateSizeAndPosition: function(e) {\n            if (e && e.stopPropagation) {\n                e.stopPropagation();\n            }\n\n            this.pendingUpdateSizeAndPosition = false;\n            this.removeUpdateSizeAndPositionListeners();\n\n            var windowWidth,\n                windowHeight,\n                triggerWidth,\n                triggerHeight,\n                triggerOffset,\n                windowScrollLeft,\n                windowScrollTop,\n                scrollContainerTriggerOffset,\n                scrollContainerScrollLeft,\n                scrollContainerScrollTop,\n                hudBodyWidth,\n                hudBodyHeight;\n\n            // Get the window sizes and trigger offset\n\n            windowWidth = Garnish.$win.width();\n            windowHeight = Garnish.$win.height();\n            windowScrollLeft = Garnish.$win.scrollLeft();\n            windowScrollTop = Garnish.$win.scrollTop();\n\n            // Get the trigger's dimensions\n            triggerWidth = this.$trigger.outerWidth();\n            triggerHeight = this.$trigger.outerHeight();\n\n            // Get the offsets for each side of the trigger element\n            triggerOffset = this.$trigger.offset();\n\n            if (this.$fixedTriggerParent) {\n                triggerOffset.left -= windowScrollLeft;\n                triggerOffset.top -= windowScrollTop;\n\n                scrollContainerTriggerOffset = triggerOffset;\n\n                windowScrollLeft = 0;\n                windowScrollTop = 0;\n                scrollContainerScrollLeft = 0;\n                scrollContainerScrollTop = 0;\n            }\n            else {\n                scrollContainerTriggerOffset = Garnish.getOffset(this.$trigger);\n\n                scrollContainerScrollLeft = Garnish.$scrollContainer.scrollLeft();\n                scrollContainerScrollTop = Garnish.$scrollContainer.scrollTop();\n            }\n\n            triggerOffset.right = triggerOffset.left + triggerWidth;\n            triggerOffset.bottom = triggerOffset.top + triggerHeight;\n\n            scrollContainerTriggerOffset.right = scrollContainerTriggerOffset.left + triggerWidth;\n            scrollContainerTriggerOffset.bottom = scrollContainerTriggerOffset.top + triggerHeight;\n\n            // Get the HUD dimensions\n            this.$hud.css({\n                width: ''\n            });\n\n            this.$mainContainer.css({\n                height: '',\n                'overflow-x': '',\n                'overflow-y': ''\n            });\n\n            hudBodyWidth = this.$body.width();\n            hudBodyHeight = this.$body.height();\n\n            // Determine the best orientation for the HUD\n\n            // Find the actual available top/right/bottom/left clearances\n            var clearances = {\n                bottom: windowHeight + scrollContainerScrollTop - scrollContainerTriggerOffset.bottom,\n                top: scrollContainerTriggerOffset.top - scrollContainerScrollTop,\n                right: windowWidth + scrollContainerScrollLeft - scrollContainerTriggerOffset.right,\n                left: scrollContainerTriggerOffset.left - scrollContainerScrollLeft\n            };\n\n            // Find the first position that has enough room\n            this.orientation = null;\n\n            for (var i = 0; i < this.settings.orientations.length; i++) {\n                var orientation = this.settings.orientations[i],\n                    relevantSize = (orientation == 'top' || orientation == 'bottom' ? hudBodyHeight : hudBodyWidth);\n\n                if (clearances[orientation] - (this.settings.windowSpacing + this.settings.triggerSpacing) >= relevantSize) {\n                    // This is the first orientation that has enough room in order of preference, so we'll go with this\n                    this.orientation = orientation;\n                    break;\n                }\n\n                if (!this.orientation || clearances[orientation] > clearances[this.orientation]) {\n                    // Use this as a fallback as it's the orientation with the most clearance so far\n                    this.orientation = orientation;\n                }\n            }\n\n            // Just in case...\n            if (!this.orientation || $.inArray(this.orientation, ['bottom', 'top', 'right', 'left']) == -1) {\n                this.orientation = 'bottom'\n            }\n\n            // Update the tip class\n            if (this.tipClass) {\n                this.$tip.removeClass(this.tipClass);\n            }\n\n            this.tipClass = this.settings.tipClass + '-' + Garnish.HUD.tipClasses[this.orientation];\n            this.$tip.addClass(this.tipClass);\n\n            // Make sure the HUD body is within the allowed size\n\n            var maxHudBodyWidth,\n                maxHudBodyHeight;\n\n            if (this.orientation == 'top' || this.orientation == 'bottom') {\n                maxHudBodyWidth = windowWidth - this.settings.windowSpacing * 2;\n                maxHudBodyHeight = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n            }\n            else {\n                maxHudBodyWidth = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n                maxHudBodyHeight = windowHeight - this.settings.windowSpacing * 2;\n            }\n\n            if (maxHudBodyWidth < this.settings.minBodyWidth) {\n                maxHudBodyWidth = this.settings.minBodyWidth;\n            }\n\n            if (maxHudBodyHeight < this.settings.minBodyHeight) {\n                maxHudBodyHeight = this.settings.minBodyHeight;\n            }\n\n            if (hudBodyWidth > maxHudBodyWidth || hudBodyWidth < this.settings.minBodyWidth) {\n                if (hudBodyWidth > maxHudBodyWidth) {\n                    hudBodyWidth = maxHudBodyWidth;\n                }\n                else {\n                    hudBodyWidth = this.settings.minBodyWidth;\n                }\n\n                this.$hud.width(hudBodyWidth);\n\n                // Is there any overflow now?\n                if (this.$main.outerWidth() > maxHudBodyWidth) {\n                    this.$mainContainer.css('overflow-x', 'scroll');\n                }\n\n                // The height may have just changed\n                hudBodyHeight = this.$body.height();\n            }\n\n            if (hudBodyHeight > maxHudBodyHeight || hudBodyHeight < this.settings.minBodyHeight) {\n                if (hudBodyHeight > maxHudBodyHeight) {\n                    hudBodyHeight = maxHudBodyHeight;\n                }\n                else {\n                    hudBodyHeight = this.settings.minBodyHeight;\n                }\n\n                var mainHeight = hudBodyHeight;\n\n                if (this.$header) {\n                    mainHeight -= this.$header.outerHeight();\n                }\n\n                if (this.$footer) {\n                    mainHeight -= this.$footer.outerHeight();\n                }\n\n                this.$mainContainer.height(mainHeight);\n\n                // Is there any overflow now?\n                if (this.$main.outerHeight() > mainHeight) {\n                    this.$mainContainer.css('overflow-y', 'scroll');\n                }\n            }\n\n            // Set the HUD/tip positions\n\n            if (this.orientation == 'top' || this.orientation == 'bottom') {\n                // Center the HUD horizontally\n                var maxLeft = (windowWidth + windowScrollLeft) - (hudBodyWidth + this.settings.windowSpacing),\n                    minLeft = (windowScrollLeft + this.settings.windowSpacing),\n                    triggerCenter = triggerOffset.left + Math.round(triggerWidth / 2),\n                    left = triggerCenter - Math.round(hudBodyWidth / 2);\n\n                if (left > maxLeft) {\n                    left = maxLeft;\n                }\n                if (left < minLeft) {\n                    left = minLeft;\n                }\n\n                this.$hud.css('left', left);\n\n                var tipLeft = (triggerCenter - left) - (this.settings.tipWidth / 2);\n                this.$tip.css({left: tipLeft, top: ''});\n\n                if (this.orientation == 'top') {\n                    var top = triggerOffset.top - (hudBodyHeight + this.settings.triggerSpacing);\n                    this.$hud.css('top', top);\n                }\n                else {\n                    var top = triggerOffset.bottom + this.settings.triggerSpacing;\n                    this.$hud.css('top', top);\n                }\n            }\n            else {\n                // Center the HUD vertically\n                var maxTop = (windowHeight + windowScrollTop) - (hudBodyHeight + this.settings.windowSpacing),\n                    minTop = (windowScrollTop + this.settings.windowSpacing),\n                    triggerCenter = triggerOffset.top + Math.round(triggerHeight / 2),\n                    top = triggerCenter - Math.round(hudBodyHeight / 2);\n\n                if (top > maxTop) {\n                    top = maxTop;\n                }\n                if (top < minTop) {\n                    top = minTop;\n                }\n\n                this.$hud.css('top', top);\n\n                var tipTop = (triggerCenter - top) - (this.settings.tipWidth / 2);\n                this.$tip.css({top: tipTop, left: ''});\n\n\n                if (this.orientation == 'left') {\n                    var left = triggerOffset.left - (hudBodyWidth + this.settings.triggerSpacing);\n                    this.$hud.css('left', left);\n                }\n                else {\n                    var left = triggerOffset.right + this.settings.triggerSpacing;\n                    this.$hud.css('left', left);\n                }\n            }\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.addUpdateSizeAndPositionListeners()\n            }, this));\n\n            this.trigger('updateSizeAndPosition');\n        },\n\n        queueUpdateSizeAndPosition: function() {\n            if (this.pendingUpdateSizeAndPosition) {\n                return;\n            }\n\n            Garnish.requestAnimationFrame($.proxy(this, 'updateSizeAndPosition'));\n            this.pendingUpdateSizeAndPosition = true;\n        },\n\n        addUpdateSizeAndPositionListeners: function() {\n            if (this.listeningForUpdateSizeAndPositionEvents) {\n                return;\n            }\n\n            this.addListener(Garnish.$win, 'resize', 'queueUpdateSizeAndPosition');\n            this.addListener(this.$main, 'resize', 'queueUpdateSizeAndPosition');\n            if (!this.$fixedTriggerParent && Garnish.$scrollContainer[0] != Garnish.$win[0]) {\n                this.addListener(Garnish.$scrollContainer, 'scroll', 'queueUpdateSizeAndPosition');\n            }\n\n            this.listeningForUpdateSizeAndPositionEvents = true;\n        },\n\n        removeUpdateSizeAndPositionListeners: function() {\n            if (!this.listeningForUpdateSizeAndPositionEvents) {\n                return;\n            }\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(this.$main, 'resize');\n            if (!this.$fixedTriggerParent && Garnish.$scrollContainer[0] != Garnish.$win[0]) {\n                this.removeListener(Garnish.$scrollContainer, 'scroll');\n            }\n\n            this.listeningForUpdateSizeAndPositionEvents = false;\n        },\n\n        /**\n         * Hide\n         */\n        hide: function() {\n            this.disable();\n\n            this.$hud.hide();\n            this.$shade.hide();\n            this.showing = false;\n\n            delete Garnish.HUD.activeHUDs[this._namespace];\n\n            Garnish.escManager.unregister(this);\n\n            this.onHide();\n        },\n\n        onHide: function() {\n            this.trigger('hide');\n        },\n\n        toggle: function() {\n            if (this.showing) {\n                this.hide();\n            }\n            else {\n                this.show();\n            }\n        },\n\n        submit: function() {\n            this.onSubmit();\n        },\n\n        onSubmit: function() {\n            this.trigger('submit');\n        },\n\n        _handleSubmit: function(ev) {\n            ev.preventDefault();\n            this.submit();\n        }\n    },\n    {\n        tipClasses: {bottom: 'top', top: 'bottom', right: 'left', left: 'right'},\n\n        defaults: {\n            shadeClass: 'hud-shade',\n            hudClass: 'hud',\n            tipClass: 'tip',\n            bodyClass: 'body',\n            headerClass: 'hud-header',\n            footerClass: 'hud-footer',\n            mainContainerClass: 'main-container',\n            mainClass: 'main',\n            orientations: ['bottom', 'top', 'right', 'left'],\n            triggerSpacing: 10,\n            windowSpacing: 10,\n            tipWidth: 30,\n            minBodyWidth: 200,\n            minBodyHeight: 0,\n            onShow: $.noop,\n            onHide: $.noop,\n            onSubmit: $.noop,\n            closeBtn: null,\n            closeOtherHUDs: true\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Menu\n */\nGarnish.Menu = Garnish.Base.extend(\n    {\n        settings: null,\n\n        $container: null,\n        $options: null,\n        $anchor: null,\n\n        menuId: null,\n\n        _windowWidth: null,\n        _windowHeight: null,\n        _windowScrollLeft: null,\n        _windowScrollTop: null,\n\n        _anchorOffset: null,\n        _anchorWidth: null,\n        _anchorHeight: null,\n        _anchorOffsetRight: null,\n        _anchorOffsetBottom: null,\n\n        _menuWidth: null,\n        _menuHeight: null,\n\n        /**\n         * Constructor\n         */\n        init: function(container, settings) {\n            this.setSettings(settings, Garnish.Menu.defaults);\n\n            this.$container = $(container);\n\n            this.$options = $();\n            this.addOptions(this.$container.find('a'));\n\n            // Menu List\n            this.menuId = 'menu' + this._namespace;\n            this.$menuList = $('ul', this.$container);\n            this.$menuList.attr({\n                'role': 'listbox',\n                'id': this.menuId,\n                'aria-hidden': 'true'\n            });\n\n            // Deprecated\n            if (this.settings.attachToElement) {\n                this.settings.anchor = this.settings.attachToElement;\n                Garnish.log('The \\'attachToElement\\' setting is deprecated. Use \\'anchor\\' instead.');\n            }\n\n            if (this.settings.anchor) {\n                this.$anchor = $(this.settings.anchor);\n            }\n\n            // Prevent clicking on the container from hiding the menu\n            this.addListener(this.$container, 'mousedown', function(ev) {\n                ev.stopPropagation();\n\n                // Prevent this from causing the menu button to blur\n                ev.preventDefault();\n            });\n        },\n\n        addOptions: function($options) {\n            this.$options = this.$options.add($options);\n            $options.data('menu', this);\n\n            $options.each($.proxy(function(optionKey, option) {\n                $(option).attr({\n                    'role': 'option',\n                    'tabindex': '-1',\n                    'id': this.menuId + '-option-' + optionKey\n                });\n            }, this));\n\n            this.addListener($options, 'click', 'selectOption');\n        },\n\n        setPositionRelativeToAnchor: function() {\n            this._windowWidth = Garnish.$win.width();\n            this._windowHeight = Garnish.$win.height();\n            this._windowScrollLeft = Garnish.$win.scrollLeft();\n            this._windowScrollTop = Garnish.$win.scrollTop();\n\n            this._anchorOffset = this.$anchor.offset();\n            this._anchorWidth = this.$anchor.outerWidth();\n            this._anchorHeight = this.$anchor.outerHeight();\n            this._anchorOffsetRight = this._anchorOffset.left + this._anchorHeight;\n            this._anchorOffsetBottom = this._anchorOffset.top + this._anchorHeight;\n\n            this.$container.css('minWidth', 0);\n            this.$container.css('minWidth', this._anchorWidth - (this.$container.outerWidth() - this.$container.width()));\n\n            this._menuWidth = this.$container.outerWidth();\n            this._menuHeight = this.$container.outerHeight();\n\n            // Is there room for the menu below the anchor?\n            var topClearance = this._anchorOffset.top - this._windowScrollTop,\n                bottomClearance = this._windowHeight + this._windowScrollTop - this._anchorOffsetBottom;\n\n            if (bottomClearance >= this._menuHeight || bottomClearance >= topClearance || topClearance < this._menuHeight) {\n                this.$container.css('top', this._anchorOffsetBottom);\n            }\n            else {\n                this.$container.css('top', this._anchorOffset.top - this._menuHeight);\n            }\n\n            // Figure out how we're aliging it\n            var align = this.$container.data('align');\n\n            if (align != 'left' && align != 'center' && align != 'right') {\n                align = 'left';\n            }\n\n            if (align == 'center') {\n                this._alignCenter();\n            }\n            else {\n                // Figure out which options are actually possible\n                var rightClearance = this._windowWidth + this._windowScrollLeft - (this._anchorOffset.left + this._menuWidth),\n                    leftClearance = this._anchorOffsetRight - this._menuWidth;\n\n                if (align == 'right' && leftClearance >= 0 || rightClearance < 0) {\n                    this._alignRight();\n                }\n                else {\n                    this._alignLeft();\n                }\n            }\n\n            delete this._windowWidth;\n            delete this._windowHeight;\n            delete this._windowScrollLeft;\n            delete this._windowScrollTop;\n            delete this._anchorOffset;\n            delete this._anchorWidth;\n            delete this._anchorHeight;\n            delete this._anchorOffsetRight;\n            delete this._anchorOffsetBottom;\n            delete this._menuWidth;\n            delete this._menuHeight;\n        },\n\n        show: function() {\n            // Move the menu to the end of the DOM\n            this.$container.appendTo(Garnish.$bod)\n\n            if (this.$anchor) {\n                this.setPositionRelativeToAnchor();\n            }\n\n            this.$container.velocity('stop');\n            this.$container.css({\n                opacity: 1,\n                display: 'block'\n            });\n\n            this.$menuList.attr('aria-hidden', 'false');\n\n            Garnish.escManager.register(this, 'hide');\n        },\n\n        hide: function() {\n            this.$menuList.attr('aria-hidden', 'true');\n\n            this.$container.velocity('fadeOut', {duration: Garnish.FX_DURATION}, $.proxy(function() {\n                this.$container.detach();\n            }, this));\n\n            Garnish.escManager.unregister(this);\n\n            this.trigger('hide');\n        },\n\n        selectOption: function(ev) {\n            this.settings.onOptionSelect(ev.currentTarget);\n            this.trigger('optionselect', {selectedOption: ev.currentTarget});\n            this.hide();\n        },\n\n        _alignLeft: function() {\n            this.$container.css({\n                left: this._anchorOffset.left,\n                right: 'auto'\n            });\n        },\n\n        _alignRight: function() {\n            this.$container.css({\n                right: this._windowWidth - (this._anchorOffset.left + this._anchorWidth),\n                left: 'auto'\n            });\n        },\n\n        _alignCenter: function() {\n            var left = Math.round((this._anchorOffset.left + this._anchorWidth / 2) - (this._menuWidth / 2));\n\n            if (left < 0) {\n                left = 0;\n            }\n\n            this.$container.css('left', left);\n        }\n\n    },\n    {\n        defaults: {\n            anchor: null,\n            onOptionSelect: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Menu Button\n */\nGarnish.MenuBtn = Garnish.Base.extend(\n    {\n        $btn: null,\n        menu: null,\n        showingMenu: false,\n        disabled: true,\n\n        /**\n         * Constructor\n         */\n        init: function(btn, settings) {\n            this.$btn = $(btn);\n\n            // Is this already a menu button?\n            if (this.$btn.data('menubtn')) {\n                // Grab the old MenuBtn's menu container\n                var $menu = this.$btn.data('menubtn').menu.$container;\n\n                Garnish.log('Double-instantiating a menu button on an element');\n                this.$btn.data('menubtn').destroy();\n            }\n            else {\n                var $menu = this.$btn.next('.menu').detach();\n            }\n\n            this.$btn.data('menubtn', this);\n\n            this.setSettings(settings, Garnish.MenuBtn.defaults);\n\n            this.menu = new Garnish.Menu($menu, {\n                anchor: (this.settings.menuAnchor || this.$btn),\n                onOptionSelect: $.proxy(this, 'onOptionSelect')\n            });\n\n            this.$btn.attr({\n                'tabindex': 0,\n                'role': 'combobox',\n                'aria-owns': this.menu.menuId,\n                'aria-haspopup': 'true',\n                'aria-expanded': 'false',\n            });\n\n            this.menu.on('hide', $.proxy(this, 'onMenuHide'));\n            this.addListener(this.$btn, 'mousedown', 'onMouseDown');\n            this.addListener(this.$btn, 'keydown', 'onKeyDown');\n            this.addListener(this.$btn, 'blur', 'onBlur');\n            this.enable();\n        },\n\n        onBlur: function(ev) {\n            if (this.showingMenu) {\n                this.hideMenu();\n            }\n        },\n\n        onKeyDown: function(ev) {\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n\n                    var $currentOption = this.menu.$options.filter('.hover');\n\n                    if ($currentOption.length > 0) {\n                        $currentOption.get(0).click();\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    ev.preventDefault();\n\n                    if (!this.showingMenu) {\n                        this.showMenu();\n\n                        var $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length > 0) {\n                            $option;\n                        }\n                        else {\n                            $option = this.menu.$options.first();\n                        }\n\n                        this.focusOption($option);\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    var $option;\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, $.proxy(function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index + 1) < this.menu.$options.length) {\n                                        $option = $(this.menu.$options[(index + 1)]);\n                                    }\n                                }\n                            }\n                        }, this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[0]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length == 0) {\n                            $option = this.menu.$options.first();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    var $option;\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, $.proxy(function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index - 1) >= 0) {\n                                        $option = $(this.menu.$options[(index - 1)]);\n                                    }\n                                }\n                            }\n                        }, this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[(this.menu.$options.length - 1)]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length == 0) {\n                            $option = this.menu.$options.last();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n            }\n        },\n\n        focusOption: function($option) {\n            this.menu.$options.removeClass('hover');\n\n            $option.addClass('hover');\n\n            this.menu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n            this.$btn.attr('aria-activedescendant', $option.attr('id'));\n        },\n\n        onMouseDown: function(ev) {\n            if (ev.which != Garnish.PRIMARY_CLICK || Garnish.isCtrlKeyPressed(ev)) {\n                return;\n            }\n\n            ev.preventDefault();\n\n            if (this.showingMenu) {\n                this.hideMenu();\n            }\n            else {\n                this.showMenu();\n            }\n        },\n\n        showMenu: function() {\n            if (this.disabled) {\n                return;\n            }\n\n            this.menu.show();\n            this.$btn.addClass('active');\n            this.$btn.trigger('focus');\n            this.$btn.attr('aria-expanded', 'true');\n\n            this.showingMenu = true;\n\n            setTimeout($.proxy(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'onMouseDown');\n            }, this), 1);\n        },\n\n        hideMenu: function() {\n            this.menu.hide();\n            this.$btn.attr('aria-expanded', 'false');\n        },\n\n        onMenuHide: function() {\n            this.$btn.removeClass('active');\n            this.showingMenu = false;\n\n            this.removeListener(Garnish.$doc, 'mousedown');\n        },\n\n        onOptionSelect: function(option) {\n            this.settings.onOptionSelect(option);\n            this.trigger('optionSelect', {option: option});\n        },\n\n        enable: function() {\n            this.disabled = false;\n        },\n\n        disable: function() {\n            this.disabled = true;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$btn.removeData('menubtn');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuAnchor: null,\n            onOptionSelect: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Mixed input\n *\n * @todo RTL support, in the event that the input doesn't have dir=\"ltr\".\n */\nGarnish.MixedInput = Garnish.Base.extend(\n    {\n        $container: null,\n        elements: null,\n        focussedElement: null,\n        blurTimeout: null,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n            this.setSettings(settings, Garnish.MixedInput.defaults);\n\n            this.elements = [];\n\n            // Allow the container to receive focus\n            this.$container.attr('tabindex', 0);\n            this.addListener(this.$container, 'focus', 'onFocus');\n        },\n\n        getElementIndex: function($elem) {\n            return $.inArray($elem, this.elements);\n        },\n\n        isText: function($elem) {\n            return ($elem.prop('nodeName') == 'INPUT');\n        },\n\n        onFocus: function(ev) {\n            // Set focus to the first element\n            if (this.elements.length) {\n                var $elem = this.elements[0];\n                this.setFocus($elem);\n                this.setCarotPos($elem, 0);\n            }\n            else {\n                this.addTextElement();\n            }\n        },\n\n        addTextElement: function(index) {\n            var text = new TextElement(this);\n            this.addElement(text.$input, index);\n            return text;\n        },\n\n        addElement: function($elem, index) {\n            // Was a target index passed, and is it valid?\n            if (index === undefined) {\n                if (this.focussedElement) {\n                    var focussedElement = this.focussedElement,\n                        focussedElementIndex = this.getElementIndex(focussedElement);\n\n                    // Is the focus on a text element?\n                    if (this.isText(focussedElement)) {\n                        var selectionStart = focussedElement.prop('selectionStart'),\n                            selectionEnd = focussedElement.prop('selectionEnd'),\n                            val = focussedElement.val(),\n                            preVal = val.substring(0, selectionStart),\n                            postVal = val.substr(selectionEnd);\n\n                        if (preVal && postVal) {\n                            // Split the input into two\n                            focussedElement.val(preVal).trigger('change');\n                            var newText = new TextElement(this);\n                            newText.$input.val(postVal).trigger('change');\n                            this.addElement(newText.$input, focussedElementIndex + 1);\n\n                            // Insert the new element in between them\n                            index = focussedElementIndex + 1;\n                        }\n                        else if (!preVal) {\n                            // Insert the new element before this one\n                            index = focussedElementIndex;\n                        }\n                        else {\n                            // Insert it after this one\n                            index = focussedElementIndex + 1;\n                        }\n                    }\n                    else {\n                        // Just insert the new one after this one\n                        index = focussedElementIndex + 1;\n                    }\n                }\n                else {\n                    // Insert the new element at the end\n                    index = this.elements.length;\n                }\n            }\n\n            // Add the element\n            if (this.elements[index] !== undefined) {\n                $elem.insertBefore(this.elements[index]);\n                this.elements.splice(index, 0, $elem);\n            }\n            else {\n                // Just for safe measure, set the index to what it really will be\n                index = this.elements.length;\n\n                this.$container.append($elem);\n                this.elements.push($elem);\n            }\n\n            // Make sure that there are text elements surrounding all non-text elements\n            if (!this.isText($elem)) {\n                // Add a text element before?\n                if (index == 0 || !this.isText(this.elements[index - 1])) {\n                    this.addTextElement(index);\n                    index++;\n                }\n\n                // Add a text element after?\n                if (index == this.elements.length - 1 || !this.isText(this.elements[index + 1])) {\n                    this.addTextElement(index + 1);\n                }\n            }\n\n            // Add event listeners\n            this.addListener($elem, 'click', function() {\n                this.setFocus($elem);\n            });\n\n            // Set focus to the new element\n            setTimeout($.proxy(function() {\n                this.setFocus($elem);\n            }, this), 1);\n        },\n\n        removeElement: function($elem) {\n            var index = this.getElementIndex($elem);\n            if (index != -1) {\n                this.elements.splice(index, 1);\n\n                if (!this.isText($elem)) {\n                    // Combine the two now-adjacent text elements\n                    var $prevElem = this.elements[index - 1],\n                        $nextElem = this.elements[index];\n\n                    if (this.isText($prevElem) && this.isText($nextElem)) {\n                        var prevElemVal = $prevElem.val(),\n                            newVal = prevElemVal + $nextElem.val();\n                        $prevElem.val(newVal).trigger('change');\n                        this.removeElement($nextElem);\n                        this.setFocus($prevElem);\n                        this.setCarotPos($prevElem, prevElemVal.length);\n                    }\n                }\n\n                $elem.remove();\n            }\n        },\n\n        setFocus: function($elem) {\n            this.$container.addClass('focus');\n\n            if (!this.focussedElement) {\n                // Prevent the container from receiving focus\n                // as long as one of its elements has focus\n                this.$container.attr('tabindex', '-1');\n            }\n            else {\n                // Blur the previously-focussed element\n                this.blurFocussedElement();\n            }\n\n            $elem.attr('tabindex', '0');\n            $elem.focus();\n            this.focussedElement = $elem;\n\n            this.addListener($elem, 'blur', function() {\n                this.blurTimeout = setTimeout($.proxy(function() {\n                    if (this.focussedElement == $elem) {\n                        this.blurFocussedElement();\n                        this.focussedElement = null;\n                        this.$container.removeClass('focus');\n\n                        // Get ready for future focus\n                        this.$container.attr('tabindex', '0');\n                    }\n                }, this), 1);\n            });\n        },\n\n        blurFocussedElement: function() {\n            this.removeListener(this.focussedElement, 'blur');\n            this.focussedElement.attr('tabindex', '-1');\n        },\n\n        focusPreviousElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index > 0) {\n                var $elem = this.elements[index - 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the end\n                if (this.isText($elem)) {\n                    var length = $elem.val().length;\n                    this.setCarotPos($elem, length);\n                }\n            }\n        },\n\n        focusNextElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index < this.elements.length - 1) {\n                var $elem = this.elements[index + 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the beginning\n                if (this.isText($elem)) {\n                    this.setCarotPos($elem, 0)\n                }\n            }\n        },\n\n        setCarotPos: function($elem, pos) {\n            $elem.prop('selectionStart', pos);\n            $elem.prop('selectionEnd', pos);\n        }\n\n    });\n\n\nvar TextElement = Garnish.Base.extend({\n\n        parentInput: null,\n        $input: null,\n        $stage: null,\n        val: null,\n        focussed: false,\n        interval: null,\n\n        init: function(parentInput) {\n            this.parentInput = parentInput;\n\n            this.$input = $('<input type=\"text\"/>').appendTo(this.parentInput.$container);\n            this.$input.css('margin-right', (2 - TextElement.padding) + 'px');\n\n            this.setWidth();\n\n            this.addListener(this.$input, 'focus', 'onFocus');\n            this.addListener(this.$input, 'blur', 'onBlur');\n            this.addListener(this.$input, 'keydown', 'onKeyDown');\n            this.addListener(this.$input, 'change', 'checkInput');\n        },\n\n        getIndex: function() {\n            return this.parentInput.getElementIndex(this.$input);\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                position: 'absolute',\n                top: -9999,\n                left: -9999,\n                wordWrap: 'nowrap'\n            });\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getTextWidth: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (val) {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Spaces\n                val = val.replace(/ /g, '&nbsp;');\n            }\n\n            this.$stage.html(val);\n            this.stageWidth = this.$stage.width();\n            return this.stageWidth;\n        },\n\n        onFocus: function() {\n            this.focussed = true;\n            this.interval = setInterval($.proxy(this, 'checkInput'), Garnish.NiceText.interval);\n            this.checkInput();\n        },\n\n        onBlur: function() {\n            this.focussed = false;\n            clearInterval(this.interval);\n            this.checkInput();\n        },\n\n        onKeyDown: function(ev) {\n            setTimeout($.proxy(this, 'checkInput'), 1);\n\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    if (this.$input.prop('selectionStart') == 0 && this.$input.prop('selectionEnd') == 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    if (this.$input.prop('selectionStart') == this.val.length && this.$input.prop('selectionEnd') == this.val.length) {\n                        // Set focus to the next element\n                        this.parentInput.focusNextElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.DELETE_KEY: {\n                    if (this.$input.prop('selectionStart') == 0 && this.$input.prop('selectionEnd') == 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                        ev.preventDefault();\n                    }\n                }\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        setVal: function(val) {\n            this.$input.val(val);\n            this.checkInput();\n        },\n\n        checkInput: function() {\n            // Has the value changed?\n            var changed = (this.val !== this.getVal());\n            if (changed) {\n                this.setWidth();\n                this.onChange();\n            }\n\n            return changed;\n        },\n\n        setWidth: function() {\n            // has the width changed?\n            if (this.stageWidth !== this.getTextWidth(this.val)) {\n                // update the textarea width\n                var width = this.stageWidth + TextElement.padding;\n                this.$input.width(width);\n            }\n        },\n\n        onChange: $.noop\n    },\n    {\n        padding: 20\n    }\n);\n","/** global: Garnish */\n/**\n * Modal\n */\nGarnish.Modal = Garnish.Base.extend(\n    {\n        $container: null,\n        $shade: null,\n\n        visible: false,\n\n        dragger: null,\n\n        desiredWidth: null,\n        desiredHeight: null,\n        resizeDragger: null,\n        resizeStartWidth: null,\n        resizeStartHeight: null,\n\n        init: function(container, settings) {\n            // Param mapping\n            if (settings === undefined && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n            }\n\n            this.setSettings(settings, Garnish.Modal.defaults);\n\n            // Create the shade\n            this.$shade = $('<div class=\"' + this.settings.shadeClass + '\"/>');\n\n            // If the container is already set, drop the shade below it.\n            if (container) {\n                this.$shade.insertBefore(container);\n            }\n            else {\n                this.$shade.appendTo(Garnish.$bod);\n            }\n\n            if (container) {\n                this.setContainer(container);\n\n                if (this.settings.autoShow) {\n                    this.show();\n                }\n            }\n\n            Garnish.Modal.instances.push(this);\n        },\n\n        setContainer: function(container) {\n            this.$container = $(container);\n\n            // Is this already a modal?\n            if (this.$container.data('modal')) {\n                Garnish.log('Double-instantiating a modal on an element');\n                this.$container.data('modal').destroy();\n            }\n\n            this.$container.data('modal', this);\n\n            if (this.settings.draggable) {\n                this.dragger = new Garnish.DragMove(this.$container, {\n                    handle: (this.settings.dragHandleSelector ? this.$container.find(this.settings.dragHandleSelector) : this.$container)\n                });\n            }\n\n            if (this.settings.resizable) {\n                var $resizeDragHandle = $('<div class=\"resizehandle\"/>').appendTo(this.$container);\n\n                this.resizeDragger = new Garnish.BaseDrag($resizeDragHandle, {\n                    onDragStart: $.proxy(this, '_handleResizeStart'),\n                    onDrag: $.proxy(this, '_handleResize')\n                });\n            }\n\n            this.addListener(this.$container, 'click', function(ev) {\n                ev.stopPropagation();\n            });\n\n            // Show it if we're late to the party\n            if (this.visible) {\n                this.show();\n            }\n        },\n\n        show: function() {\n            // Close other modals as needed\n            if (this.settings.closeOtherModals && Garnish.Modal.visibleModal && Garnish.Modal.visibleModal != this) {\n                Garnish.Modal.visibleModal.hide();\n            }\n\n            if (this.$container) {\n                // Move it to the end of <body> so it gets the highest sub-z-index\n                this.$shade.appendTo(Garnish.$bod);\n                this.$container.appendTo(Garnish.$bod);\n\n                this.$container.show();\n                this.updateSizeAndPosition();\n\n                this.$shade.velocity('fadeIn', {\n                    duration: 50,\n                    complete: $.proxy(function() {\n                        this.$container.velocity('fadeIn', {\n                            complete: $.proxy(function() {\n                                this.updateSizeAndPosition();\n                                this.onFadeIn();\n                            }, this)\n                        });\n                    }, this)\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.addListener(this.$shade, 'click', 'hide');\n                }\n\n                this.addListener(Garnish.$win, 'resize', 'updateSizeAndPosition');\n            }\n\n            this.enable();\n\n            if (this.settings.hideOnEsc) {\n                Garnish.escManager.register(this, 'hide');\n            }\n\n            if (!this.visible) {\n                this.visible = true;\n                Garnish.Modal.visibleModal = this;\n\n                this.trigger('show');\n                this.settings.onShow();\n            }\n        },\n\n        quickShow: function() {\n            this.show();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n        },\n\n        hide: function(ev) {\n            this.disable();\n\n            if (ev) {\n                ev.stopPropagation();\n            }\n\n            if (this.$container) {\n                this.$container.velocity('fadeOut', {duration: Garnish.FX_DURATION});\n                this.$shade.velocity('fadeOut', {\n                    duration: Garnish.FX_DURATION,\n                    complete: $.proxy(this, 'onFadeOut')\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.removeListener(this.$shade, 'click');\n                }\n\n                this.removeListener(Garnish.$win, 'resize');\n            }\n\n            this.visible = false;\n            Garnish.Modal.visibleModal = null;\n\n            if (this.settings.hideOnEsc) {\n                Garnish.escManager.unregister(this);\n            }\n\n            this.trigger('hide');\n            this.settings.onHide();\n        },\n\n        quickHide: function() {\n            this.hide();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.css('opacity', 0).hide();\n\n                this.$shade.velocity('stop');\n                this.$shade.css('opacity', 0).hide();\n            }\n        },\n\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            this.$container.css({\n                'width': (this.desiredWidth ? Math.max(this.desiredWidth, 200) : ''),\n                'height': (this.desiredHeight ? Math.max(this.desiredHeight, 200) : ''),\n                'min-width': '',\n                'min-height': ''\n            });\n\n            // Set the width first so that the height can adjust for the width\n            this.updateSizeAndPosition._windowWidth = Garnish.$win.width();\n            this.updateSizeAndPosition._width = Math.min(this.getWidth(), this.updateSizeAndPosition._windowWidth - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'width': this.updateSizeAndPosition._width,\n                'min-width': this.updateSizeAndPosition._width,\n                'left': Math.round((this.updateSizeAndPosition._windowWidth - this.updateSizeAndPosition._width) / 2)\n            });\n\n            // Now set the height\n            this.updateSizeAndPosition._windowHeight = Garnish.$win.height();\n            this.updateSizeAndPosition._height = Math.min(this.getHeight(), this.updateSizeAndPosition._windowHeight - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'height': this.updateSizeAndPosition._height,\n                'min-height': this.updateSizeAndPosition._height,\n                'top': Math.round((this.updateSizeAndPosition._windowHeight - this.updateSizeAndPosition._height) / 2)\n            });\n\n            this.trigger('updateSizeAndPosition');\n        },\n\n        onFadeIn: function() {\n            this.trigger('fadeIn');\n            this.settings.onFadeIn();\n        },\n\n        onFadeOut: function() {\n            this.trigger('fadeOut');\n            this.settings.onFadeOut();\n        },\n\n        getHeight: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the height of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            this.getHeight._height = this.$container.outerHeight();\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getHeight._height;\n        },\n\n        getWidth: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the width of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            // Chrome might be 1px shy here for some reason\n            this.getWidth._width = this.$container.outerWidth() + 1;\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getWidth._width;\n        },\n\n        _handleResizeStart: function() {\n            this.resizeStartWidth = this.getWidth();\n            this.resizeStartHeight = this.getHeight();\n        },\n\n        _handleResize: function() {\n            if (Garnish.ltr) {\n                this.desiredWidth = this.resizeStartWidth + (this.resizeDragger.mouseDistX * 2);\n            }\n            else {\n                this.desiredWidth = this.resizeStartWidth - (this.resizeDragger.mouseDistX * 2);\n            }\n\n            this.desiredHeight = this.resizeStartHeight + (this.resizeDragger.mouseDistY * 2);\n\n            this.updateSizeAndPosition();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$container) {\n                this.$container.removeData('modal').remove();\n            }\n\n            if (this.dragger) {\n                this.dragger.destroy();\n            }\n\n            if (this.resizeDragger) {\n                this.resizeDragger.destroy();\n            }\n\n            this.base();\n        }\n    },\n    {\n        relativeElemPadding: 8,\n        defaults: {\n            autoShow: true,\n            draggable: false,\n            dragHandleSelector: null,\n            resizable: false,\n            minGutter: 10,\n            onShow: $.noop,\n            onHide: $.noop,\n            onFadeIn: $.noop,\n            onFadeOut: $.noop,\n            closeOtherModals: false,\n            hideOnEsc: true,\n            hideOnShadeClick: true,\n            shadeClass: 'modal-shade'\n        },\n        instances: [],\n        visibleModal: null\n    }\n);\n","/** global: Garnish */\n/**\n * Nice Text\n */\nGarnish.NiceText = Garnish.Base.extend(\n    {\n        $input: null,\n        $hint: null,\n        $stage: null,\n        $charsLeft: null,\n        autoHeight: null,\n        maxLength: null,\n        showCharsLeft: false,\n        showingHint: false,\n        val: null,\n        inputBoxSizing: 'content-box',\n        width: null,\n        height: null,\n        minHeight: null,\n        initialized: false,\n\n        init: function(input, settings) {\n            this.$input = $(input);\n            this.settings = $.extend({}, Garnish.NiceText.defaults, settings);\n\n            if (this.isVisible()) {\n                this.initialize();\n            }\n            else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n\n        isVisible: function() {\n            return (this.$input.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            this.maxLength = this.$input.attr('maxlength');\n\n            if (this.maxLength) {\n                this.maxLength = parseInt(this.maxLength);\n            }\n\n            if (this.maxLength && (this.settings.showCharsLeft || Garnish.hasAttr(this.$input, 'data-show-chars-left'))) {\n                this.showCharsLeft = true;\n\n                // Remove the maxlength attribute\n                this.$input.removeAttr('maxlength');\n            }\n\n            // Is this already a transparent text input?\n            if (this.$input.data('nicetext')) {\n                Garnish.log('Double-instantiating a transparent text input on an element');\n                this.$input.data('nicetext').destroy();\n            }\n\n            this.$input.data('nicetext', this);\n\n            this.getVal();\n\n            this.autoHeight = (this.settings.autoHeight && this.$input.prop('nodeName') == 'TEXTAREA');\n\n            if (this.autoHeight) {\n                this.minHeight = this.getHeightForValue('');\n                this.updateHeight();\n\n                // Update height when the window resizes\n                this.width = this.$input.width();\n                this.addListener(Garnish.$win, 'resize', 'updateHeightIfWidthChanged');\n            }\n\n            if (this.settings.hint) {\n                this.$hintContainer = $('<div class=\"texthint-container\"/>').insertBefore(this.$input);\n                this.$hint = $('<div class=\"texthint\">' + this.settings.hint + '</div>').appendTo(this.$hintContainer);\n                this.$hint.css({\n                    top: (parseInt(this.$input.css('borderTopWidth')) + parseInt(this.$input.css('paddingTop'))),\n                    left: (parseInt(this.$input.css('borderLeftWidth')) + parseInt(this.$input.css('paddingLeft')) + 1)\n                });\n                Garnish.copyTextStyles(this.$input, this.$hint);\n\n                if (this.val) {\n                    this.$hint.hide();\n                }\n                else {\n                    this.showingHint = true;\n                }\n\n                // Focus the input when clicking on the hint\n                this.addListener(this.$hint, 'mousedown', function(ev) {\n                    ev.preventDefault();\n                    this.$input.focus();\n                });\n            }\n\n            if (this.showCharsLeft) {\n                this.$charsLeft = $('<div class=\"' + this.settings.charsLeftClass + '\"/>').insertAfter(this.$input);\n                this.updateCharsLeft();\n            }\n\n            this.addListener(this.$input, 'textchange', 'onTextChange');\n        },\n\n        initializeIfVisible: function() {\n            if (this.isVisible()) {\n                this.initialize();\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        showHint: function() {\n            this.$hint.velocity('fadeIn', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = true;\n        },\n\n        hideHint: function() {\n            this.$hint.velocity('fadeOut', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = false;\n        },\n\n        onTextChange: function() {\n            this.getVal();\n\n            if (this.$hint) {\n                if (this.showingHint && this.val) {\n                    this.hideHint();\n                }\n                else if (!this.showingHint && !this.val) {\n                    this.showHint();\n                }\n            }\n\n            if (this.autoHeight) {\n                this.updateHeight();\n            }\n\n            if (this.showCharsLeft) {\n                this.updateCharsLeft();\n            }\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                display: 'block',\n                position: 'absolute',\n                top: -9999,\n                left: -9999\n            });\n\n            this.inputBoxSizing = this.$input.css('box-sizing');\n\n            if (this.inputBoxSizing == 'border-box') {\n                this.$stage.css({\n                    'border-top': this.$input.css('border-top'),\n                    'border-right': this.$input.css('border-right'),\n                    'border-bottom': this.$input.css('border-bottom'),\n                    'border-left': this.$input.css('border-left'),\n                    'padding-top': this.$input.css('padding-top'),\n                    'padding-right': this.$input.css('padding-right'),\n                    'padding-bottom': this.$input.css('padding-bottom'),\n                    'padding-left': this.$input.css('padding-left'),\n                    '-webkit-box-sizing': this.inputBoxSizing,\n                    '-moz-box-sizing': this.inputBoxSizing,\n                    'box-sizing': this.inputBoxSizing\n                });\n            }\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getHeightForValue: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (this.inputBoxSizing == 'border-box') {\n                this.$stage.css('width', this.$input.outerWidth());\n            }\n            else {\n                this.$stage.css('width', this.$input.width());\n            }\n\n            if (!val) {\n                val = '&nbsp;';\n                for (var i = 1; i < this.$input.prop('rows'); i++) {\n                    val += '<br/>&nbsp;';\n                }\n            }\n            else {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Multiple spaces\n                val = val.replace(/ {2,}/g, function(spaces) {\n                    // TODO: replace with String.repeat() when more broadly available?\n                    var replace = '';\n                    for (var i = 0; i < spaces.length - 1; i++) {\n                        replace += '&nbsp;';\n                    }\n                    return replace + ' ';\n                });\n\n                // Line breaks\n                val = val.replace(/[\\n\\r]$/g, '<br/>&nbsp;');\n                val = val.replace(/[\\n\\r]/g, '<br/>');\n            }\n\n            this.$stage.html(val);\n\n            if (this.inputBoxSizing == 'border-box') {\n                this.getHeightForValue._height = this.$stage.outerHeight();\n            }\n            else {\n                this.getHeightForValue._height = this.$stage.height();\n            }\n\n            if (this.minHeight && this.getHeightForValue._height < this.minHeight) {\n                this.getHeightForValue._height = this.minHeight;\n            }\n\n            return this.getHeightForValue._height;\n        },\n\n        updateHeight: function() {\n            // has the height changed?\n            if (this.height !== (this.height = this.getHeightForValue(this.val))) {\n                this.$input.css('min-height', this.height);\n\n                if (this.initialized) {\n                    this.onHeightChange();\n                }\n            }\n        },\n\n        updateHeightIfWidthChanged: function() {\n            if (this.isVisible() && this.width !== (this.width = this.$input.width()) && this.width) {\n                this.updateHeight();\n            }\n        },\n\n        onHeightChange: function() {\n            this.settings.onHeightChange();\n        },\n\n        updateCharsLeft: function() {\n            this.updateCharsLeft._charsLeft = this.maxLength - this.val.length;\n            this.$charsLeft.text(this.updateCharsLeft._charsLeft);\n\n            if (this.updateCharsLeft._charsLeft >= 0) {\n                this.$charsLeft.removeClass(this.settings.negativeCharsLeftClass);\n            }\n            else {\n                this.$charsLeft.addClass(this.settings.negativeCharsLeftClass);\n            }\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$input.removeData('nicetext');\n\n            if (this.$hint) {\n                this.$hint.remove();\n            }\n\n            if (this.$stage) {\n                this.$stage.remove();\n            }\n\n            this.base();\n        }\n    },\n    {\n        interval: 100,\n        hintFadeDuration: 50,\n        defaults: {\n            autoHeight: true,\n            showCharsLeft: false,\n            charsLeftClass: 'chars-left',\n            negativeCharsLeftClass: 'negative-chars-left',\n            onHeightChange: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Pill\n */\nGarnish.Pill = Garnish.Base.extend(\n    {\n        $outerContainer: null,\n        $innerContainer: null,\n        $btns: null,\n        $selectedBtn: null,\n        $input: null,\n\n        init: function(outerContainer) {\n            this.$outerContainer = $(outerContainer);\n\n            // Is this already a pill?\n            if (this.$outerContainer.data('pill')) {\n                Garnish.log('Double-instantiating a pill on an element');\n                this.$outerContainer.data('pill').destroy();\n            }\n\n            this.$outerContainer.data('pill', this);\n\n            this.$innerContainer = this.$outerContainer.find('.btngroup:first');\n            this.$btns = this.$innerContainer.find('.btn');\n            this.$selectedBtn = this.$btns.filter('.active:first');\n            this.$input = this.$outerContainer.find('input:first');\n\n            Garnish.preventOutlineOnMouseFocus(this.$innerContainer);\n            this.addListener(this.$btns, 'mousedown', 'onMouseDown');\n            this.addListener(this.$innerContainer, 'keydown', 'onKeyDown');\n        },\n\n        select: function(btn) {\n            this.$selectedBtn.removeClass('active');\n            var $btn = $(btn);\n            $btn.addClass('active');\n            this.$input.val($btn.attr('data-value'));\n            this.$selectedBtn = $btn;\n        },\n\n        selectNext: function() {\n            if (!this.$selectedBtn.length) {\n                this.select(this.$btns[this.$btns.length - 1]);\n            }\n            else {\n                var nextIndex = this._getSelectedBtnIndex() + 1;\n\n                if (this.$btns[nextIndex] !== undefined) {\n                    this.select(this.$btns[nextIndex]);\n                }\n            }\n        },\n\n        selectPrev: function() {\n            if (!this.$selectedBtn.length) {\n                this.select(this.$btns[0]);\n            }\n            else {\n                var prevIndex = this._getSelectedBtnIndex() - 1;\n\n                if (this.$btns[prevIndex] !== undefined) {\n                    this.select(this.$btns[prevIndex]);\n                }\n            }\n        },\n\n        onMouseDown: function(ev) {\n            this.select(ev.currentTarget);\n        },\n\n        _getSelectedBtnIndex: function() {\n            if (this.$selectedBtn[0] !== undefined) {\n                return $.inArray(this.$selectedBtn[0], this.$btns);\n            }\n            else {\n                return -1;\n            }\n        },\n\n        onKeyDown: function(ev) {\n            switch (ev.keyCode) {\n                case Garnish.RIGHT_KEY: {\n                    if (Garnish.ltr) {\n                        this.selectNext();\n                    }\n                    else {\n                        this.selectPrev();\n                    }\n\n                    ev.preventDefault();\n                    break;\n                }\n\n                case Garnish.LEFT_KEY: {\n                    if (Garnish.ltr) {\n                        this.selectPrev();\n                    }\n                    else {\n                        this.selectNext();\n                    }\n\n                    ev.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$outerContainer.removeData('pill');\n            this.base();\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Select\n */\nGarnish.Select = Garnish.Base.extend(\n    {\n        $container: null,\n        $items: null,\n        $selectedItems: null,\n\n        mousedownTarget: null,\n        mouseUpTimeout: null,\n        callbackFrame: null,\n\n        $focusable: null,\n        $first: null,\n        first: null,\n        $last: null,\n        last: null,\n\n        /**\n         * Constructor\n         */\n        init: function(container, items, settings) {\n            this.$container = $(container);\n\n            // Param mapping\n            if (items === undefined && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n                items = null;\n            }\n            else if (settings === undefined && $.isPlainObject(items)) {\n                // (container, settings)\n                settings = items;\n                items = null;\n            }\n\n            // Is this already a select?\n            if (this.$container.data('select')) {\n                Garnish.log('Double-instantiating a select on an element');\n                this.$container.data('select').destroy();\n            }\n\n            this.$container.data('select', this);\n\n            this.setSettings(settings, Garnish.Select.defaults);\n\n            this.$items = $();\n            this.$selectedItems = $();\n\n            this.addItems(items);\n\n            // --------------------------------------------------------------------\n\n            if (this.settings.allowEmpty && !this.settings.checkboxMode) {\n                this.addListener(this.$container, 'click', function(ev) {\n                    if (this.ignoreClick) {\n                        this.ignoreClick = false;\n                    }\n                    else {\n                        // Deselect all items on container click\n                        this.deselectAll(true);\n                    }\n                });\n            }\n        },\n\n        /**\n         * Get Item Index\n         */\n        getItemIndex: function($item) {\n            return this.$items.index($item[0]);\n        },\n\n        /**\n         * Is Selected?\n         */\n        isSelected: function(item) {\n            if (Garnish.isJquery(item)) {\n                if (!item[0]) {\n                    return false;\n                }\n\n                item = item[0];\n            }\n\n            return ($.inArray(item, this.$selectedItems) != -1);\n        },\n\n        /**\n         * Select Item\n         */\n        selectItem: function($item, focus, preventScroll) {\n            if (!this.settings.multi) {\n                this.deselectAll();\n            }\n\n            this.$first = this.$last = $item;\n            this.first = this.last = this.getItemIndex($item);\n\n            if (focus) {\n                this.setFocusableItem($item);\n                this.focusItem($item, preventScroll);\n            }\n\n            this._selectItems($item);\n        },\n\n        selectAll: function() {\n            if (!this.settings.multi || !this.$items.length) {\n                return;\n            }\n\n            this.first = 0;\n            this.last = this.$items.length - 1;\n            this.$first = this.$items.eq(this.first);\n            this.$last = this.$items.eq(this.last);\n\n            this._selectItems(this.$items);\n        },\n\n        /**\n         * Select Range\n         */\n        selectRange: function($item, preventScroll) {\n            if (!this.settings.multi) {\n                return this.selectItem($item, true);\n            }\n\n            this.deselectAll();\n\n            this.$last = $item;\n            this.last = this.getItemIndex($item);\n\n            this.setFocusableItem($item);\n            this.focusItem($item, preventScroll);\n\n            // prepare params for $.slice()\n            if (this.first < this.last) {\n                var sliceFrom = this.first,\n                    sliceTo = this.last + 1;\n            }\n            else {\n                var sliceFrom = this.last,\n                    sliceTo = this.first + 1;\n            }\n\n            this._selectItems(this.$items.slice(sliceFrom, sliceTo));\n        },\n\n        /**\n         * Deselect Item\n         */\n        deselectItem: function($item) {\n            var index = this.getItemIndex($item);\n            if (this.first === index) {\n                this.$first = this.first = null;\n            }\n            if (this.last === index) {\n                this.$last = this.last = null;\n            }\n\n            this._deselectItems($item);\n        },\n\n        /**\n         * Deselect All\n         */\n        deselectAll: function(clearFirst) {\n            if (clearFirst) {\n                this.$first = this.first = this.$last = this.last = null;\n            }\n\n            this._deselectItems(this.$items);\n        },\n\n        /**\n         * Deselect Others\n         */\n        deselectOthers: function($item) {\n            this.deselectAll();\n            this.selectItem($item, true);\n        },\n\n        /**\n         * Toggle Item\n         */\n        toggleItem: function($item, preventScroll) {\n            if (!this.isSelected($item)) {\n                this.selectItem($item, true, preventScroll);\n            }\n            else {\n                if (this._canDeselect($item)) {\n                    this.deselectItem($item, true);\n                }\n            }\n        },\n\n        clearMouseUpTimeout: function() {\n            clearTimeout(this.mouseUpTimeout);\n        },\n\n        getFirstItem: function() {\n            if (this.$items.length) {\n                return this.$items.first();\n            }\n        },\n\n        getLastItem: function() {\n            if (this.$items.length) {\n                return this.$items.last();\n            }\n        },\n\n        isPreviousItem: function(index) {\n            return (index > 0);\n        },\n\n        isNextItem: function(index) {\n            return (index < this.$items.length - 1);\n        },\n\n        getPreviousItem: function(index) {\n            if (this.isPreviousItem(index)) {\n                return this.$items.eq(index - 1);\n            }\n        },\n\n        getNextItem: function(index) {\n            if (this.isNextItem(index)) {\n                return this.$items.eq(index + 1);\n            }\n        },\n\n        getItemToTheLeft: function(index) {\n            var func = (Garnish.ltr ? 'Previous' : 'Next');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '<');\n                }\n            }\n        },\n\n        getItemToTheRight: function(index) {\n            var func = (Garnish.ltr ? 'Next' : 'Previous');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                else if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '>');\n                }\n            }\n        },\n\n        getItemAbove: function(index) {\n            if (this.isPreviousItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getPreviousItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '<');\n                }\n            }\n        },\n\n        getItemBelow: function(index) {\n            if (this.isNextItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getNextItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '>');\n                }\n            }\n        },\n\n        getClosestItem: function(index, axis, dir) {\n            var axisProps = Garnish.Select.closestItemAxisProps[axis],\n                dirProps = Garnish.Select.closestItemDirectionProps[dir];\n\n            var $thisItem = this.$items.eq(index),\n                thisOffset = $thisItem.offset(),\n                thisMidpoint = thisOffset[axisProps.midpointOffset] + Math.round($thisItem[axisProps.midpointSizeFunc]() / 2),\n                otherRowPos = null,\n                smallestMidpointDiff = null,\n                $closestItem = null;\n\n            // Go the other way if this is the X axis and a RTL page\n            if (Garnish.rtl && axis == Garnish.X_AXIS) {\n                var step = dirProps.step * -1;\n            }\n            else {\n                var step = dirProps.step;\n            }\n\n            for (var i = index + step; (this.$items[i] !== undefined); i += step) {\n                var $otherItem = this.$items.eq(i),\n                    otherOffset = $otherItem.offset();\n\n                // Are we on the next row yet?\n                if (dirProps.isNextRow(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    // Is this the first time we've seen this row?\n                    if (otherRowPos === null) {\n                        otherRowPos = otherOffset[axisProps.rowOffset];\n                    }\n                    // Have we gone too far?\n                    else if (otherOffset[axisProps.rowOffset] != otherRowPos) {\n                        break;\n                    }\n\n                    var otherMidpoint = otherOffset[axisProps.midpointOffset] + Math.round($otherItem[axisProps.midpointSizeFunc]() / 2),\n                        midpointDiff = Math.abs(thisMidpoint - otherMidpoint);\n\n                    // Are we getting warmer?\n                    if (smallestMidpointDiff === null || midpointDiff < smallestMidpointDiff) {\n                        smallestMidpointDiff = midpointDiff;\n                        $closestItem = $otherItem;\n                    }\n                    // Getting colder?\n                    else {\n                        break;\n                    }\n                }\n                // Getting colder?\n                else if (dirProps.isWrongDirection(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    break;\n                }\n            }\n\n            return $closestItem;\n        },\n\n        getFurthestItemToTheLeft: function(index) {\n            return this.getFurthestItem(index, 'ToTheLeft');\n        },\n\n        getFurthestItemToTheRight: function(index) {\n            return this.getFurthestItem(index, 'ToTheRight');\n        },\n\n        getFurthestItemAbove: function(index) {\n            return this.getFurthestItem(index, 'Above');\n        },\n\n        getFurthestItemBelow: function(index) {\n            return this.getFurthestItem(index, 'Below');\n        },\n\n        getFurthestItem: function(index, dir) {\n            var $item, $testItem;\n\n            while ($testItem = this['getItem' + dir](index)) {\n                $item = $testItem;\n                index = this.getItemIndex($item);\n            }\n\n            return $item;\n        },\n\n        /**\n         * totalSelected getter\n         */\n        get totalSelected() {\n            return this.getTotalSelected();\n        },\n\n        /**\n         * Get Total Selected\n         */\n        getTotalSelected: function() {\n            return this.$selectedItems.length;\n        },\n\n        /**\n         * Add Items\n         */\n        addItems: function(items) {\n            var $items = $(items);\n\n            for (var i = 0; i < $items.length; i++) {\n                var item = $items[i];\n\n                // Make sure this element doesn't belong to another selector\n                if ($.data(item, 'select')) {\n                    Garnish.log('Element was added to more than one selector');\n                    $.data(item, 'select').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'select', this);\n\n                // Get the handle\n                if (this.settings.handle) {\n                    if (typeof this.settings.handle == 'object') {\n                        var $handle = $(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle == 'string') {\n                        var $handle = $(item).find(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle == 'function') {\n                        var $handle = $(this.settings.handle(item));\n                    }\n                }\n                else {\n                    var $handle = $(item);\n                }\n\n                $.data(item, 'select-handle', $handle);\n                $handle.data('select-item', item);\n\n                this.addListener($handle, 'mousedown', 'onMouseDown');\n                this.addListener($handle, 'mouseup', 'onMouseUp');\n                this.addListener($handle, 'click', function(ev) {\n                    this.ignoreClick = true;\n                });\n\n                this.addListener(item, 'keydown', 'onKeyDown');\n            }\n\n            this.$items = this.$items.add($items);\n            this.updateIndexes();\n        },\n\n        /**\n         * Remove Items\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            var itemsChanged = false,\n                selectionChanged = false;\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index != -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                    itemsChanged = true;\n\n                    var selectedIndex = $.inArray(item, this.$selectedItems);\n                    if (selectedIndex != -1) {\n                        this.$selectedItems.splice(selectedIndex, 1);\n                        selectionChanged = true;\n                    }\n                }\n            }\n\n            if (itemsChanged) {\n                this.updateIndexes();\n\n                if (selectionChanged) {\n                    $(items).removeClass(this.settings.selectedClass);\n                    this.onSelectionChange();\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n            this.$selectedItems = $();\n            this.updateIndexes();\n        },\n\n        /**\n         * Update First/Last indexes\n         */\n        updateIndexes: function() {\n            if (this.first !== null) {\n                this.first = this.getItemIndex(this.$first);\n                this.setFocusableItem(this.$first);\n            }\n            else if (this.$items.length) {\n                this.setFocusableItem($(this.$items[0]));\n            }\n\n            if (this.last !== null) {\n                this.last = this.getItemIndex(this.$last);\n            }\n        },\n\n        /**\n         * Reset Item Order\n         */\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.$selectedItems = $().add(this.$selectedItems);\n            this.updateIndexes();\n        },\n\n        /**\n         * Sets the focusable item.\n         *\n         * We only want to have one focusable item per selection list, so that the user\n         * doesn't have to tab through a million items.\n         *\n         * @param object $item\n         */\n        setFocusableItem: function($item) {\n            if (this.$focusable) {\n                this.$focusable.removeAttr('tabindex');\n            }\n\n            this.$focusable = $item.attr('tabindex', '0');\n        },\n\n        /**\n         * Sets the focus on an item.\n         */\n        focusItem: function($item, preventScroll) {\n            if (preventScroll) {\n                var scrollLeft = Garnish.$doc.scrollLeft(),\n                    scrollTop = Garnish.$doc.scrollTop();\n                $item.focus();\n                window.scrollTo(scrollLeft, scrollTop);\n            }\n            else {\n                $item.focus();\n            }\n        },\n\n        /**\n         * Get Selected Items\n         */\n        getSelectedItems: function() {\n            return this.$selectedItems;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('select');\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Mouse Down\n         */\n        onMouseDown: function(ev) {\n            // ignore right clicks\n            if (ev.which != Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enforce the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            this.mousedownTarget = ev.currentTarget;\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            if (this.first !== null && ev.shiftKey) {\n                // Shift key is consistent for both selection modes\n                this.selectRange($item, true);\n            }\n            else if (this._actAsCheckbox(ev)) {\n                this.toggleItem($item, true);\n            }\n        },\n\n        /**\n         * On Mouse Up\n         */\n        onMouseUp: function(ev) {\n            // ignore right clicks\n            if (ev.which != Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enfore the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            // was this a click?\n            if (\n                !this._actAsCheckbox(ev) && !ev.shiftKey &&\n                ev.currentTarget == this.mousedownTarget\n            ) {\n                // If this is already selected, wait a moment to see if this is a double click before making any rash decisions\n                if (this.isSelected($item)) {\n                    this.clearMouseUpTimeout();\n\n                    this.mouseUpTimeout = setTimeout($.proxy(function() {\n                        this.deselectOthers($item);\n                    }, this), 300);\n                }\n                else {\n                    this.deselectAll();\n                    this.selectItem($item, true, true);\n                }\n            }\n        },\n\n        /**\n         * On Key Down\n         */\n        onKeyDown: function(ev) {\n            // Ignore if the focus isn't on one of our items\n            if (ev.target != ev.currentTarget) {\n                return;\n            }\n\n            var ctrlKey = Garnish.isCtrlKeyPressed(ev);\n\n            if (!this.settings.checkboxMode || !this.$focusable.length) {\n                var anchor = ev.shiftKey ? this.last : this.first;\n            }\n            else {\n                var anchor = $.inArray(this.$focusable[0], this.$items);\n\n                if (anchor == -1) {\n                    anchor = 0;\n                }\n            }\n\n            // Ok, what are we doing here?\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            var $item = this.getLastItem();\n                        }\n                        else {\n                            var $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            var $item = this.getFurthestItemToTheLeft(anchor);\n                        }\n                        else {\n                            var $item = this.getItemToTheLeft(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            var $item = this.getFirstItem();\n                        }\n                        else {\n                            var $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            var $item = this.getFurthestItemToTheRight(anchor);\n                        }\n                        else {\n                            var $item = this.getItemToTheRight(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            var $item = this.$focusable.prev();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            var $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            var $item = this.getFurthestItemAbove(anchor);\n                        }\n                        else {\n                            var $item = this.getItemAbove(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getFirstItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            var $item = this.$focusable.next();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            var $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            var $item = this.getFurthestItemBelow(anchor);\n                        }\n                        else {\n                            var $item = this.getItemBelow(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getLastItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    if (!ctrlKey) {\n                        ev.preventDefault();\n\n                        if (this.isSelected(this.$focusable)) {\n                            if (this._canDeselect(this.$focusable)) {\n                                this.deselectItem(this.$focusable);\n                            }\n                        }\n                        else {\n                            this.selectItem(this.$focusable, true);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.A_KEY: {\n                    if (ctrlKey) {\n                        ev.preventDefault();\n                        this.selectAll();\n                    }\n\n                    break;\n                }\n            }\n\n            // Is there an item queued up for focus/selection?\n            if ($item && $item.length) {\n                if (!this.settings.checkboxMode) {\n                    // select it\n                    if (this.first !== null && ev.shiftKey) {\n                        this.selectRange($item);\n                    }\n                    else {\n                        this.deselectAll();\n                        this.selectItem($item, true);\n                    }\n                }\n                else {\n                    // just set the new item to be focussable\n                    this.setFocusableItem($item);\n                    $item.focus();\n                }\n            }\n        },\n\n        /**\n         * Set Callback Timeout\n         */\n        onSelectionChange: function() {\n            if (this.callbackFrame) {\n                Garnish.cancelAnimationFrame(this.callbackFrame);\n                this.callbackFrame = null;\n            }\n\n            this.callbackFrame = Garnish.requestAnimationFrame($.proxy(function() {\n                this.callbackFrame = null;\n                this.trigger('selectionChange');\n                this.settings.onSelectionChange();\n            }, this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _actAsCheckbox: function(ev) {\n            if (Garnish.isCtrlKeyPressed(ev)) {\n                return !this.settings.checkboxMode;\n            }\n            else {\n                return this.settings.checkboxMode;\n            }\n        },\n\n        _canDeselect: function($items) {\n            return (this.settings.allowEmpty || this.totalSelected > $items.length);\n        },\n\n        _selectItems: function($items) {\n            $items.addClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.add($items);\n            this.onSelectionChange();\n        },\n\n        _deselectItems: function($items) {\n            $items.removeClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.not($items);\n            this.onSelectionChange();\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            var $handle = $.data(item, 'select-handle');\n\n            if ($handle) {\n                $handle.removeData('select-item');\n                this.removeAllListeners($handle);\n            }\n\n            $.removeData(item, 'select');\n            $.removeData(item, 'select-handle');\n        }\n    },\n    {\n        defaults: {\n            selectedClass: 'sel',\n            multi: false,\n            allowEmpty: true,\n            vertical: false,\n            horizontal: false,\n            handle: null,\n            filter: null,\n            checkboxMode: false,\n            onSelectionChange: $.noop\n        },\n\n        closestItemAxisProps: {\n            x: {\n                midpointOffset: 'top',\n                midpointSizeFunc: 'outerHeight',\n                rowOffset: 'left'\n            },\n            y: {\n                midpointOffset: 'left',\n                midpointSizeFunc: 'outerWidth',\n                rowOffset: 'top'\n            }\n        },\n\n        closestItemDirectionProps: {\n            '<': {\n                step: -1,\n                isNextRow: function(a, b) {\n                    return (a < b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a > b);\n                }\n            },\n            '>': {\n                step: 1,\n                isNextRow: function(a, b) {\n                    return (a > b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a < b);\n                }\n            }\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Select Menu\n */\nGarnish.SelectMenu = Garnish.Menu.extend(\n    {\n        /**\n         * Constructor\n         */\n        init: function(btn, options, settings, callback) {\n            // argument mapping\n            if (typeof settings == 'function') {\n                // (btn, options, callback)\n                callback = settings;\n                settings = {};\n            }\n\n            settings = $.extend({}, Garnish.SelectMenu.defaults, settings);\n\n            this.base(btn, options, settings, callback);\n\n            this.selected = -1;\n        },\n\n        /**\n         * Build\n         */\n        build: function() {\n            this.base();\n\n            if (this.selected != -1) {\n                this._addSelectedOptionClass(this.selected);\n            }\n        },\n\n        /**\n         * Select\n         */\n        select: function(option) {\n            // ignore if it's already selected\n            if (option == this.selected) {\n                return;\n            }\n\n            if (this.dom.ul) {\n                if (this.selected != -1) {\n                    this.dom.options[this.selected].className = '';\n                }\n\n                this._addSelectedOptionClass(option);\n            }\n\n            this.selected = option;\n\n            // set the button text to the selected option\n            this.setBtnText($(this.options[option].label).text());\n\n            this.base(option);\n        },\n\n        /**\n         * Add Selected Option Class\n         */\n        _addSelectedOptionClass: function(option) {\n            this.dom.options[option].className = 'sel';\n        },\n\n        /**\n         * Set Button Text\n         */\n        setBtnText: function(text) {\n            this.dom.$btnLabel.text(text);\n        }\n\n    },\n    {\n        defaults: {\n            ulClass: 'menu select'\n        }\n    }\n);\n","/**\n * Garnish UI toolkit\n *\n * @copyright 2013 Pixel & Tonic, Inc.. All rights reserved.\n * @author    Brandon Kelly <brandon@pixelandtonic.com>\n * @version   0.1.18\n * @license   MIT\n */\n(function($){\n\n/*!\r\n\tBase.js, version 1.1a\r\n\tCopyright 2006-2010, Dean Edwards\r\n\tLicense: http://www.opensource.org/licenses/mit-license.php\r\n*/\r\n\r\nvar Base = function() {\r\n\t// dummy\r\n};\r\n\r\nBase.extend = function(_instance, _static) { // subclass\r\n\tvar extend = Base.prototype.extend;\r\n\r\n\t// build the prototype\r\n\tBase._prototyping = true;\r\n\tvar proto = new this;\r\n\textend.call(proto, _instance);\r\n\tproto.base = function() {\r\n\t\t// call this method from any other method to invoke that method's ancestor\r\n\t};\r\n\tdelete Base._prototyping;\r\n\r\n\t// create the wrapper for the constructor function\r\n\t//var constructor = proto.constructor.valueOf(); //-dean\r\n\tvar constructor = proto.constructor;\r\n\tvar klass = proto.constructor = function() {\r\n\t\tif (!Base._prototyping) {\r\n\t\t\tif (this._constructing || this.constructor == klass) { // instantiation\r\n\t\t\t\tthis._constructing = true;\r\n\t\t\t\tconstructor.apply(this, arguments);\r\n\t\t\t\tdelete this._constructing;\r\n\t\t\t} else if (arguments[0] != null) { // casting\r\n\t\t\t\treturn (arguments[0].extend || extend).call(arguments[0], proto);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// build the class interface\r\n\tklass.ancestor = this;\r\n\tklass.extend = this.extend;\r\n\tklass.forEach = this.forEach;\r\n\tklass.implement = this.implement;\r\n\tklass.prototype = proto;\r\n\tklass.toString = this.toString;\r\n\tklass.valueOf = function(type) {\r\n\t\t//return (type == \"object\") ? klass : constructor; //-dean\r\n\t\treturn (type == \"object\") ? klass : constructor.valueOf();\r\n\t};\r\n\textend.call(klass, _static);\r\n\t// class initialisation\r\n\tif (typeof klass.init == \"function\") klass.init();\r\n\treturn klass;\r\n};\r\n\r\nBase.prototype = {\r\n\textend: function(source, value) {\r\n\t\tif (arguments.length > 1) { // extending with a name/value pair\r\n\t\t\tvar ancestor = this[source];\r\n\t\t\tif (ancestor && (typeof value == \"function\") && // overriding a method?\r\n\t\t\t\t// the valueOf() comparison is to avoid circular references\r\n\t\t\t\t(!ancestor.valueOf || ancestor.valueOf() != value.valueOf()) &&\r\n\t\t\t\t/\\bbase\\b/.test(value)) {\r\n\t\t\t\t// get the underlying method\r\n\t\t\t\tvar method = value.valueOf();\r\n\t\t\t\t// override\r\n\t\t\t\tvalue = function() {\r\n\t\t\t\t\tvar previous = this.base || Base.prototype.base;\r\n\t\t\t\t\tthis.base = ancestor;\r\n\t\t\t\t\tvar returnValue = method.apply(this, arguments);\r\n\t\t\t\t\tthis.base = previous;\r\n\t\t\t\t\treturn returnValue;\r\n\t\t\t\t};\r\n\t\t\t\t// point to the underlying method\r\n\t\t\t\tvalue.valueOf = function(type) {\r\n\t\t\t\t\treturn (type == \"object\") ? value : method;\r\n\t\t\t\t};\r\n\t\t\t\tvalue.toString = Base.toString;\r\n\t\t\t}\r\n\t\t\tthis[source] = value;\r\n\t\t} else if (source) { // extending with an object literal\r\n\t\t\tvar extend = Base.prototype.extend;\r\n\t\t\t// if this object has a customised extend method then use it\r\n\t\t\tif (!Base._prototyping && typeof this != \"function\") {\r\n\t\t\t\textend = this.extend || extend;\r\n\t\t\t}\r\n\t\t\tvar proto = {toSource: null};\r\n\t\t\t// do the \"toString\" and other methods manually\r\n\t\t\tvar hidden = [\"constructor\", \"toString\", \"valueOf\"];\r\n\t\t\t// if we are prototyping then include the constructor\r\n\t\t\tvar i = Base._prototyping ? 0 : 1;\r\n\t\t\twhile (key = hidden[i++]) {\r\n\t\t\t\tif (source[key] != proto[key]) {\r\n\t\t\t\t\textend.call(this, key, source[key]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// copy each of the source object's properties to this object\r\n\t\t\tfor (var key in source) {\r\n\t\t\t\tif (!proto[key]) {\r\n\t\t\t\t\tvar desc = Object.getOwnPropertyDescriptor(source, key);\r\n\t\t\t\t\tif (typeof desc.value != typeof undefined) {\r\n\t\t\t\t\t\t// set the value normally in case it's a function that needs to be overwritten\r\n\t\t\t\t\t\textend.call(this, key, desc.value);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// set it while maintaining the original descriptor settings\r\n\t\t\t\t\t\tObject.defineProperty(this, key, desc);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n};\r\n\r\n// initialise\r\nBase = Base.extend({\r\n\tconstructor: function() {\r\n\t\tthis.extend(arguments[0]);\r\n\t}\r\n}, {\r\n\tancestor: Object,\r\n\tversion: \"1.1\",\r\n\r\n\tforEach: function(object, block, context) {\r\n\t\tfor (var key in object) {\r\n\t\t\tif (this.prototype[key] === undefined) {\r\n\t\t\t\tblock.call(context, object[key], key, object);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\timplement: function() {\r\n\t\tfor (var i = 0; i < arguments.length; i++) {\r\n\t\t\tif (typeof arguments[i] == \"function\") {\r\n\t\t\t\t// if it's a function, call it\r\n\t\t\t\targuments[i](this.prototype);\r\n\t\t\t} else {\r\n\t\t\t\t// add the interface using the extend method\r\n\t\t\t\tthis.prototype.extend(arguments[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t},\r\n\r\n\ttoString: function() {\r\n\t\treturn String(this.valueOf());\r\n\t}\r\n});\r\n\n/**\n * @namespace Garnish\n */\n\n// Bail if Garnish is already defined\nif (typeof Garnish !== 'undefined') {\n    throw 'Garnish is already defined!';\n}\n\nGarnish = {\n\n    // jQuery objects for common elements\n    $win: $(window),\n    $doc: $(document),\n    $bod: $(document.body)\n\n};\n\nGarnish.rtl = Garnish.$bod.hasClass('rtl');\nGarnish.ltr = !Garnish.rtl;\n\nGarnish = $.extend(Garnish, {\n\n    $scrollContainer: Garnish.$win,\n\n    // Key code constants\n    DELETE_KEY: 8,\n    SHIFT_KEY: 16,\n    CTRL_KEY: 17,\n    ALT_KEY: 18,\n    RETURN_KEY: 13,\n    ESC_KEY: 27,\n    SPACE_KEY: 32,\n    LEFT_KEY: 37,\n    UP_KEY: 38,\n    RIGHT_KEY: 39,\n    DOWN_KEY: 40,\n    A_KEY: 65,\n    S_KEY: 83,\n    CMD_KEY: 91,\n\n    // Mouse button constants\n    PRIMARY_CLICK: 1,\n    SECONDARY_CLICK: 3,\n\n    // Axis constants\n    X_AXIS: 'x',\n    Y_AXIS: 'y',\n\n    FX_DURATION: 100,\n\n    // Node types\n    TEXT_NODE: 3,\n\n    /**\n     * Logs a message to the browser's console, if the browser has one.\n     *\n     * @param string msg\n     */\n    log: function(msg) {\n        if (typeof console !== 'undefined' && typeof console.log == 'function') {\n            console.log(msg);\n        }\n    },\n\n    _isMobileBrowser: null,\n    _isMobileOrTabletBrowser: null,\n\n    /**\n     * Returns whether this is a mobile browser.\n     * Detection script courtesy of http://detectmobilebrowsers.com\n     *\n     * Last updated: 2014-11-24\n     *\n     * @param bool detectTablets\n     * @return bool\n     */\n    isMobileBrowser: function(detectTablets) {\n        var key = detectTablets ? '_isMobileOrTabletBrowser' : '_isMobileBrowser';\n\n        if (Garnish[key] === null) {\n            var a = navigator.userAgent || navigator.vendor || window.opera;\n            Garnish[key] = ((new RegExp('(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino' + (detectTablets ? '|android|ipad|playbook|silk' : ''), 'i')).test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4)));\n        }\n\n        return Garnish[key];\n    },\n\n    /**\n     * Returns whether a variable is an array.\n     *\n     * @param mixed val\n     * @return bool\n     */\n    isArray: function(val) {\n        return (val instanceof Array);\n    },\n\n    /**\n     * Returns whether a variable is a jQuery collection.\n     *\n     * @param mixed val\n     * @return bool\n     */\n    isJquery: function(val) {\n        return (val instanceof jQuery);\n    },\n\n    /**\n     * Returns whether a variable is a string.\n     *\n     * @param mixed val\n     * @return bool\n     */\n    isString: function(val) {\n        return (typeof val == 'string');\n    },\n\n    /**\n     * Returns whether an element has an attribute.\n     *\n     * @see http://stackoverflow.com/questions/1318076/jquery-hasattr-checking-to-see-if-there-is-an-attribute-on-an-element/1318091#1318091\n     */\n    hasAttr: function(elem, attr) {\n        var val = $(elem).attr(attr);\n        return (val !== undefined && val !== false);\n    },\n\n    /**\n     * Returns whether something is a text node.\n     *\n     * @param object elem\n     * @return bool\n     */\n    isTextNode: function(elem) {\n        return (elem.nodeType == Garnish.TEXT_NODE);\n    },\n\n    /**\n     * Returns the offset of an element within the scroll container, whether that's the window or something else\n     */\n    getOffset: function(elem) {\n        this.getOffset._offset = $(elem).offset();\n\n        if (Garnish.$scrollContainer[0] != Garnish.$win[0]) {\n            this.getOffset._offset.top += Garnish.$scrollContainer.scrollTop();\n            this.getOffset._offset.left += Garnish.$scrollContainer.scrollLeft();\n        }\n\n        return this.getOffset._offset;\n    },\n\n    /**\n     * Returns the distance between two coordinates.\n     *\n     * @param int x1 The first coordinate's X position.\n     * @param int y1 The first coordinate's Y position.\n     * @param int x2 The second coordinate's X position.\n     * @param int y2 The second coordinate's Y position.\n     * @return float\n     */\n    getDist: function(x1, y1, x2, y2) {\n        return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n    },\n\n    /**\n     * Returns whether an element is touching an x/y coordinate.\n     *\n     * @param int    x    The coordinate's X position.\n     * @param int    y    The coordinate's Y position.\n     * @param object elem Either an actual element or a jQuery collection.\n     * @return bool\n     */\n    hitTest: function(x, y, elem) {\n        Garnish.hitTest._$elem = $(elem);\n        Garnish.hitTest._offset = Garnish.hitTest._$elem.offset();\n        Garnish.hitTest._x1 = Garnish.hitTest._offset.left;\n        Garnish.hitTest._y1 = Garnish.hitTest._offset.top;\n        Garnish.hitTest._x2 = Garnish.hitTest._x1 + Garnish.hitTest._$elem.outerWidth();\n        Garnish.hitTest._y2 = Garnish.hitTest._y1 + Garnish.hitTest._$elem.outerHeight();\n\n        return (x >= Garnish.hitTest._x1 && x < Garnish.hitTest._x2 && y >= Garnish.hitTest._y1 && y < Garnish.hitTest._y2);\n    },\n\n    /**\n     * Returns whether the cursor is touching an element.\n     *\n     * @param object ev   The mouse event object containing pageX and pageY properties.\n     * @param object elem Either an actual element or a jQuery collection.\n     * @return bool\n     */\n    isCursorOver: function(ev, elem) {\n        return Garnish.hitTest(ev.pageX, ev.pageY, elem);\n    },\n\n    /**\n     * Copies text styles from one element to another.\n     *\n     * @param object source The source element. Can be either an actual element or a jQuery collection.\n     * @param object target The target element. Can be either an actual element or a jQuery collection.\n     */\n    copyTextStyles: function(source, target) {\n        var $source = $(source),\n            $target = $(target);\n\n        $target.css({\n            fontFamily: $source.css('fontFamily'),\n            fontSize: $source.css('fontSize'),\n            fontWeight: $source.css('fontWeight'),\n            letterSpacing: $source.css('letterSpacing'),\n            lineHeight: $source.css('lineHeight'),\n            textAlign: $source.css('textAlign'),\n            textIndent: $source.css('textIndent'),\n            whiteSpace: $source.css('whiteSpace'),\n            wordSpacing: $source.css('wordSpacing'),\n            wordWrap: $source.css('wordWrap')\n        });\n    },\n\n    /**\n     * Returns the body's real scrollTop, discarding any window banding in Safari.\n     *\n     * @return int\n     */\n    getBodyScrollTop: function() {\n        Garnish.getBodyScrollTop._scrollTop = document.body.scrollTop;\n\n        if (Garnish.getBodyScrollTop._scrollTop < 0) {\n            Garnish.getBodyScrollTop._scrollTop = 0;\n        }\n        else {\n            Garnish.getBodyScrollTop._maxScrollTop = Garnish.$bod.outerHeight() - Garnish.$win.height();\n\n            if (Garnish.getBodyScrollTop._scrollTop > Garnish.getBodyScrollTop._maxScrollTop) {\n                Garnish.getBodyScrollTop._scrollTop = Garnish.getBodyScrollTop._maxScrollTop;\n            }\n        }\n\n        return Garnish.getBodyScrollTop._scrollTop;\n    },\n\n    requestAnimationFrame: (function() {\n            var raf = (\n                window.requestAnimationFrame ||\n                window.mozRequestAnimationFrame ||\n                window.webkitRequestAnimationFrame ||\n                function(fn) {\n                    return window.setTimeout(fn, 20);\n                }\n            );\n\n            return function(fn) {\n                return raf(fn);\n            };\n        })(),\n\n    cancelAnimationFrame: (function() {\n            var cancel = (\n                window.cancelAnimationFrame ||\n                window.mozCancelAnimationFrame ||\n                window.webkitCancelAnimationFrame ||\n                window.clearTimeout\n            );\n\n            return function(id) {\n                return cancel(id);\n            };\n        })(),\n\n    /**\n     * Scrolls a container element to an element within it.\n     *\n     * @param object container Either an actual element or a jQuery collection.\n     * @param object elem      Either an actual element or a jQuery collection.\n     */\n    scrollContainerToElement: function(container, elem) {\n        if (elem === undefined) {\n            var $elem = $(container);\n            $container = $elem.scrollParent();\n        }\n        else {\n            var $container = $(container),\n                $elem = $(elem);\n        }\n\n        if ($container.prop('nodeName') === 'HTML' || $container[0] == Garnish.$doc[0]) {\n            $container = Garnish.$win;\n        }\n\n        var scrollTop = $container.scrollTop(),\n            elemOffset = $elem.offset().top;\n\n        if ($container[0] == window) {\n            var elemScrollOffset = elemOffset - scrollTop;\n        }\n        else {\n            var elemScrollOffset = elemOffset - $container.offset().top;\n        }\n\n        var targetScrollTop = false;\n\n        // Is the element above the fold?\n        if (elemScrollOffset < 0) {\n            targetScrollTop = scrollTop + elemScrollOffset - 10;\n        }\n        else {\n            var elemHeight = $elem.outerHeight(),\n                containerHeight = ($container[0] == window ? window.innerHeight : $container[0].clientHeight);\n\n            // Is it below the fold?\n            if (elemScrollOffset + elemHeight > containerHeight) {\n                targetScrollTop = scrollTop + (elemScrollOffset - (containerHeight - elemHeight)) + 10;\n            }\n        }\n\n        if (targetScrollTop !== false) {\n            // Velocity only allows you to scroll to an arbitrary position if you're scrolling the main window\n            if ($container[0] == window) {\n                $('html').velocity('scroll', {\n                    offset: targetScrollTop + 'px',\n                    mobileHA: false\n                });\n            }\n            else {\n                $container.scrollTop(targetScrollTop);\n            }\n        }\n    },\n\n    SHAKE_STEPS: 10,\n    SHAKE_STEP_DURATION: 25,\n\n    /**\n     * Shakes an element.\n     *\n     * @param mixed  elem Either an actual element or a jQuery collection.\n     * @param string prop The property that should be adjusted (default is 'margin-left').\n     */\n    shake: function(elem, prop) {\n        var $elem = $(elem);\n\n        if (!prop) {\n            prop = 'margin-left';\n        }\n\n        var startingPoint = parseInt($elem.css(prop));\n        if (isNaN(startingPoint)) {\n            startingPoint = 0;\n        }\n\n        for (var i = 0; i <= Garnish.SHAKE_STEPS; i++) {\n            (function(i) {\n                setTimeout(function() {\n                    Garnish.shake._properties = {};\n                    Garnish.shake._properties[prop] = startingPoint + (i % 2 ? -1 : 1) * (10 - i);\n                    $elem.velocity(Garnish.shake._properties, Garnish.SHAKE_STEP_DURATION);\n                }, (Garnish.SHAKE_STEP_DURATION * i));\n            })(i);\n        }\n    },\n\n    /**\n     * Returns the first element in an array or jQuery collection.\n     *\n     * @param mixed elem\n     * @return mixed\n     */\n    getElement: function(elem) {\n        return $.makeArray(elem)[0];\n    },\n\n    /**\n     * Returns the beginning of an input's name= attribute value with any [bracktes] stripped out.\n     *\n     * @param object elem\n     * @return string|null\n     */\n    getInputBasename: function(elem) {\n        var name = $(elem).attr('name');\n\n        if (name) {\n            return name.replace(/\\[.*/, '');\n        }\n        else {\n            return null;\n        }\n    },\n\n    /**\n     * Returns an input's value as it would be POSTed.\n     * So unchecked checkboxes and radio buttons return null,\n     * and multi-selects whose name don't end in \"[]\" only return the last selection\n     *\n     * @param jQuery $input\n     * @return mixed\n     */\n    getInputPostVal: function($input) {\n        var type = $input.attr('type'),\n            val = $input.val();\n\n        // Is this an unchecked checkbox or radio button?\n        if ((type == 'checkbox' || type == 'radio')) {\n            if ($input.prop('checked')) {\n                return val;\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Flatten any array values whose input name doesn't end in \"[]\"\n        //  - e.g. a multi-select\n        else if (Garnish.isArray(val) && $input.attr('name').substr(-2) != '[]') {\n            if (val.length) {\n                return val[val.length - 1];\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Just return the value\n        else {\n            return val;\n        }\n    },\n\n    /**\n     * Returns the inputs within a container\n     *\n     * @param mixed container The container element. Can be either an actual element or a jQuery collection.\n     * @return jQuery\n     */\n    findInputs: function(container) {\n        return $(container).find('input,text,textarea,select,button');\n    },\n\n    /**\n     * Returns the post data within a container.\n     *\n     * @param mixed container\n     * @return array\n     */\n    getPostData: function(container) {\n        var postData = {},\n            arrayInputCounters = {},\n            $inputs = Garnish.findInputs(container);\n\n        for (var i = 0; i < $inputs.length; i++) {\n            var $input = $inputs.eq(i);\n\n            if ($input.prop('disabled')) {\n                continue;\n            }\n\n            var inputName = $input.attr('name');\n            if (!inputName) {\n                continue;\n            }\n\n            var inputVal = Garnish.getInputPostVal($input);\n            if (inputVal === null) {\n                continue;\n            }\n\n            var isArrayInput = (inputName.substr(-2) == '[]');\n\n            if (isArrayInput) {\n                // Get the cropped input name\n                var croppedName = inputName.substring(0, inputName.length - 2);\n\n                // Prep the input counter\n                if (arrayInputCounters[croppedName] === undefined) {\n                    arrayInputCounters[croppedName] = 0;\n                }\n            }\n\n            if (!Garnish.isArray(inputVal)) {\n                inputVal = [inputVal];\n            }\n\n            for (var j = 0; j < inputVal.length; j++) {\n                if (isArrayInput) {\n                    var inputName = croppedName + '[' + arrayInputCounters[croppedName] + ']';\n                    arrayInputCounters[croppedName]++;\n                }\n\n                postData[inputName] = inputVal[j];\n            }\n        }\n\n        return postData;\n    },\n\n    copyInputValues: function(source, target) {\n        var $sourceInputs = Garnish.findInputs(source),\n            $targetInputs = Garnish.findInputs(target);\n\n        for (var i = 0; i < $sourceInputs.length; i++) {\n            if ($targetInputs[i] === undefined) {\n                break;\n            }\n\n            $targetInputs.eq(i).val(\n                $sourceInputs.eq(i).val()\n            );\n        }\n    },\n\n    /**\n     * Returns whether the \"Ctrl\" key is pressed (or ⌘ if this is a Mac) for a given keyboard event\n     *\n     * @param ev The keyboard event\n     *\n     * @return boolean Whether the \"Ctrl\" key is pressed\n     */\n    isCtrlKeyPressed: function(ev) {\n        if (window.navigator.platform.match(/Mac/)) {\n            // metaKey maps to ⌘ on Macs\n            return ev.metaKey;\n        }\n        else {\n            // Both altKey and ctrlKey == true on some Windows keyboards when the right-hand ALT key is pressed\n            // so just be safe and make sure altKey == false\n            return (ev.ctrlKey && !ev.altKey);\n        }\n    }\n});\n\n\n/**\n * Garnish base class\n */\nGarnish.Base = Base.extend({\n\n    settings: null,\n\n    _eventHandlers: null,\n    _namespace: null,\n    _$listeners: null,\n    _disabled: false,\n\n    constructor: function() {\n        this._eventHandlers = [];\n        this._namespace = '.Garnish' + Math.floor(Math.random() * 1000000000);\n        this._listeners = [];\n        this.init.apply(this, arguments);\n    },\n\n    init: $.noop,\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (this.settings === undefined ? {} : this.settings);\n        this.settings = $.extend({}, baseSettings, defaults, settings);\n    },\n\n    on: function(events, data, handler) {\n        if (typeof data == 'function') {\n            handler = data;\n            data = {};\n        }\n\n        var events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            this._eventHandlers.push({\n                type: ev[0],\n                namespace: ev[1],\n                data: data,\n                handler: handler\n            });\n        }\n    },\n\n    off: function(events, handler) {\n        var events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            for (var j = this._eventHandlers.length - 1; j >= 0; j--) {\n                var eventHandler = this._eventHandlers[j];\n\n                if (eventHandler.type == ev[0] && (!ev[1] || eventHandler.namespace == ev[1]) && eventHandler.handler === handler) {\n                    this._eventHandlers.splice(j, 1);\n                }\n            }\n        }\n    },\n\n    trigger: function(type, data) {\n        var ev = {\n            type: type,\n            target: this\n        };\n\n        for (var i = 0; i < this._eventHandlers.length; i++) {\n            var handler = this._eventHandlers[i];\n\n            if (handler.type == type) {\n                var _ev = $.extend({data: handler.data}, data, ev);\n                handler.handler(_ev)\n            }\n        }\n    },\n\n    _normalizeEvents: function(events) {\n        if (typeof events == 'string') {\n            events = events.split(' ');\n        }\n\n        for (var i = 0; i < events.length; i++) {\n            if (typeof events[i] == 'string') {\n                events[i] = events[i].split('.');\n            }\n        }\n\n        return events;\n    },\n\n    _splitEvents: function(events) {\n        if (typeof events == 'string') {\n            events = events.split(',');\n\n            for (var i = 0; i < events.length; i++) {\n                events[i] = $.trim(events[i]);\n            }\n        }\n\n        return events;\n    },\n\n    _formatEvents: function(events) {\n        var events = this._splitEvents(events).slice(0);\n\n        for (var i = 0; i < events.length; i++) {\n            events[i] += this._namespace;\n        }\n\n        return events.join(' ');\n    },\n\n    addListener: function(elem, events, data, func) {\n        var $elem = $(elem);\n\n        // Ignore if there aren't any elements\n        if (!$elem.length) {\n            return;\n        }\n\n        events = this._splitEvents(events);\n\n        // Param mapping\n        if (func === undefined && typeof data != 'object') {\n            // (elem, events, func)\n            func = data;\n            data = {};\n        }\n\n        if (typeof func == 'function') {\n            func = $.proxy(func, this);\n        }\n        else {\n            func = $.proxy(this, func);\n        }\n\n        $elem.on(this._formatEvents(events), data, $.proxy(function() {\n            if (!this._disabled) {\n                func.apply(this, arguments);\n            }\n        }, this));\n\n        // Remember that we're listening to this element\n        if ($.inArray(elem, this._listeners) == -1) {\n            this._listeners.push(elem);\n        }\n    },\n\n    removeListener: function(elem, events) {\n        $(elem).off(this._formatEvents(events));\n    },\n\n    removeAllListeners: function(elem) {\n        $(elem).off(this._namespace);\n    },\n\n    disable: function() {\n        this._disabled = true;\n    },\n\n    enable: function() {\n        this._disabled = false;\n    },\n\n    destroy: function() {\n        this.trigger('destroy');\n        this.removeAllListeners(this._listeners);\n    }\n});\n\n// Custom events\n// -----------------------------------------------------------------------------\n\nvar erd;\n\nfunction getErd() {\n    if (erd === undefined) {\n        erd = elementResizeDetectorMaker({\n            callOnAdd: false\n        });\n    }\n\n    return erd;\n}\n\nfunction triggerResizeEvent(elem) {\n    $(elem).trigger('resize');\n};\n\n// Work them into jQuery's event system\n$.extend(jQuery.event.special, {\n    activate: {\n        setup: function(data, namespaces, eventHandle) {\n            var activateNamespace = this._namespace + '-activate';\n            var $elem = $(this);\n\n            $elem.on({\n                'mousedown.garnish-activate': function(e) {\n                    // Prevent buttons from getting focus on click\n                    e.preventDefault();\n                },\n                'click.garnish-activate': function(e) {\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.trigger('activate');\n                    }\n                },\n                'keydown.garnish-activate': function(e) {\n                    // Ignore if the event was bubbled up, or if it wasn't the space key\n                    if (this != $elem[0] || e.keyCode != Garnish.SPACE_KEY) {\n                        return;\n                    }\n\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.addClass('active');\n\n                        Garnish.$doc.on('keyup.garnish-activate', function(e) {\n                            $elem.removeClass('active');\n\n                            if (e.keyCode == Garnish.SPACE_KEY) {\n                                e.preventDefault();\n                                $elem.trigger('activate');\n                            }\n\n                            Garnish.$doc.off('keyup.garnish-activate');\n                        });\n                    }\n                }\n            });\n\n            if (!$elem.hasClass('disabled')) {\n                $elem.attr('tabindex', '0');\n            } else {\n                $elem.removeAttr('tabindex');\n            }\n        },\n        teardown: function() {\n            $(this).off('.garnish-activate');\n        }\n    },\n\n    textchange: {\n        setup: function(data, namespaces, eventHandle) {\n            var $elem = $(this);\n            $elem.data('garnish-textchange-value', $elem.val());\n            $elem.on('keypress.garnish-textchange keyup.garnish-textchange change.garnish-textchange blur.garnish-textchange', function(e) {\n                var val = $elem.val();\n                if (val != $elem.data('garnish-textchange-value')) {\n                    $elem.data('garnish-textchange-value', val);\n                    $elem.trigger('textchange');\n                }\n            });\n        },\n        teardown: function() {\n            $(this).off('.garnish-textchange');\n        },\n        handle: function(ev, data) {\n            var el = this;\n            var args = arguments;\n            var delay = data && data.delay !== undefined ? data.delay : (ev.data && ev.data.delay !== undefined ? ev.data.delay : null);\n            var handleObj = ev.handleObj;\n            var targetData = $.data(ev.target);\n\n            // Was this event configured with a delay?\n            if (delay) {\n                if (targetData.delayTimeout) {\n                    clearTimeout(targetData.delayTimeout);\n                }\n\n                targetData.delayTimeout = setTimeout(function() {\n                    handleObj.handler.apply(el, args);\n                }, delay);\n            } else {\n                return handleObj.handler.apply(el, args);\n            }\n        }\n    },\n\n    resize: {\n        setup: function(data, namespaces, eventHandle) {\n            // window is the only element that natively supports a resize event\n            if (this == window) {\n                return false;\n            }\n\n            $('> :last-child', this).addClass('last');\n            getErd().listenTo(this, triggerResizeEvent)\n        },\n        teardown: function() {\n            if (this == window) {\n                return false;\n            }\n\n            getErd().removeListener(this, triggerResizeEvent);\n        }\n    }\n});\n\n// Give them their own element collection chaining methods\njQuery.each(['activate', 'textchange', 'resize'], function(i, name) {\n    jQuery.fn[name] = function(data, fn) {\n        return arguments.length > 0 ?\n            this.on(name, null, data, fn) :\n            this.trigger(name);\n    };\n});\n\n/** global: Garnish */\n/**\n * Base drag class\n *\n * Does all the grunt work for manipulating elements via click-and-drag,\n * while leaving the actual element manipulation up to a subclass.\n */\nGarnish.BaseDrag = Garnish.Base.extend(\n    {\n        $items: null,\n\n        dragging: false,\n\n        mousedownX: null,\n        mousedownY: null,\n        realMouseX: null,\n        realMouseY: null,\n        mouseX: null,\n        mouseY: null,\n        mouseDistX: null,\n        mouseDistY: null,\n        mouseOffsetX: null,\n        mouseOffsetY: null,\n\n        $targetItem: null,\n\n        scrollProperty: null,\n        scrollAxis: null,\n        scrollDist: null,\n        scrollProxy: null,\n        scrollFrame: null,\n\n        _: null,\n\n        /**\n         * Constructor\n         *\n         * @param mixed  items    Elements that should be draggable right away. (Can be skipped.)\n         * @param object settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (settings === undefined && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            this.settings = $.extend({}, Garnish.BaseDrag.defaults, settings);\n\n            this.$items = $();\n            this._ = {};\n\n            if (items) {\n                this.addItems(items);\n            }\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            return true;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            this.dragging = true;\n            this.onDragStart();\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            if (didMouseMove) {\n                // Is the mouse up against one of the window edges?\n                this.drag._scrollProperty = null;\n\n                if (this.settings.axis != Garnish.X_AXIS) {\n                    // Scrolling up?\n                    this.drag._winScrollTop = Garnish.$win.scrollTop();\n                    this.drag._minMouseScrollY = this.drag._winScrollTop + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseY < this.drag._minMouseScrollY) {\n                        this.drag._scrollProperty = 'scrollTop';\n                        this.drag._scrollAxis = 'Y';\n                        this.drag._scrollDist = Math.round((this.mouseY - this.drag._minMouseScrollY) / 2);\n                    }\n                    else {\n                        // Scrolling down?\n                        this.drag._maxMouseScrollY = this.drag._winScrollTop + Garnish.$win.height() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseY > this.drag._maxMouseScrollY) {\n                            this.drag._scrollProperty = 'scrollTop';\n                            this.drag._scrollAxis = 'Y';\n                            this.drag._scrollDist = Math.round((this.mouseY - this.drag._maxMouseScrollY) / 2);\n                        }\n                    }\n                }\n\n                if (!this.drag._scrollProperty && this.settings.axis != Garnish.Y_AXIS) {\n                    // Scrolling left?\n                    this.drag._winScrollLeft = Garnish.$win.scrollLeft();\n                    this.drag._minMouseScrollX = this.drag._winScrollLeft + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseX < this.drag._minMouseScrollX) {\n                        this.drag._scrollProperty = 'scrollLeft';\n                        this.drag._scrollAxis = 'X';\n                        this.drag._scrollDist = Math.round((this.mouseX - this.drag._minMouseScrollX) / 2);\n                    }\n                    else {\n                        // Scrolling right?\n                        this.drag._maxMouseScrollX = this.drag._winScrollLeft + Garnish.$win.width() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseX > this.drag._maxMouseScrollX) {\n                            this.drag._scrollProperty = 'scrollLeft';\n                            this.drag._scrollAxis = 'X';\n                            this.drag._scrollDist = Math.round((this.mouseX - this.drag._maxMouseScrollX) / 2);\n                        }\n                    }\n                }\n\n                if (this.drag._scrollProperty) {\n                    // Are we starting to scroll now?\n                    if (!this.scrollProperty) {\n                        if (!this.scrollProxy) {\n                            this.scrollProxy = $.proxy(this, '_scrollWindow');\n                        }\n\n                        if (this.scrollFrame) {\n                            Garnish.cancelAnimationFrame(this.scrollFrame);\n                            this.scrollFrame = null;\n                        }\n\n                        this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n                    }\n\n                    this.scrollProperty = this.drag._scrollProperty;\n                    this.scrollAxis = this.drag._scrollAxis;\n                    this.scrollDist = this.drag._scrollDist;\n                }\n                else {\n                    this._cancelWindowScroll();\n                }\n            }\n\n            this.onDrag();\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            this.dragging = false;\n            this.onDragStop();\n\n            // Clear the scroll animation\n            this._cancelWindowScroll();\n        },\n\n        /**\n         * Add Items\n         *\n         * @param mixed items Elements that should be draggable.\n         */\n        addItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure this element doesn't belong to another dragger\n                if ($.data(item, 'drag')) {\n                    Garnish.log('Element was added to more than one dragger');\n                    $.data(item, 'drag').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'drag', this);\n\n                // Add the listener\n                this.addListener(item, 'mousedown', '_handleMouseDown');\n            }\n\n            this.$items = this.$items.add(items);\n        },\n\n        /**\n         * Remove Items\n         *\n         * @param mixed items Elements that should no longer be draggable.\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index != -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('dragStart');\n                this.settings.onDragStart();\n            }, this));\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('drag');\n                this.settings.onDrag();\n            }, this));\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('dragStop');\n                this.settings.onDragStop();\n            }, this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Handle Mouse Down\n         */\n        _handleMouseDown: function(ev) {\n            // Ignore right clicks\n            if (ev.which != Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Ignore if we already have a target\n            if (this.$targetItem) {\n                return;\n            }\n\n            // Ignore if they didn't actually click on the handle\n            var $target = $(ev.target),\n                $handle = this._getItemHandle(ev.currentTarget);\n\n            if (!$target.is($handle) && !$target.closest($handle).length) {\n                return;\n            }\n\n            // Make sure the target isn't a button (unless the button is the handle)\n            if (ev.currentTarget != ev.target && this.settings.ignoreHandleSelector) {\n                if (\n                    $target.is(this.settings.ignoreHandleSelector) ||\n                    $target.closest(this.settings.ignoreHandleSelector).length\n                ) {\n                    return;\n                }\n            }\n\n            ev.preventDefault();\n\n            // Make sure that dragging is allowed right now\n            if (!this.allowDragging()) {\n                return;\n            }\n\n            // Capture the target\n            this.$targetItem = $(ev.currentTarget);\n\n            // Capture the current mouse position\n            this.mousedownX = this.mouseX = ev.pageX;\n            this.mousedownY = this.mouseY = ev.pageY;\n\n            // Capture the difference between the mouse position and the target item's offset\n            var offset = this.$targetItem.offset();\n            this.mouseOffsetX = ev.pageX - offset.left;\n            this.mouseOffsetY = ev.pageY - offset.top;\n\n            // Listen for mousemove, mouseup\n            this.addListener(Garnish.$doc, 'mousemove', '_handleMouseMove');\n            this.addListener(Garnish.$doc, 'mouseup', '_handleMouseUp');\n        },\n\n        _getItemHandle: function(item) {\n            if (this.settings.handle) {\n                if (typeof this.settings.handle == 'object') {\n                    return $(this.settings.handle);\n                }\n\n                if (typeof this.settings.handle == 'string') {\n                    return $(this.settings.handle, item);\n                }\n\n                if (typeof this.settings.handle == 'function') {\n                    return $(this.settings.handle(item));\n                }\n            }\n\n            return $(item);\n        },\n\n        /**\n         * Handle Mouse Move\n         */\n        _handleMouseMove: function(ev) {\n            ev.preventDefault();\n\n            this.realMouseX = ev.pageX;\n            this.realMouseY = ev.pageY;\n\n            if (this.settings.axis != Garnish.Y_AXIS) {\n                this.mouseX = ev.pageX;\n            }\n\n            if (this.settings.axis != Garnish.X_AXIS) {\n                this.mouseY = ev.pageY;\n            }\n\n            this.mouseDistX = this.mouseX - this.mousedownX;\n            this.mouseDistY = this.mouseY - this.mousedownY;\n\n            if (!this.dragging) {\n                // Has the mouse moved far enough to initiate dragging yet?\n                this._handleMouseMove._mouseDist = Garnish.getDist(this.mousedownX, this.mousedownY, this.realMouseX, this.realMouseY);\n\n                if (this._handleMouseMove._mouseDist >= Garnish.BaseDrag.minMouseDist) {\n                    this.startDragging();\n                }\n            }\n\n            if (this.dragging) {\n                this.drag(true);\n            }\n        },\n\n        /**\n         * Handle Moues Up\n         */\n        _handleMouseUp: function(ev) {\n            // Unbind the document events\n            this.removeAllListeners(Garnish.$doc);\n\n            if (this.dragging) {\n                this.stopDragging();\n            }\n\n            this.$targetItem = null;\n        },\n\n        /**\n         * Scroll Window\n         */\n        _scrollWindow: function() {\n            this._.scrollPos = Garnish.$scrollContainer[this.scrollProperty]();\n            Garnish.$scrollContainer[this.scrollProperty](this._.scrollPos + this.scrollDist);\n\n            this['mouse' + this.scrollAxis] -= this._.scrollPos - Garnish.$scrollContainer[this.scrollProperty]();\n            this['realMouse' + this.scrollAxis] = this['mouse' + this.scrollAxis];\n\n            this.drag();\n\n            this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n        },\n\n        /**\n         * Cancel Window Scroll\n         */\n        _cancelWindowScroll: function() {\n            if (this.scrollFrame) {\n                Garnish.cancelAnimationFrame(this.scrollFrame);\n                this.scrollFrame = null;\n            }\n\n            this.scrollProperty = null;\n            this.scrollAxis = null;\n            this.scrollDist = null;\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            this.removeAllListeners(item);\n            $.removeData(item, 'drag');\n        }\n    },\n    {\n        minMouseDist: 1,\n        windowScrollTargetSize: 25,\n\n        defaults: {\n            handle: null,\n            axis: null,\n            ignoreHandleSelector: 'input, textarea, button, select, .btn',\n\n            onDragStart: $.noop,\n            onDrag: $.noop,\n            onDragStop: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Checkbox select class\n */\nGarnish.CheckboxSelect = Garnish.Base.extend(\n    {\n        $container: null,\n        $all: null,\n        $options: null,\n\n        init: function(container) {\n            this.$container = $(container);\n\n            // Is this already a checkbox select?\n            if (this.$container.data('checkboxSelect')) {\n                Garnish.log('Double-instantiating a checkbox select on an element');\n                this.$container.data('checkbox-select').destroy();\n            }\n\n            this.$container.data('checkboxSelect', this);\n\n            var $checkboxes = this.$container.find('input');\n            this.$all = $checkboxes.filter('.all:first');\n            this.$options = $checkboxes.not(this.$all);\n\n            this.addListener(this.$all, 'change', 'onAllChange');\n        },\n\n        onAllChange: function() {\n            var isAllChecked = this.$all.prop('checked');\n\n            this.$options.prop({\n                checked: isAllChecked,\n                disabled: isAllChecked\n            });\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('checkboxSelect');\n            this.base();\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Context Menu\n */\nGarnish.ContextMenu = Garnish.Base.extend(\n    {\n        $target: null,\n        options: null,\n        $menu: null,\n        showingMenu: false,\n\n        /**\n         * Constructor\n         */\n        init: function(target, options, settings) {\n            this.$target = $(target);\n\n            // Is this already a context menu target?\n            if (this.$target.data('contextmenu')) {\n                Garnish.log('Double-instantiating a context menu on an element');\n                this.$target.data('contextmenu').destroy();\n            }\n\n            this.$target.data('contextmenu', this);\n\n            this.options = options;\n            this.setSettings(settings, Garnish.ContextMenu.defaults);\n\n            Garnish.ContextMenu.counter++;\n\n            this.enable();\n        },\n\n        /**\n         * Build Menu\n         */\n        buildMenu: function() {\n            this.$menu = $('<div class=\"' + this.settings.menuClass + '\" style=\"display: none\" />');\n\n            var $ul = $('<ul/>').appendTo(this.$menu);\n\n            for (var i in this.options) {\n                var option = this.options[i];\n\n                if (option == '-') {\n                    // Create a new <ul>\n                    $('<hr/>').appendTo(this.$menu);\n                    $ul = $('<ul/>').appendTo(this.$menu);\n                }\n                else {\n                    var $li = $('<li></li>').appendTo($ul),\n                        $a = $('<a>' + option.label + '</a>').appendTo($li);\n\n                    if (typeof option.onClick == 'function') {\n                        // maintain the current $a and options.onClick variables\n                        (function($a, onClick) {\n                            setTimeout($.proxy(function() {\n                                $a.mousedown($.proxy(function(ev) {\n                                    this.hideMenu();\n                                    // call the onClick callback, with the scope set to the item,\n                                    // and pass it the event with currentTarget set to the item as well\n                                    onClick.call(this.currentTarget, $.extend(ev, {currentTarget: this.currentTarget}));\n                                }, this));\n                            }, this), 1);\n                        }).call(this, $a, option.onClick);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Show Menu\n         */\n        showMenu: function(ev) {\n            // Ignore left mouse clicks\n            if (ev.type == 'mousedown' && ev.which != Garnish.SECONDARY_CLICK) {\n                return;\n            }\n\n            if (ev.type == 'contextmenu') {\n                // Prevent the real context menu from showing\n                ev.preventDefault();\n            }\n\n            // Ignore if already showing\n            if (this.showing && ev.currentTarget == this.currentTarget) {\n                return;\n            }\n\n            this.currentTarget = ev.currentTarget;\n\n            if (!this.$menu) {\n                this.buildMenu();\n            }\n\n            this.$menu.appendTo(document.body);\n            this.$menu.show();\n            this.$menu.css({left: ev.pageX + 1, top: ev.pageY - 4});\n\n            this.showing = true;\n\n            setTimeout($.proxy(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'hideMenu');\n            }, this), 0);\n        },\n\n        /**\n         * Hide Menu\n         */\n        hideMenu: function() {\n            this.removeListener(Garnish.$doc, 'mousedown');\n            this.$menu.hide();\n            this.showing = false;\n        },\n\n        /**\n         * Enable\n         */\n        enable: function() {\n            this.addListener(this.$target, 'contextmenu,mousedown', 'showMenu');\n        },\n\n        /**\n         * Disable\n         */\n        disable: function() {\n            this.removeListener(this.$target, 'contextmenu,mousedown');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$target.removeData('contextmenu');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuClass: 'menu'\n        },\n        counter: 0\n    }\n);\n\n/** global: Garnish */\n/**\n * Drag class\n *\n * Builds on the BaseDrag class by \"picking up\" the selceted element(s),\n * without worrying about what to do when an element is being dragged.\n */\nGarnish.Drag = Garnish.BaseDrag.extend(\n    {\n        targetItemWidth: null,\n        targetItemHeight: null,\n        targetItemPositionInDraggee: null,\n\n        $draggee: null,\n\n        otherItems: null,\n        totalOtherItems: null,\n\n        helpers: null,\n        helperTargets: null,\n        helperPositions: null,\n        helperLagIncrement: null,\n        updateHelperPosProxy: null,\n        updateHelperPosFrame: null,\n\n        lastMouseX: null,\n        lastMouseY: null,\n\n        _returningHelpersToDraggees: false,\n\n        /**\n         * Constructor\n         *\n         * @param mixed  items    Elements that should be draggable right away. (Can be skipped.)\n         * @param object settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (settings === undefined && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.Drag.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            // Don't allow dragging if we're in the middle of animating the helpers back to the draggees\n            return !this._returningHelpersToDraggees;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            // Reset some things\n            this.helpers = [];\n            this.helperTargets = [];\n            this.helperPositions = [];\n            this.lastMouseX = this.lastMouseY = null;\n\n            // Capture the target item's width/height\n            this.targetItemWidth = this.$targetItem.outerWidth();\n            this.targetItemHeight = this.$targetItem.outerHeight();\n\n            // Save the draggee's display style (block/table-row) so we can re-apply it later\n            this.draggeeDisplay = this.$targetItem.css('display');\n\n            // Set the $draggee\n            this.setDraggee(this.findDraggee());\n\n            // Create an array of all the other items\n            this.otherItems = [];\n\n            for (var i = 0; i < this.$items.length; i++) {\n                var item = this.$items[i];\n\n                if ($.inArray(item, this.$draggee) == -1) {\n                    this.otherItems.push(item);\n                }\n            }\n            ;\n\n            this.totalOtherItems = this.otherItems.length;\n\n            // Keep the helpers following the cursor, with a little lag to smooth it out\n            if (!this.updateHelperPosProxy) {\n                this.updateHelperPosProxy = $.proxy(this, '_updateHelperPos');\n            }\n\n            this.helperLagIncrement = this.helpers.length == 1 ? 0 : this.settings.helperLagIncrementDividend / (this.helpers.length - 1);\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n\n            this.base();\n        },\n\n        /**\n         * Sets the draggee.\n         */\n        setDraggee: function($draggee) {\n            // Record the target item's position in the draggee\n            this.targetItemPositionInDraggee = $.inArray(this.$targetItem[0], $draggee.add(this.$targetItem[0]));\n\n            // Keep the target item at the front of the list\n            this.$draggee = $([this.$targetItem[0]].concat($draggee.not(this.$targetItem).toArray()));\n\n            // Create the helper(s)\n            if (this.settings.singleHelper) {\n                this._createHelper(0);\n            }\n            else {\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee) {\n                this.$draggee.hide();\n            }\n            else if (this.settings.collapseDraggees) {\n                this.$targetItem.css('visibility', 'hidden');\n                this.$draggee.not(this.$targetItem).hide();\n            }\n            else {\n                this.$draggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Appends additional items to the draggee.\n         */\n        appendDraggee: function($newDraggee) {\n            if (!$newDraggee.length) {\n                return;\n            }\n\n            if (!this.settings.collapseDraggees) {\n                var oldLength = this.$draggee.length;\n            }\n\n            this.$draggee = $(this.$draggee.toArray().concat($newDraggee.toArray()));\n\n            // Create new helpers?\n            if (!this.settings.collapseDraggees) {\n                var newLength = this.$draggee.length;\n\n                for (var i = oldLength; i < newLength; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee || this.settings.collapseDraggees) {\n                $newDraggee.hide();\n            }\n            else {\n                $newDraggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            // Update the draggee's virtual midpoint\n            this.draggeeVirtualMidpointX = this.mouseX - this.mouseOffsetX + (this.targetItemWidth / 2);\n            this.draggeeVirtualMidpointY = this.mouseY - this.mouseOffsetY + (this.targetItemHeight / 2);\n\n            this.base(didMouseMove);\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            // Clear the helper animation\n            Garnish.cancelAnimationFrame(this.updateHelperPosFrame);\n\n            this.base();\n        },\n\n        /**\n         * Identifies the item(s) that are being dragged.\n         */\n        findDraggee: function() {\n            switch (typeof this.settings.filter) {\n                case 'function': {\n                    return this.settings.filter();\n                }\n\n                case 'string': {\n                    return this.$items.filter(this.settings.filter);\n                }\n\n                default: {\n                    return this.$targetItem;\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            return this.mouseX - this.mouseOffsetX;\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            return this.mouseY - this.mouseOffsetY;\n        },\n\n        /**\n         * Return Helpers to Draggees\n         */\n        returnHelpersToDraggees: function() {\n            this._returningHelpersToDraggees = true;\n\n            for (var i = 0; i < this.helpers.length; i++) {\n                var $draggee = this.$draggee.eq(i),\n                    $helper = this.helpers[i];\n\n                $draggee.css({\n                    display: this.draggeeDisplay,\n                    visibility: 'hidden'\n                });\n\n                var draggeeOffset = $draggee.offset();\n\n                if (i == 0) {\n                    var callback = $.proxy(this, '_showDraggee');\n                }\n                else {\n                    var callback = null;\n                }\n\n                $helper.velocity({left: draggeeOffset.left, top: draggeeOffset.top}, Garnish.FX_DURATION, callback);\n            }\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        onReturnHelpersToDraggees: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('returnHelpersToDraggees');\n                this.settings.onReturnHelpersToDraggees();\n            }, this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Creates a helper.\n         */\n        _createHelper: function(i) {\n            var $draggee = this.$draggee.eq(i),\n                $draggeeHelper = $draggee.clone().addClass('draghelper');\n\n            if (this.settings.copyDraggeeInputValuesToHelper) {\n                Garnish.copyInputValues($draggee, $draggeeHelper);\n            }\n\n            // Remove any name= attributes so radio buttons don't lose their values\n            $draggeeHelper.find('[name]').attr('name', '');\n\n            $draggeeHelper.css({\n                width: $draggee.width() + 1, // Prevent the brower from wrapping text if the width was actually a fraction of a pixel larger\n                height: $draggee.height(),\n                margin: 0\n            });\n\n            if (this.settings.helper) {\n                if (typeof this.settings.helper == 'function') {\n                    $draggeeHelper = this.settings.helper($draggeeHelper);\n                }\n                else {\n                    $draggeeHelper = $(this.settings.helper).append($draggeeHelper);\n                }\n            }\n\n            $draggeeHelper.appendTo(Garnish.$bod);\n\n            var helperPos = this._getHelperTarget(i);\n\n            $draggeeHelper.css({\n                position: 'absolute',\n                top: helperPos.top,\n                left: helperPos.left,\n                zIndex: this.settings.helperBaseZindex + this.$draggee.length - i,\n                opacity: this.settings.helperOpacity\n            });\n\n            this.helperPositions[i] = {\n                top: helperPos.top,\n                left: helperPos.left\n            };\n\n            this.helpers.push($draggeeHelper);\n        },\n\n        /**\n         * Update Helper Position\n         */\n        _updateHelperPos: function() {\n            // Has the mouse moved?\n            if (this.mouseX !== this.lastMouseX || this.mouseY !== this.lastMouseY) {\n                // Get the new target helper positions\n                for (this._updateHelperPos._i = 0; this._updateHelperPos._i < this.helpers.length; this._updateHelperPos._i++) {\n                    this.helperTargets[this._updateHelperPos._i] = this._getHelperTarget(this._updateHelperPos._i);\n                }\n\n                this.lastMouseX = this.mouseX;\n                this.lastMouseY = this.mouseY;\n            }\n\n            // Gravitate helpers toward their target positions\n            for (this._updateHelperPos._j = 0; this._updateHelperPos._j < this.helpers.length; this._updateHelperPos._j++) {\n                this._updateHelperPos._lag = this.settings.helperLagBase + (this.helperLagIncrement * this._updateHelperPos._j);\n\n                this.helperPositions[this._updateHelperPos._j] = {\n                    left: this.helperPositions[this._updateHelperPos._j].left + ((this.helperTargets[this._updateHelperPos._j].left - this.helperPositions[this._updateHelperPos._j].left) / this._updateHelperPos._lag),\n                    top: this.helperPositions[this._updateHelperPos._j].top + ((this.helperTargets[this._updateHelperPos._j].top - this.helperPositions[this._updateHelperPos._j].top) / this._updateHelperPos._lag)\n                };\n\n                this.helpers[this._updateHelperPos._j].css(this.helperPositions[this._updateHelperPos._j]);\n            }\n\n            // Let's do this again on the next frame!\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n        },\n\n        /**\n         * Get the helper position for a draggee helper\n         */\n        _getHelperTarget: function(i) {\n            return {\n                left: this.getHelperTargetX() + (this.settings.helperSpacingX * i),\n                top: this.getHelperTargetY() + (this.settings.helperSpacingY * i)\n            };\n        },\n\n        _showDraggee: function() {\n            // Remove the helpers\n            for (var i = 0; i < this.helpers.length; i++) {\n                this.helpers[i].remove();\n            }\n\n            this.helpers = null;\n\n            this.$draggee.show().css('visibility', 'inherit');\n\n            this.onReturnHelpersToDraggees();\n\n            this._returningHelpersToDraggees = false;\n        }\n    },\n    {\n        defaults: {\n            filter: null,\n            singleHelper: false,\n            collapseDraggees: false,\n            removeDraggee: false,\n            copyDraggeeInputValuesToHelper: false,\n            helperOpacity: 1,\n            helper: null,\n            helperBaseZindex: 1000,\n            helperLagBase: 1,\n            helperLagIncrementDividend: 1.5,\n            helperSpacingX: 5,\n            helperSpacingY: 5,\n            onReturnHelpersToDraggees: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Drag-and-drop class\n *\n * Builds on the Drag class by allowing you to set up \"drop targets\"\n * which the dragged elemements can be dropped onto.\n */\nGarnish.DragDrop = Garnish.Drag.extend({\n\n        $dropTargets: null,\n        $activeDropTarget: null,\n\n        /**\n         * Constructor\n         */\n        init: function(settings) {\n            settings = $.extend({}, Garnish.DragDrop.defaults, settings);\n            this.base(settings);\n        },\n\n        updateDropTargets: function() {\n            if (this.settings.dropTargets) {\n                if (typeof this.settings.dropTargets == 'function') {\n                    this.$dropTargets = $(this.settings.dropTargets());\n                }\n                else {\n                    this.$dropTargets = $(this.settings.dropTargets);\n                }\n\n                // Discard if it's an empty array\n                if (!this.$dropTargets.length) {\n                    this.$dropTargets = null;\n                }\n            }\n        },\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.updateDropTargets();\n            this.$activeDropTarget = null;\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            if (this.$dropTargets) {\n                this.onDrag._activeDropTarget = null;\n\n                // is the cursor over any of the drop target?\n                for (this.onDrag._i = 0; this.onDrag._i < this.$dropTargets.length; this.onDrag._i++) {\n                    this.onDrag._elem = this.$dropTargets[this.onDrag._i];\n\n                    if (Garnish.hitTest(this.mouseX, this.mouseY, this.onDrag._elem)) {\n                        this.onDrag._activeDropTarget = this.onDrag._elem;\n                        break;\n                    }\n                }\n\n                // has the drop target changed?\n                if (\n                    (this.$activeDropTarget && this.onDrag._activeDropTarget != this.$activeDropTarget[0]) ||\n                    (!this.$activeDropTarget && this.onDrag._activeDropTarget !== null)\n                ) {\n                    // was there a previous one?\n                    if (this.$activeDropTarget) {\n                        this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n                    }\n\n                    // remember the new one\n                    if (this.onDrag._activeDropTarget) {\n                        this.$activeDropTarget = $(this.onDrag._activeDropTarget).addClass(this.settings.activeDropTargetClass);\n                    }\n                    else {\n                        this.$activeDropTarget = null;\n                    }\n\n                    this.settings.onDropTargetChange(this.$activeDropTarget);\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.$dropTargets && this.$activeDropTarget) {\n                this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n            }\n\n            this.base();\n        },\n\n        /**\n         * Fade Out Helpers\n         */\n        fadeOutHelpers: function() {\n            for (var i = 0; i < this.helpers.length; i++) {\n                (function($draggeeHelper) {\n                    $draggeeHelper.velocity('fadeOut', {\n                        duration: Garnish.FX_DURATION,\n                        complete: function() {\n                            $draggeeHelper.remove();\n                        }\n                    });\n                })(this.helpers[i]);\n            }\n        }\n    },\n    {\n        defaults: {\n            dropTargets: null,\n            onDropTargetChange: $.noop,\n            activeDropTargetClass: 'active'\n        }\n    });\n\n/** global: Garnish */\n/**\n * Drag-to-move clas\n *\n * Builds on the BaseDrag class by simply moving the dragged element(s) along with the mouse.\n */\nGarnish.DragMove = Garnish.BaseDrag.extend(\n    {\n        onDrag: function(items, settings) {\n            this.$targetItem.css({\n                left: this.mouseX - this.mouseOffsetX,\n                top: this.mouseY - this.mouseOffsetY\n            });\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Drag-to-sort class\n *\n * Builds on the Drag class by allowing you to sort the elements amongst themselves.\n */\nGarnish.DragSort = Garnish.Drag.extend(\n    {\n        $heightedContainer: null,\n        $insertion: null,\n        insertionVisible: false,\n        oldDraggeeIndexes: null,\n        newDraggeeIndexes: null,\n        closestItem: null,\n\n        _midpointVersion: 0,\n        _$prevItem: null,\n\n        /**\n         * Constructor\n         *\n         * @param mixed  items    Elements that should be draggable right away. (Can be skipped.)\n         * @param object settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (settings === undefined && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.DragSort.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Creates the insertion element.\n         */\n        createInsertion: function() {\n            if (this.settings.insertion) {\n                if (typeof this.settings.insertion == 'function') {\n                    return $(this.settings.insertion(this.$draggee));\n                }\n                else {\n                    return $(this.settings.insertion);\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            if (this.settings.magnetStrength != 1) {\n                this.getHelperTargetX._draggeeOffsetX = this.$draggee.offset().left;\n                return this.getHelperTargetX._draggeeOffsetX + ((this.mouseX - this.mouseOffsetX - this.getHelperTargetX._draggeeOffsetX) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            if (this.settings.magnetStrength != 1) {\n                this.getHelperTargetY._draggeeOffsetY = this.$draggee.offset().top;\n                return this.getHelperTargetY._draggeeOffsetY + ((this.mouseY - this.mouseOffsetY - this.getHelperTargetY._draggeeOffsetY) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            return true;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            return true;\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.oldDraggeeIndexes = this._getDraggeeIndexes();\n\n            // Are we supposed to be moving the target item to the front, and is it not already there?\n            if (\n                this.settings.moveTargetItemToFront &&\n                this.$draggee.length > 1 &&\n                this._getItemIndex(this.$draggee[0]) > this._getItemIndex(this.$draggee[1])\n            ) {\n                // Reposition the target item before the other draggee items in the DOM\n                this.$draggee.first().insertBefore(this.$draggee[1]);\n            }\n\n            // Create the insertion\n            this.$insertion = this.createInsertion();\n            this._placeInsertionWithDraggee();\n\n            this.closestItem = null;\n            this._clearMidpoints();\n\n            //  Get the closest container that has a height\n            if (this.settings.container) {\n                this.$heightedContainer = $(this.settings.container);\n\n                while (!this.$heightedContainer.height()) {\n                    this.$heightedContainer = this.$heightedContainer.parent();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            // If there's a container set, make sure that we're hovering over it\n            if (this.$heightedContainer && !Garnish.hitTest(this.mouseX, this.mouseY, this.$heightedContainer)) {\n                if (this.closestItem) {\n                    this.closestItem = null;\n                    this._removeInsertion();\n                }\n            }\n            else {\n                // Is there a new closest item?\n                if (\n                    this.closestItem !== (this.closestItem = this._getClosestItem()) &&\n                    this.closestItem !== null\n                ) {\n                    this._updateInsertion();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._removeInsertion();\n\n            // Should we keep the target item where it was?\n            if (!this.settings.moveTargetItemToFront && this.targetItemPositionInDraggee != 0) {\n                this.$targetItem.insertAfter(this.$draggee.eq(this.targetItemPositionInDraggee));\n            }\n\n            // Return the helpers to the draggees\n            this.returnHelpersToDraggees();\n\n            this.base();\n\n            // Has the item actually moved?\n            this.$items = $().add(this.$items);\n            this.newDraggeeIndexes = this._getDraggeeIndexes();\n\n            if (this.newDraggeeIndexes.join(',') != this.oldDraggeeIndexes.join(',')) {\n                this.onSortChange();\n            }\n        },\n\n        /**\n         * On Insertion Point Change event\n         */\n        onInsertionPointChange: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('insertionPointChange');\n                this.settings.onInsertionPointChange();\n            }, this));\n        },\n\n        /**\n         * On Sort Change event\n         */\n        onSortChange: function() {\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.trigger('sortChange');\n                this.settings.onSortChange();\n            }, this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _getItemIndex: function(item) {\n            return $.inArray(item, this.$items);\n        },\n\n        _getDraggeeIndexes: function() {\n            var indexes = [];\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                indexes.push(this._getItemIndex(this.$draggee[i]))\n            }\n\n            return indexes;\n        },\n\n        /**\n         * Returns the closest item to the cursor.\n         */\n        _getClosestItem: function() {\n            this._getClosestItem._closestItem = null;\n\n            // Start by checking the draggee/insertion, if either are visible\n            if (!this.settings.removeDraggee) {\n                this._testForClosestItem(this.$draggee[0]);\n            }\n            else if (this.insertionVisible) {\n                this._testForClosestItem(this.$insertion[0]);\n            }\n\n            // Check items before the draggee\n            if (this._getClosestItem._closestItem) {\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._closestItem)\n            }\n            if (this.settings.axis != Garnish.Y_AXIS) {\n                this._getClosestItem._startXDist = this._getClosestItem._lastXDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX) : null;\n            }\n            if (this.settings.axis != Garnish.X_AXIS) {\n                this._getClosestItem._startYDist = this._getClosestItem._lastYDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY) : null;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.first().prev();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis != Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis != Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis == Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis == Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis != Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis != Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertBefore(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.prev();\n            }\n\n            // Check items after the draggee\n            if (this.settings.axis != Garnish.Y_AXIS) {\n                this._getClosestItem._lastXDist = this._getClosestItem._startXDist;\n            }\n            if (this.settings.axis != Garnish.X_AXIS) {\n                this._getClosestItem._lastYDist = this._getClosestItem._startYDist;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.last().next();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis != Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis != Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis == Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis == Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis != Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis != Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertAfter(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.next();\n            }\n\n            // Return the result\n\n            // Ignore if it's the draggee or insertion\n            if (\n                this._getClosestItem._closestItem != this.$draggee[0] &&\n                (!this.insertionVisible || this._getClosestItem._closestItem != this.$insertion[0])\n            ) {\n                return this._getClosestItem._closestItem;\n            }\n            else {\n                return null;\n            }\n        },\n\n        _clearMidpoints: function() {\n            this._midpointVersion++;\n            this._$prevItem = null;\n        },\n\n        _getItemMidpoint: function(item) {\n            if ($.data(item, 'midpointVersion') != this._midpointVersion) {\n                // If this isn't the draggee, temporarily move the draggee to this item\n                this._getItemMidpoint._repositionDraggee = (\n                    !this.settings.axis &&\n                    (!this.settings.removeDraggee || this.insertionVisible) &&\n                    item != this.$draggee[0] &&\n                    (!this.$insertion || item != this.$insertion.get(0))\n                );\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Is this the first time we've had to temporarily reposition the draggee since the last midpoint clearing?\n                    if (!this._$prevItem) {\n                        this._$prevItem = (this.insertionVisible ? this.$insertion : this.$draggee).first().prev();\n                    }\n\n                    this._moveDraggeeToItem(item);\n\n                    // Now figure out which element we're actually getting the midpoint of\n                    if (!this.settings.removeDraggee) {\n                        this._getItemMidpoint._$item = this.$draggee;\n                    }\n                    else {\n                        this._getItemMidpoint._$item = this.$insertion;\n                    }\n                }\n                else {\n                    // We're actually getting the midpoint of this item\n                    this._getItemMidpoint._$item = $(item);\n                }\n\n                this._getItemMidpoint._offset = this._getItemMidpoint._$item.offset();\n\n                $.data(item, 'midpoint', {\n                    x: this._getItemMidpoint._offset.left + this._getItemMidpoint._$item.outerWidth() / 2,\n                    y: this._getItemMidpoint._offset.top + this._getItemMidpoint._$item.outerHeight() / 2\n                });\n\n                $.data(item, 'midpointVersion', this._midpointVersion);\n\n                delete this._getItemMidpoint._$item;\n                delete this._getItemMidpoint._offset;\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Move the draggee back\n                    if (this._$prevItem.length) {\n                        this.$draggee.insertAfter(this._$prevItem);\n                    }\n                    else {\n                        this.$draggee.prependTo(this.$draggee.parent());\n                    }\n\n                    this._placeInsertionWithDraggee();\n                }\n            }\n\n            return $.data(item, 'midpoint');\n        },\n\n        _testForClosestItem: function(item) {\n            this._testForClosestItem._midpoint = this._getItemMidpoint(item);\n            this._testForClosestItem._mouseDistX = Math.abs(this._testForClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n            this._testForClosestItem._mouseDistY = Math.abs(this._testForClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n\n            // Don't even consider items that are further away on the Y axis\n            if (\n                this._getClosestItem._closestItem === null ||\n                this._testForClosestItem._mouseDistY < this._getClosestItem._closestItemMouseDistY ||\n                (\n                    this._testForClosestItem._mouseDistY == this._getClosestItem._closestItemMouseDistY &&\n                    this._testForClosestItem._mouseDistX <= this._getClosestItem._closestItemMouseDistX\n                )\n            ) {\n                this._getClosestItem._closestItem = item;\n                this._getClosestItem._closestItemMouseDistX = this._testForClosestItem._mouseDistX;\n                this._getClosestItem._closestItemMouseDistY = this._testForClosestItem._mouseDistY;\n            }\n        },\n\n        /**\n         * Updates the position of the insertion point.\n         */\n        _updateInsertion: function() {\n            if (this.closestItem) {\n                this._moveDraggeeToItem(this.closestItem);\n            }\n\n            // Now that things have shifted around, invalidate the midpoints\n            this._clearMidpoints();\n\n            this.onInsertionPointChange();\n        },\n\n        _moveDraggeeToItem: function(item) {\n            // Going down?\n            if (this.$draggee.index() < $(item).index()) {\n                this.$draggee.insertAfter(item);\n            }\n            else {\n                this.$draggee.insertBefore(item);\n            }\n\n            this._placeInsertionWithDraggee();\n        },\n\n        _placeInsertionWithDraggee: function() {\n            if (this.$insertion) {\n                this.$insertion.insertBefore(this.$draggee.first());\n                this.insertionVisible = true;\n            }\n        },\n\n        /**\n         * Removes the insertion, if it's visible.\n         */\n        _removeInsertion: function() {\n            if (this.insertionVisible) {\n                this.$insertion.remove();\n                this.insertionVisible = false;\n            }\n        }\n    },\n    {\n        defaults: {\n            container: null,\n            insertion: null,\n            moveTargetItemToFront: false,\n            magnetStrength: 1,\n            onInsertionPointChange: $.noop,\n            onSortChange: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * ESC key manager class\n */\nGarnish.EscManager = Garnish.Base.extend(\n    {\n        handlers: null,\n\n        init: function() {\n            this.handlers = [];\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode == Garnish.ESC_KEY) {\n                    this.escapeLatest(ev);\n                }\n            });\n        },\n\n        register: function(obj, func) {\n            this.handlers.push({\n                obj: obj,\n                func: func\n            });\n        },\n\n        unregister: function(obj) {\n            for (var i = this.handlers.length - 1; i >= 0; i--) {\n                if (this.handlers[i].obj == obj) {\n                    this.handlers.splice(i, 1);\n                }\n            }\n        },\n\n        escapeLatest: function(ev) {\n            if (this.handlers.length) {\n                var handler = this.handlers.pop();\n\n                if (typeof handler.func == 'function') {\n                    var func = handler.func;\n                }\n                else {\n                    var func = handler.obj[handler.func];\n                }\n\n                func.call(handler.obj, ev);\n\n                if (typeof handler.obj.trigger == 'function') {\n                    handler.obj.trigger('escape');\n                }\n            }\n        }\n    }\n);\n\nGarnish.escManager = new Garnish.EscManager();\n\n/** global: Garnish */\n/**\n * HUD\n */\nGarnish.HUD = Garnish.Base.extend(\n    {\n        $trigger: null,\n        $fixedTriggerParent: null,\n        $hud: null,\n        $tip: null,\n        $body: null,\n        $header: null,\n        $footer: null,\n        $mainContainer: null,\n        $main: null,\n        $shade: null,\n\n        showing: false,\n        orientation: null,\n        listeningForUpdateSizeAndPositionEvents: false,\n        pendingUpdateSizeAndPosition: false,\n\n        /**\n         * Constructor\n         */\n        init: function(trigger, bodyContents, settings) {\n\n            this.$trigger = $(trigger);\n\n            this.setSettings(settings, Garnish.HUD.defaults);\n            this.on('show', this.settings.onShow);\n            this.on('hide', this.settings.onHide);\n            this.on('submit', this.settings.onSubmit);\n\n            if (Garnish.HUD.activeHUDs === undefined) {\n                Garnish.HUD.activeHUDs = {};\n            }\n\n            this.$shade = $('<div/>', {'class': this.settings.shadeClass});\n            this.$hud = $('<div/>', {'class': this.settings.hudClass});\n            this.$tip = $('<div/>', {'class': this.settings.tipClass}).appendTo(this.$hud);\n            this.$body = $('<form/>', {'class': this.settings.bodyClass}).appendTo(this.$hud);\n            this.$mainContainer = $('<div/>', {'class': this.settings.mainContainerClass}).appendTo(this.$body);\n            this.$main = $('<div/>', {'class': this.settings.mainClass}).appendTo(this.$mainContainer);\n\n            this.updateBody(bodyContents);\n\n            // See if the trigger is fixed\n            var $parent = this.$trigger;\n\n            do {\n                if ($parent.css('position') == 'fixed') {\n                    this.$fixedTriggerParent = $parent;\n                    break;\n                }\n\n                $parent = $parent.offsetParent();\n            }\n            while ($parent.length && $parent.prop('nodeName') != 'HTML');\n\n            if (this.$fixedTriggerParent) {\n                this.$hud.css('position', 'fixed');\n            }\n            else {\n                this.$hud.css('position', 'absolute');\n            }\n\n            // Hide the HUD until it gets positioned\n\t\t\tvar windowWidth = Garnish.$win.width();\n\n\t\t\tthis.$hud.css({\n                left: '-' + windowWidth + 'px',\n\t\t\t});\n\n            this.show();\n\n            this.addListener(this.$body, 'submit', '_handleSubmit');\n            this.addListener(this.$shade, 'tap', 'hide');\n\n            if (this.settings.closeBtn) {\n                this.addListener(this.settings.closeBtn, 'activate', 'hide');\n            }\n        },\n\n        /**\n         * Update the body contents\n         */\n        updateBody: function(bodyContents) {\n            this.removeUpdateSizeAndPositionListeners();\n\n            // Cleanup\n            this.$main.html('');\n\n            if (this.$header) {\n                this.$hud.removeClass('has-header');\n                this.$header.remove();\n                this.$header = null;\n            }\n\n            if (this.$footer) {\n                this.$hud.removeClass('has-footer');\n                this.$footer.remove();\n                this.$footer = null;\n            }\n\n            // Append the new body contents\n            this.$main.append(bodyContents);\n\n            // Look for a header and footer\n            var $header = this.$main.find('.' + this.settings.headerClass + ':first'),\n                $footer = this.$main.find('.' + this.settings.footerClass + ':first');\n\n            if ($header.length) {\n                this.$header = $header.insertBefore(this.$mainContainer);\n                this.$hud.addClass('has-header');\n            }\n\n            if ($footer.length) {\n                this.$footer = $footer.insertAfter(this.$mainContainer);\n                this.$hud.addClass('has-footer');\n            }\n        },\n\n        /**\n         * Show\n         */\n        show: function(ev) {\n            if (ev && ev.stopPropagation) {\n                ev.stopPropagation();\n            }\n\n            if (this.showing) {\n                return;\n            }\n\n            if (this.settings.closeOtherHUDs) {\n                for (var hudID in Garnish.HUD.activeHUDs) {\n                    Garnish.HUD.activeHUDs[hudID].hide();\n                }\n            }\n\n            // Prevent the browser from jumping\n            this.$hud.css('top', Garnish.$scrollContainer.scrollTop());\n\n            // Move it to the end of <body> so it gets the highest sub-z-index\n            this.$shade.appendTo(Garnish.$bod);\n            this.$hud.appendTo(Garnish.$bod);\n\n            this.$hud.show();\n            this.$shade.show();\n            this.showing = true;\n            Garnish.HUD.activeHUDs[this._namespace] = this;\n            Garnish.escManager.register(this, 'hide');\n\n            this.onShow();\n            this.enable();\n\n            this.queueUpdateSizeAndPosition();\n        },\n\n        onShow: function() {\n            this.trigger('show');\n        },\n\n        updateSizeAndPosition: function(e) {\n            if (e && e.stopPropagation) {\n                e.stopPropagation();\n            }\n\n            this.pendingUpdateSizeAndPosition = false;\n            this.removeUpdateSizeAndPositionListeners();\n\n            var windowWidth,\n                windowHeight,\n                triggerWidth,\n                triggerHeight,\n                triggerOffset,\n                windowScrollLeft,\n                windowScrollTop,\n                scrollContainerTriggerOffset,\n                scrollContainerScrollLeft,\n                scrollContainerScrollTop,\n                hudBodyWidth,\n                hudBodyHeight;\n\n            // Get the window sizes and trigger offset\n\n            windowWidth = Garnish.$win.width();\n            windowHeight = Garnish.$win.height();\n            windowScrollLeft = Garnish.$win.scrollLeft();\n            windowScrollTop = Garnish.$win.scrollTop();\n\n            // Get the trigger's dimensions\n            triggerWidth = this.$trigger.outerWidth();\n            triggerHeight = this.$trigger.outerHeight();\n\n            // Get the offsets for each side of the trigger element\n            triggerOffset = this.$trigger.offset();\n\n            if (this.$fixedTriggerParent) {\n                triggerOffset.left -= windowScrollLeft;\n                triggerOffset.top -= windowScrollTop;\n\n                scrollContainerTriggerOffset = triggerOffset;\n\n                windowScrollLeft = 0;\n                windowScrollTop = 0;\n                scrollContainerScrollLeft = 0;\n                scrollContainerScrollTop = 0;\n            }\n            else {\n                scrollContainerTriggerOffset = Garnish.getOffset(this.$trigger);\n\n                scrollContainerScrollLeft = Garnish.$scrollContainer.scrollLeft();\n                scrollContainerScrollTop = Garnish.$scrollContainer.scrollTop();\n            }\n\n            triggerOffset.right = triggerOffset.left + triggerWidth;\n            triggerOffset.bottom = triggerOffset.top + triggerHeight;\n\n            scrollContainerTriggerOffset.right = scrollContainerTriggerOffset.left + triggerWidth;\n            scrollContainerTriggerOffset.bottom = scrollContainerTriggerOffset.top + triggerHeight;\n\n            // Get the HUD dimensions\n            this.$hud.css({\n                width: ''\n            });\n\n            this.$mainContainer.css({\n                height: '',\n                'overflow-x': '',\n                'overflow-y': ''\n            });\n\n            hudBodyWidth = this.$body.width();\n            hudBodyHeight = this.$body.height();\n\n            // Determine the best orientation for the HUD\n\n            // Find the actual available top/right/bottom/left clearances\n            var clearances = {\n                bottom: windowHeight + scrollContainerScrollTop - scrollContainerTriggerOffset.bottom,\n                top: scrollContainerTriggerOffset.top - scrollContainerScrollTop,\n                right: windowWidth + scrollContainerScrollLeft - scrollContainerTriggerOffset.right,\n                left: scrollContainerTriggerOffset.left - scrollContainerScrollLeft\n            };\n\n            // Find the first position that has enough room\n            this.orientation = null;\n\n            for (var i = 0; i < this.settings.orientations.length; i++) {\n                var orientation = this.settings.orientations[i],\n                    relevantSize = (orientation == 'top' || orientation == 'bottom' ? hudBodyHeight : hudBodyWidth);\n\n                if (clearances[orientation] - (this.settings.windowSpacing + this.settings.triggerSpacing) >= relevantSize) {\n                    // This is the first orientation that has enough room in order of preference, so we'll go with this\n                    this.orientation = orientation;\n                    break;\n                }\n\n                if (!this.orientation || clearances[orientation] > clearances[this.orientation]) {\n                    // Use this as a fallback as it's the orientation with the most clearance so far\n                    this.orientation = orientation;\n                }\n            }\n\n            // Just in case...\n            if (!this.orientation || $.inArray(this.orientation, ['bottom', 'top', 'right', 'left']) == -1) {\n                this.orientation = 'bottom'\n            }\n\n            // Update the tip class\n            if (this.tipClass) {\n                this.$tip.removeClass(this.tipClass);\n            }\n\n            this.tipClass = this.settings.tipClass + '-' + Garnish.HUD.tipClasses[this.orientation];\n            this.$tip.addClass(this.tipClass);\n\n            // Make sure the HUD body is within the allowed size\n\n            var maxHudBodyWidth,\n                maxHudBodyHeight;\n\n            if (this.orientation == 'top' || this.orientation == 'bottom') {\n                maxHudBodyWidth = windowWidth - this.settings.windowSpacing * 2;\n                maxHudBodyHeight = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n            }\n            else {\n                maxHudBodyWidth = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n                maxHudBodyHeight = windowHeight - this.settings.windowSpacing * 2;\n            }\n\n            if (maxHudBodyWidth < this.settings.minBodyWidth) {\n                maxHudBodyWidth = this.settings.minBodyWidth;\n            }\n\n            if (maxHudBodyHeight < this.settings.minBodyHeight) {\n                maxHudBodyHeight = this.settings.minBodyHeight;\n            }\n\n            if (hudBodyWidth > maxHudBodyWidth || hudBodyWidth < this.settings.minBodyWidth) {\n                if (hudBodyWidth > maxHudBodyWidth) {\n                    hudBodyWidth = maxHudBodyWidth;\n                }\n                else {\n                    hudBodyWidth = this.settings.minBodyWidth;\n                }\n\n                this.$hud.width(hudBodyWidth);\n\n                // Is there any overflow now?\n                if (this.$main.outerWidth() > maxHudBodyWidth) {\n                    this.$mainContainer.css('overflow-x', 'scroll');\n                }\n\n                // The height may have just changed\n                hudBodyHeight = this.$body.height();\n            }\n\n            if (hudBodyHeight > maxHudBodyHeight || hudBodyHeight < this.settings.minBodyHeight) {\n                if (hudBodyHeight > maxHudBodyHeight) {\n                    hudBodyHeight = maxHudBodyHeight;\n                }\n                else {\n                    hudBodyHeight = this.settings.minBodyHeight;\n                }\n\n                var mainHeight = hudBodyHeight;\n\n                if (this.$header) {\n                    mainHeight -= this.$header.outerHeight();\n                }\n\n                if (this.$footer) {\n                    mainHeight -= this.$footer.outerHeight();\n                }\n\n                this.$mainContainer.height(mainHeight);\n\n                // Is there any overflow now?\n                if (this.$main.outerHeight() > mainHeight) {\n                    this.$mainContainer.css('overflow-y', 'scroll');\n                }\n            }\n\n            // Set the HUD/tip positions\n\n            if (this.orientation == 'top' || this.orientation == 'bottom') {\n                // Center the HUD horizontally\n                var maxLeft = (windowWidth + windowScrollLeft) - (hudBodyWidth + this.settings.windowSpacing),\n                    minLeft = (windowScrollLeft + this.settings.windowSpacing),\n                    triggerCenter = triggerOffset.left + Math.round(triggerWidth / 2),\n                    left = triggerCenter - Math.round(hudBodyWidth / 2);\n\n                if (left > maxLeft) {\n                    left = maxLeft;\n                }\n                if (left < minLeft) {\n                    left = minLeft;\n                }\n\n                this.$hud.css('left', left);\n\n                var tipLeft = (triggerCenter - left) - (this.settings.tipWidth / 2);\n                this.$tip.css({left: tipLeft, top: ''});\n\n                if (this.orientation == 'top') {\n                    var top = triggerOffset.top - (hudBodyHeight + this.settings.triggerSpacing);\n                    this.$hud.css('top', top);\n                }\n                else {\n                    var top = triggerOffset.bottom + this.settings.triggerSpacing;\n                    this.$hud.css('top', top);\n                }\n            }\n            else {\n                // Center the HUD vertically\n                var maxTop = (windowHeight + windowScrollTop) - (hudBodyHeight + this.settings.windowSpacing),\n                    minTop = (windowScrollTop + this.settings.windowSpacing),\n                    triggerCenter = triggerOffset.top + Math.round(triggerHeight / 2),\n                    top = triggerCenter - Math.round(hudBodyHeight / 2);\n\n                if (top > maxTop) {\n                    top = maxTop;\n                }\n                if (top < minTop) {\n                    top = minTop;\n                }\n\n                this.$hud.css('top', top);\n\n                var tipTop = (triggerCenter - top) - (this.settings.tipWidth / 2);\n                this.$tip.css({top: tipTop, left: ''});\n\n\n                if (this.orientation == 'left') {\n                    var left = triggerOffset.left - (hudBodyWidth + this.settings.triggerSpacing);\n                    this.$hud.css('left', left);\n                }\n                else {\n                    var left = triggerOffset.right + this.settings.triggerSpacing;\n                    this.$hud.css('left', left);\n                }\n            }\n\n            Garnish.requestAnimationFrame($.proxy(function() {\n                this.addUpdateSizeAndPositionListeners()\n            }, this));\n\n            this.trigger('updateSizeAndPosition');\n        },\n\n        queueUpdateSizeAndPosition: function() {\n            if (this.pendingUpdateSizeAndPosition) {\n                return;\n            }\n\n            Garnish.requestAnimationFrame($.proxy(this, 'updateSizeAndPosition'));\n            this.pendingUpdateSizeAndPosition = true;\n        },\n\n        addUpdateSizeAndPositionListeners: function() {\n            if (this.listeningForUpdateSizeAndPositionEvents) {\n                return;\n            }\n\n            this.addListener(Garnish.$win, 'resize', 'queueUpdateSizeAndPosition');\n            this.addListener(this.$main, 'resize', 'queueUpdateSizeAndPosition');\n            if (!this.$fixedTriggerParent && Garnish.$scrollContainer[0] != Garnish.$win[0]) {\n                this.addListener(Garnish.$scrollContainer, 'scroll', 'queueUpdateSizeAndPosition');\n            }\n\n            this.listeningForUpdateSizeAndPositionEvents = true;\n        },\n\n        removeUpdateSizeAndPositionListeners: function() {\n            if (!this.listeningForUpdateSizeAndPositionEvents) {\n                return;\n            }\n\n            this.removeListener(Garnish.$win, 'resize');\n            this.removeListener(this.$main, 'resize');\n            if (!this.$fixedTriggerParent && Garnish.$scrollContainer[0] != Garnish.$win[0]) {\n                this.removeListener(Garnish.$scrollContainer, 'scroll');\n            }\n\n            this.listeningForUpdateSizeAndPositionEvents = false;\n        },\n\n        /**\n         * Hide\n         */\n        hide: function() {\n            this.disable();\n\n            this.$hud.hide();\n            this.$shade.hide();\n            this.showing = false;\n\n            delete Garnish.HUD.activeHUDs[this._namespace];\n\n            Garnish.escManager.unregister(this);\n\n            this.onHide();\n        },\n\n        onHide: function() {\n            this.trigger('hide');\n        },\n\n        toggle: function() {\n            if (this.showing) {\n                this.hide();\n            }\n            else {\n                this.show();\n            }\n        },\n\n        submit: function() {\n            this.onSubmit();\n        },\n\n        onSubmit: function() {\n            this.trigger('submit');\n        },\n\n        _handleSubmit: function(ev) {\n            ev.preventDefault();\n            this.submit();\n        }\n    },\n    {\n        tipClasses: {bottom: 'top', top: 'bottom', right: 'left', left: 'right'},\n\n        defaults: {\n            shadeClass: 'hud-shade',\n            hudClass: 'hud',\n            tipClass: 'tip',\n            bodyClass: 'body',\n            headerClass: 'hud-header',\n            footerClass: 'hud-footer',\n            mainContainerClass: 'main-container',\n            mainClass: 'main',\n            orientations: ['bottom', 'top', 'right', 'left'],\n            triggerSpacing: 10,\n            windowSpacing: 10,\n            tipWidth: 30,\n            minBodyWidth: 200,\n            minBodyHeight: 0,\n            onShow: $.noop,\n            onHide: $.noop,\n            onSubmit: $.noop,\n            closeBtn: null,\n            closeOtherHUDs: true\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Menu\n */\nGarnish.Menu = Garnish.Base.extend(\n    {\n        settings: null,\n\n        $container: null,\n        $options: null,\n        $anchor: null,\n\n        menuId: null,\n\n        _windowWidth: null,\n        _windowHeight: null,\n        _windowScrollLeft: null,\n        _windowScrollTop: null,\n\n        _anchorOffset: null,\n        _anchorWidth: null,\n        _anchorHeight: null,\n        _anchorOffsetRight: null,\n        _anchorOffsetBottom: null,\n\n        _menuWidth: null,\n        _menuHeight: null,\n\n        /**\n         * Constructor\n         */\n        init: function(container, settings) {\n            this.setSettings(settings, Garnish.Menu.defaults);\n\n            this.$container = $(container);\n\n            this.$options = $();\n            this.addOptions(this.$container.find('a'));\n\n            // Menu List\n            this.menuId = 'menu' + this._namespace;\n            this.$menuList = $('ul', this.$container);\n            this.$menuList.attr({\n                'role': 'listbox',\n                'id': this.menuId,\n                'aria-hidden': 'true'\n            });\n\n            // Deprecated\n            if (this.settings.attachToElement) {\n                this.settings.anchor = this.settings.attachToElement;\n                Garnish.log('The \\'attachToElement\\' setting is deprecated. Use \\'anchor\\' instead.');\n            }\n\n            if (this.settings.anchor) {\n                this.$anchor = $(this.settings.anchor);\n            }\n\n            // Prevent clicking on the container from hiding the menu\n            this.addListener(this.$container, 'mousedown', function(ev) {\n                ev.stopPropagation();\n\n                // Prevent this from causing the menu button to blur\n                ev.preventDefault();\n            });\n        },\n\n        addOptions: function($options) {\n            this.$options = this.$options.add($options);\n            $options.data('menu', this);\n\n            $options.each($.proxy(function(optionKey, option) {\n                $(option).attr({\n                    'role': 'option',\n                    'tabindex': '-1',\n                    'id': this.menuId + '-option-' + optionKey\n                });\n            }, this));\n\n            this.addListener($options, 'click', 'selectOption');\n        },\n\n        setPositionRelativeToAnchor: function() {\n            this._windowWidth = Garnish.$win.width();\n            this._windowHeight = Garnish.$win.height();\n            this._windowScrollLeft = Garnish.$win.scrollLeft();\n            this._windowScrollTop = Garnish.$win.scrollTop();\n\n            this._anchorOffset = this.$anchor.offset();\n            this._anchorWidth = this.$anchor.outerWidth();\n            this._anchorHeight = this.$anchor.outerHeight();\n            this._anchorOffsetRight = this._anchorOffset.left + this._anchorHeight;\n            this._anchorOffsetBottom = this._anchorOffset.top + this._anchorHeight;\n\n            this.$container.css('minWidth', 0);\n            this.$container.css('minWidth', this._anchorWidth - (this.$container.outerWidth() - this.$container.width()));\n\n            this._menuWidth = this.$container.outerWidth();\n            this._menuHeight = this.$container.outerHeight();\n\n            // Is there room for the menu below the anchor?\n            var topClearance = this._anchorOffset.top - this._windowScrollTop,\n                bottomClearance = this._windowHeight + this._windowScrollTop - this._anchorOffsetBottom;\n\n            if (bottomClearance >= this._menuHeight || bottomClearance >= topClearance || topClearance < this._menuHeight) {\n                this.$container.css('top', this._anchorOffsetBottom);\n            }\n            else {\n                this.$container.css('top', this._anchorOffset.top - this._menuHeight);\n            }\n\n            // Figure out how we're aliging it\n            var align = this.$container.data('align');\n\n            if (align != 'left' && align != 'center' && align != 'right') {\n                align = 'left';\n            }\n\n            if (align == 'center') {\n                this._alignCenter();\n            }\n            else {\n                // Figure out which options are actually possible\n                var rightClearance = this._windowWidth + this._windowScrollLeft - (this._anchorOffset.left + this._menuWidth),\n                    leftClearance = this._anchorOffsetRight - this._menuWidth;\n\n                if (align == 'right' && leftClearance >= 0 || rightClearance < 0) {\n                    this._alignRight();\n                }\n                else {\n                    this._alignLeft();\n                }\n            }\n\n            delete this._windowWidth;\n            delete this._windowHeight;\n            delete this._windowScrollLeft;\n            delete this._windowScrollTop;\n            delete this._anchorOffset;\n            delete this._anchorWidth;\n            delete this._anchorHeight;\n            delete this._anchorOffsetRight;\n            delete this._anchorOffsetBottom;\n            delete this._menuWidth;\n            delete this._menuHeight;\n        },\n\n        show: function() {\n            // Move the menu to the end of the DOM\n            this.$container.appendTo(Garnish.$bod)\n\n            if (this.$anchor) {\n                this.setPositionRelativeToAnchor();\n            }\n\n            this.$container.velocity('stop');\n            this.$container.css({\n                opacity: 1,\n                display: 'block'\n            });\n\n            this.$menuList.attr('aria-hidden', 'false');\n\n            Garnish.escManager.register(this, 'hide');\n        },\n\n        hide: function() {\n            this.$menuList.attr('aria-hidden', 'true');\n\n            this.$container.velocity('fadeOut', {duration: Garnish.FX_DURATION}, $.proxy(function() {\n                this.$container.detach();\n            }, this));\n\n            Garnish.escManager.unregister(this);\n\n            this.trigger('hide');\n        },\n\n        selectOption: function(ev) {\n            this.settings.onOptionSelect(ev.currentTarget);\n            this.trigger('optionselect', {selectedOption: ev.currentTarget});\n            this.hide();\n        },\n\n        _alignLeft: function() {\n            this.$container.css({\n                left: this._anchorOffset.left,\n                right: 'auto'\n            });\n        },\n\n        _alignRight: function() {\n            this.$container.css({\n                right: this._windowWidth - (this._anchorOffset.left + this._anchorWidth),\n                left: 'auto'\n            });\n        },\n\n        _alignCenter: function() {\n            var left = Math.round((this._anchorOffset.left + this._anchorWidth / 2) - (this._menuWidth / 2));\n\n            if (left < 0) {\n                left = 0;\n            }\n\n            this.$container.css('left', left);\n        }\n\n    },\n    {\n        defaults: {\n            anchor: null,\n            onOptionSelect: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Menu Button\n */\nGarnish.MenuBtn = Garnish.Base.extend(\n    {\n        $btn: null,\n        menu: null,\n        showingMenu: false,\n        disabled: true,\n\n        /**\n         * Constructor\n         */\n        init: function(btn, settings) {\n            this.$btn = $(btn);\n\n            // Is this already a menu button?\n            if (this.$btn.data('menubtn')) {\n                // Grab the old MenuBtn's menu container\n                var $menu = this.$btn.data('menubtn').menu.$container;\n\n                Garnish.log('Double-instantiating a menu button on an element');\n                this.$btn.data('menubtn').destroy();\n            }\n            else {\n                var $menu = this.$btn.next('.menu').detach();\n            }\n\n            this.$btn.data('menubtn', this);\n\n            this.setSettings(settings, Garnish.MenuBtn.defaults);\n\n            this.menu = new Garnish.Menu($menu, {\n                anchor: (this.settings.menuAnchor || this.$btn),\n                onOptionSelect: $.proxy(this, 'onOptionSelect')\n            });\n\n            this.$btn.attr({\n                'tabindex': 0,\n                'role': 'combobox',\n                'aria-owns': this.menu.menuId,\n                'aria-haspopup': 'true',\n                'aria-expanded': 'false',\n            });\n\n            this.menu.on('hide', $.proxy(this, 'onMenuHide'));\n            this.addListener(this.$btn, 'mousedown', 'onMouseDown');\n            this.addListener(this.$btn, 'keydown', 'onKeyDown');\n            this.addListener(this.$btn, 'blur', 'onBlur');\n            this.enable();\n        },\n\n        onBlur: function(ev) {\n            if (this.showingMenu) {\n                this.hideMenu();\n            }\n        },\n\n        onKeyDown: function(ev) {\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n\n                    var $currentOption = this.menu.$options.filter('.hover');\n\n                    if ($currentOption.length > 0) {\n                        $currentOption.get(0).click();\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    ev.preventDefault();\n\n                    if (!this.showingMenu) {\n                        this.showMenu();\n\n                        var $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length > 0) {\n                            $option;\n                        }\n                        else {\n                            $option = this.menu.$options.first();\n                        }\n\n                        this.focusOption($option);\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    var $option;\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, $.proxy(function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index + 1) < this.menu.$options.length) {\n                                        $option = $(this.menu.$options[(index + 1)]);\n                                    }\n                                }\n                            }\n                        }, this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[0]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length == 0) {\n                            $option = this.menu.$options.first();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    var $option;\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, $.proxy(function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index - 1) >= 0) {\n                                        $option = $(this.menu.$options[(index - 1)]);\n                                    }\n                                }\n                            }\n                        }, this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[(this.menu.$options.length - 1)]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length == 0) {\n                            $option = this.menu.$options.last();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n            }\n        },\n\n        focusOption: function($option) {\n            this.menu.$options.removeClass('hover');\n\n            $option.addClass('hover');\n\n            this.menu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n            this.$btn.attr('aria-activedescendant', $option.attr('id'));\n        },\n\n        onMouseDown: function(ev) {\n            if (ev.which != Garnish.PRIMARY_CLICK || Garnish.isCtrlKeyPressed(ev)) {\n                return;\n            }\n\n            ev.preventDefault();\n\n            if (this.showingMenu) {\n                this.hideMenu();\n            }\n            else {\n                this.showMenu();\n            }\n        },\n\n        showMenu: function() {\n            if (this.disabled) {\n                return;\n            }\n\n            this.menu.show();\n            this.$btn.addClass('active');\n            this.$btn.trigger('focus');\n            this.$btn.attr('aria-expanded', 'true');\n\n            this.showingMenu = true;\n\n            setTimeout($.proxy(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'onMouseDown');\n            }, this), 1);\n        },\n\n        hideMenu: function() {\n            this.menu.hide();\n            this.$btn.attr('aria-expanded', 'false');\n        },\n\n        onMenuHide: function() {\n            this.$btn.removeClass('active');\n            this.showingMenu = false;\n\n            this.removeListener(Garnish.$doc, 'mousedown');\n        },\n\n        onOptionSelect: function(option) {\n            this.settings.onOptionSelect(option);\n            this.trigger('optionSelect', {option: option});\n        },\n\n        enable: function() {\n            this.disabled = false;\n        },\n\n        disable: function() {\n            this.disabled = true;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$btn.removeData('menubtn');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuAnchor: null,\n            onOptionSelect: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Mixed input\n *\n * @todo RTL support, in the event that the input doesn't have dir=\"ltr\".\n */\nGarnish.MixedInput = Garnish.Base.extend(\n    {\n        $container: null,\n        elements: null,\n        focussedElement: null,\n        blurTimeout: null,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n            this.setSettings(settings, Garnish.MixedInput.defaults);\n\n            this.elements = [];\n\n            // Allow the container to receive focus\n            this.$container.attr('tabindex', 0);\n            this.addListener(this.$container, 'focus', 'onFocus');\n        },\n\n        getElementIndex: function($elem) {\n            return $.inArray($elem, this.elements);\n        },\n\n        isText: function($elem) {\n            return ($elem.prop('nodeName') == 'INPUT');\n        },\n\n        onFocus: function(ev) {\n            // Set focus to the first element\n            if (this.elements.length) {\n                var $elem = this.elements[0];\n                this.setFocus($elem);\n                this.setCarotPos($elem, 0);\n            }\n            else {\n                this.addTextElement();\n            }\n        },\n\n        addTextElement: function(index) {\n            var text = new TextElement(this);\n            this.addElement(text.$input, index);\n            return text;\n        },\n\n        addElement: function($elem, index) {\n            // Was a target index passed, and is it valid?\n            if (index === undefined) {\n                if (this.focussedElement) {\n                    var focussedElement = this.focussedElement,\n                        focussedElementIndex = this.getElementIndex(focussedElement);\n\n                    // Is the focus on a text element?\n                    if (this.isText(focussedElement)) {\n                        var selectionStart = focussedElement.prop('selectionStart'),\n                            selectionEnd = focussedElement.prop('selectionEnd'),\n                            val = focussedElement.val(),\n                            preVal = val.substring(0, selectionStart),\n                            postVal = val.substr(selectionEnd);\n\n                        if (preVal && postVal) {\n                            // Split the input into two\n                            focussedElement.val(preVal).trigger('change');\n                            var newText = new TextElement(this);\n                            newText.$input.val(postVal).trigger('change');\n                            this.addElement(newText.$input, focussedElementIndex + 1);\n\n                            // Insert the new element in between them\n                            index = focussedElementIndex + 1;\n                        }\n                        else if (!preVal) {\n                            // Insert the new element before this one\n                            index = focussedElementIndex;\n                        }\n                        else {\n                            // Insert it after this one\n                            index = focussedElementIndex + 1;\n                        }\n                    }\n                    else {\n                        // Just insert the new one after this one\n                        index = focussedElementIndex + 1;\n                    }\n                }\n                else {\n                    // Insert the new element at the end\n                    index = this.elements.length;\n                }\n            }\n\n            // Add the element\n            if (this.elements[index] !== undefined) {\n                $elem.insertBefore(this.elements[index]);\n                this.elements.splice(index, 0, $elem);\n            }\n            else {\n                // Just for safe measure, set the index to what it really will be\n                index = this.elements.length;\n\n                this.$container.append($elem);\n                this.elements.push($elem);\n            }\n\n            // Make sure that there are text elements surrounding all non-text elements\n            if (!this.isText($elem)) {\n                // Add a text element before?\n                if (index == 0 || !this.isText(this.elements[index - 1])) {\n                    this.addTextElement(index);\n                    index++;\n                }\n\n                // Add a text element after?\n                if (index == this.elements.length - 1 || !this.isText(this.elements[index + 1])) {\n                    this.addTextElement(index + 1);\n                }\n            }\n\n            // Add event listeners\n            this.addListener($elem, 'click', function() {\n                this.setFocus($elem);\n            });\n\n            // Set focus to the new element\n            setTimeout($.proxy(function() {\n                this.setFocus($elem);\n            }, this), 1);\n        },\n\n        removeElement: function($elem) {\n            var index = this.getElementIndex($elem);\n            if (index != -1) {\n                this.elements.splice(index, 1);\n\n                if (!this.isText($elem)) {\n                    // Combine the two now-adjacent text elements\n                    var $prevElem = this.elements[index - 1],\n                        $nextElem = this.elements[index];\n\n                    if (this.isText($prevElem) && this.isText($nextElem)) {\n                        var prevElemVal = $prevElem.val(),\n                            newVal = prevElemVal + $nextElem.val();\n                        $prevElem.val(newVal).trigger('change');\n                        this.removeElement($nextElem);\n                        this.setFocus($prevElem);\n                        this.setCarotPos($prevElem, prevElemVal.length);\n                    }\n                }\n\n                $elem.remove();\n            }\n        },\n\n        setFocus: function($elem) {\n            this.$container.addClass('focus');\n\n            if (!this.focussedElement) {\n                // Prevent the container from receiving focus\n                // as long as one of its elements has focus\n                this.$container.attr('tabindex', '-1');\n            }\n            else {\n                // Blur the previously-focussed element\n                this.blurFocussedElement();\n            }\n\n            $elem.attr('tabindex', '0');\n            $elem.focus();\n            this.focussedElement = $elem;\n\n            this.addListener($elem, 'blur', function() {\n                this.blurTimeout = setTimeout($.proxy(function() {\n                    if (this.focussedElement == $elem) {\n                        this.blurFocussedElement();\n                        this.focussedElement = null;\n                        this.$container.removeClass('focus');\n\n                        // Get ready for future focus\n                        this.$container.attr('tabindex', '0');\n                    }\n                }, this), 1);\n            });\n        },\n\n        blurFocussedElement: function() {\n            this.removeListener(this.focussedElement, 'blur');\n            this.focussedElement.attr('tabindex', '-1');\n        },\n\n        focusPreviousElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index > 0) {\n                var $elem = this.elements[index - 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the end\n                if (this.isText($elem)) {\n                    var length = $elem.val().length;\n                    this.setCarotPos($elem, length);\n                }\n            }\n        },\n\n        focusNextElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index < this.elements.length - 1) {\n                var $elem = this.elements[index + 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the beginning\n                if (this.isText($elem)) {\n                    this.setCarotPos($elem, 0)\n                }\n            }\n        },\n\n        setCarotPos: function($elem, pos) {\n            $elem.prop('selectionStart', pos);\n            $elem.prop('selectionEnd', pos);\n        }\n\n    });\n\n\nvar TextElement = Garnish.Base.extend({\n\n        parentInput: null,\n        $input: null,\n        $stage: null,\n        val: null,\n        focussed: false,\n        interval: null,\n\n        init: function(parentInput) {\n            this.parentInput = parentInput;\n\n            this.$input = $('<input type=\"text\"/>').appendTo(this.parentInput.$container);\n            this.$input.css('margin-right', (2 - TextElement.padding) + 'px');\n\n            this.setWidth();\n\n            this.addListener(this.$input, 'focus', 'onFocus');\n            this.addListener(this.$input, 'blur', 'onBlur');\n            this.addListener(this.$input, 'keydown', 'onKeyDown');\n            this.addListener(this.$input, 'change', 'checkInput');\n        },\n\n        getIndex: function() {\n            return this.parentInput.getElementIndex(this.$input);\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                position: 'absolute',\n                top: -9999,\n                left: -9999,\n                wordWrap: 'nowrap'\n            });\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getTextWidth: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (val) {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Spaces\n                val = val.replace(/ /g, '&nbsp;');\n            }\n\n            this.$stage.html(val);\n            this.stageWidth = this.$stage.width();\n            return this.stageWidth;\n        },\n\n        onFocus: function() {\n            this.focussed = true;\n            this.interval = setInterval($.proxy(this, 'checkInput'), Garnish.NiceText.interval);\n            this.checkInput();\n        },\n\n        onBlur: function() {\n            this.focussed = false;\n            clearInterval(this.interval);\n            this.checkInput();\n        },\n\n        onKeyDown: function(ev) {\n            setTimeout($.proxy(this, 'checkInput'), 1);\n\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    if (this.$input.prop('selectionStart') == 0 && this.$input.prop('selectionEnd') == 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    if (this.$input.prop('selectionStart') == this.val.length && this.$input.prop('selectionEnd') == this.val.length) {\n                        // Set focus to the next element\n                        this.parentInput.focusNextElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.DELETE_KEY: {\n                    if (this.$input.prop('selectionStart') == 0 && this.$input.prop('selectionEnd') == 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                        ev.preventDefault();\n                    }\n                }\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        setVal: function(val) {\n            this.$input.val(val);\n            this.checkInput();\n        },\n\n        checkInput: function() {\n            // Has the value changed?\n            var changed = (this.val !== this.getVal());\n            if (changed) {\n                this.setWidth();\n                this.onChange();\n            }\n\n            return changed;\n        },\n\n        setWidth: function() {\n            // has the width changed?\n            if (this.stageWidth !== this.getTextWidth(this.val)) {\n                // update the textarea width\n                var width = this.stageWidth + TextElement.padding;\n                this.$input.width(width);\n            }\n        },\n\n        onChange: $.noop\n    },\n    {\n        padding: 20\n    }\n);\n\n/** global: Garnish */\n/**\n * Modal\n */\nGarnish.Modal = Garnish.Base.extend(\n    {\n        $container: null,\n        $shade: null,\n\n        visible: false,\n\n        dragger: null,\n\n        desiredWidth: null,\n        desiredHeight: null,\n        resizeDragger: null,\n        resizeStartWidth: null,\n        resizeStartHeight: null,\n\n        init: function(container, settings) {\n            // Param mapping\n            if (settings === undefined && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n            }\n\n            this.setSettings(settings, Garnish.Modal.defaults);\n\n            // Create the shade\n            this.$shade = $('<div class=\"' + this.settings.shadeClass + '\"/>');\n\n            // If the container is already set, drop the shade below it.\n            if (container) {\n                this.$shade.insertBefore(container);\n            }\n            else {\n                this.$shade.appendTo(Garnish.$bod);\n            }\n\n            if (container) {\n                this.setContainer(container);\n\n                if (this.settings.autoShow) {\n                    this.show();\n                }\n            }\n\n            Garnish.Modal.instances.push(this);\n        },\n\n        setContainer: function(container) {\n            this.$container = $(container);\n\n            // Is this already a modal?\n            if (this.$container.data('modal')) {\n                Garnish.log('Double-instantiating a modal on an element');\n                this.$container.data('modal').destroy();\n            }\n\n            this.$container.data('modal', this);\n\n            if (this.settings.draggable) {\n                this.dragger = new Garnish.DragMove(this.$container, {\n                    handle: (this.settings.dragHandleSelector ? this.$container.find(this.settings.dragHandleSelector) : this.$container)\n                });\n            }\n\n            if (this.settings.resizable) {\n                var $resizeDragHandle = $('<div class=\"resizehandle\"/>').appendTo(this.$container);\n\n                this.resizeDragger = new Garnish.BaseDrag($resizeDragHandle, {\n                    onDragStart: $.proxy(this, '_handleResizeStart'),\n                    onDrag: $.proxy(this, '_handleResize')\n                });\n            }\n\n            this.addListener(this.$container, 'click', function(ev) {\n                ev.stopPropagation();\n            });\n\n            // Show it if we're late to the party\n            if (this.visible) {\n                this.show();\n            }\n        },\n\n        show: function() {\n            // Close other modals as needed\n            if (this.settings.closeOtherModals && Garnish.Modal.visibleModal && Garnish.Modal.visibleModal != this) {\n                Garnish.Modal.visibleModal.hide();\n            }\n\n            if (this.$container) {\n                // Move it to the end of <body> so it gets the highest sub-z-index\n                this.$shade.appendTo(Garnish.$bod);\n                this.$container.appendTo(Garnish.$bod);\n\n                this.$container.show();\n                this.updateSizeAndPosition();\n\n                this.$shade.velocity('fadeIn', {\n                    duration: 50,\n                    complete: $.proxy(function() {\n                        this.$container.velocity('fadeIn', {\n                            complete: $.proxy(function() {\n                                this.updateSizeAndPosition();\n                                this.onFadeIn();\n                            }, this)\n                        });\n                    }, this)\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.addListener(this.$shade, 'click', 'hide');\n                }\n\n                this.addListener(Garnish.$win, 'resize', 'updateSizeAndPosition');\n            }\n\n            this.enable();\n\n            if (this.settings.hideOnEsc) {\n                Garnish.escManager.register(this, 'hide');\n            }\n\n            if (!this.visible) {\n                this.visible = true;\n                Garnish.Modal.visibleModal = this;\n\n                this.trigger('show');\n                this.settings.onShow();\n            }\n        },\n\n        quickShow: function() {\n            this.show();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n        },\n\n        hide: function(ev) {\n            this.disable();\n\n            if (ev) {\n                ev.stopPropagation();\n            }\n\n            if (this.$container) {\n                this.$container.velocity('fadeOut', {duration: Garnish.FX_DURATION});\n                this.$shade.velocity('fadeOut', {\n                    duration: Garnish.FX_DURATION,\n                    complete: $.proxy(this, 'onFadeOut')\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.removeListener(this.$shade, 'click');\n                }\n\n                this.removeListener(Garnish.$win, 'resize');\n            }\n\n            this.visible = false;\n            Garnish.Modal.visibleModal = null;\n\n            if (this.settings.hideOnEsc) {\n                Garnish.escManager.unregister(this);\n            }\n\n            this.trigger('hide');\n            this.settings.onHide();\n        },\n\n        quickHide: function() {\n            this.hide();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.css('opacity', 0).hide();\n\n                this.$shade.velocity('stop');\n                this.$shade.css('opacity', 0).hide();\n            }\n        },\n\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            this.$container.css({\n                'width': (this.desiredWidth ? Math.max(this.desiredWidth, 200) : ''),\n                'height': (this.desiredHeight ? Math.max(this.desiredHeight, 200) : ''),\n                'min-width': '',\n                'min-height': ''\n            });\n\n            // Set the width first so that the height can adjust for the width\n            this.updateSizeAndPosition._windowWidth = Garnish.$win.width();\n            this.updateSizeAndPosition._width = Math.min(this.getWidth(), this.updateSizeAndPosition._windowWidth - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'width': this.updateSizeAndPosition._width,\n                'min-width': this.updateSizeAndPosition._width,\n                'left': Math.round((this.updateSizeAndPosition._windowWidth - this.updateSizeAndPosition._width) / 2)\n            });\n\n            // Now set the height\n            this.updateSizeAndPosition._windowHeight = Garnish.$win.height();\n            this.updateSizeAndPosition._height = Math.min(this.getHeight(), this.updateSizeAndPosition._windowHeight - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'height': this.updateSizeAndPosition._height,\n                'min-height': this.updateSizeAndPosition._height,\n                'top': Math.round((this.updateSizeAndPosition._windowHeight - this.updateSizeAndPosition._height) / 2)\n            });\n\n            this.trigger('updateSizeAndPosition');\n        },\n\n        onFadeIn: function() {\n            this.trigger('fadeIn');\n            this.settings.onFadeIn();\n        },\n\n        onFadeOut: function() {\n            this.trigger('fadeOut');\n            this.settings.onFadeOut();\n        },\n\n        getHeight: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the height of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            this.getHeight._height = this.$container.outerHeight();\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getHeight._height;\n        },\n\n        getWidth: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the width of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            // Chrome might be 1px shy here for some reason\n            this.getWidth._width = this.$container.outerWidth() + 1;\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getWidth._width;\n        },\n\n        _handleResizeStart: function() {\n            this.resizeStartWidth = this.getWidth();\n            this.resizeStartHeight = this.getHeight();\n        },\n\n        _handleResize: function() {\n            if (Garnish.ltr) {\n                this.desiredWidth = this.resizeStartWidth + (this.resizeDragger.mouseDistX * 2);\n            }\n            else {\n                this.desiredWidth = this.resizeStartWidth - (this.resizeDragger.mouseDistX * 2);\n            }\n\n            this.desiredHeight = this.resizeStartHeight + (this.resizeDragger.mouseDistY * 2);\n\n            this.updateSizeAndPosition();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$container) {\n                this.$container.removeData('modal').remove();\n            }\n\n            if (this.dragger) {\n                this.dragger.destroy();\n            }\n\n            if (this.resizeDragger) {\n                this.resizeDragger.destroy();\n            }\n\n            this.base();\n        }\n    },\n    {\n        relativeElemPadding: 8,\n        defaults: {\n            autoShow: true,\n            draggable: false,\n            dragHandleSelector: null,\n            resizable: false,\n            minGutter: 10,\n            onShow: $.noop,\n            onHide: $.noop,\n            onFadeIn: $.noop,\n            onFadeOut: $.noop,\n            closeOtherModals: false,\n            hideOnEsc: true,\n            hideOnShadeClick: true,\n            shadeClass: 'modal-shade'\n        },\n        instances: [],\n        visibleModal: null\n    }\n);\n\n/** global: Garnish */\n/**\n * Nice Text\n */\nGarnish.NiceText = Garnish.Base.extend(\n    {\n        $input: null,\n        $hint: null,\n        $stage: null,\n        $charsLeft: null,\n        autoHeight: null,\n        maxLength: null,\n        showCharsLeft: false,\n        showingHint: false,\n        val: null,\n        inputBoxSizing: 'content-box',\n        width: null,\n        height: null,\n        minHeight: null,\n        initialized: false,\n\n        init: function(input, settings) {\n            this.$input = $(input);\n            this.settings = $.extend({}, Garnish.NiceText.defaults, settings);\n\n            if (this.isVisible()) {\n                this.initialize();\n            }\n            else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n\n        isVisible: function() {\n            return (this.$input.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            this.maxLength = this.$input.attr('maxlength');\n\n            if (this.maxLength) {\n                this.maxLength = parseInt(this.maxLength);\n            }\n\n            if (this.maxLength && (this.settings.showCharsLeft || Garnish.hasAttr(this.$input, 'data-show-chars-left'))) {\n                this.showCharsLeft = true;\n\n                // Remove the maxlength attribute\n                this.$input.removeAttr('maxlength');\n            }\n\n            // Is this already a transparent text input?\n            if (this.$input.data('nicetext')) {\n                Garnish.log('Double-instantiating a transparent text input on an element');\n                this.$input.data('nicetext').destroy();\n            }\n\n            this.$input.data('nicetext', this);\n\n            this.getVal();\n\n            this.autoHeight = (this.settings.autoHeight && this.$input.prop('nodeName') == 'TEXTAREA');\n\n            if (this.autoHeight) {\n                this.minHeight = this.getHeightForValue('');\n                this.updateHeight();\n\n                // Update height when the window resizes\n                this.width = this.$input.width();\n                this.addListener(Garnish.$win, 'resize', 'updateHeightIfWidthChanged');\n            }\n\n            if (this.settings.hint) {\n                this.$hintContainer = $('<div class=\"texthint-container\"/>').insertBefore(this.$input);\n                this.$hint = $('<div class=\"texthint\">' + this.settings.hint + '</div>').appendTo(this.$hintContainer);\n                this.$hint.css({\n                    top: (parseInt(this.$input.css('borderTopWidth')) + parseInt(this.$input.css('paddingTop'))),\n                    left: (parseInt(this.$input.css('borderLeftWidth')) + parseInt(this.$input.css('paddingLeft')) + 1)\n                });\n                Garnish.copyTextStyles(this.$input, this.$hint);\n\n                if (this.val) {\n                    this.$hint.hide();\n                }\n                else {\n                    this.showingHint = true;\n                }\n\n                // Focus the input when clicking on the hint\n                this.addListener(this.$hint, 'mousedown', function(ev) {\n                    ev.preventDefault();\n                    this.$input.focus();\n                });\n            }\n\n            if (this.showCharsLeft) {\n                this.$charsLeft = $('<div class=\"' + this.settings.charsLeftClass + '\"/>').insertAfter(this.$input);\n                this.updateCharsLeft();\n            }\n\n            this.addListener(this.$input, 'textchange', 'onTextChange');\n        },\n\n        initializeIfVisible: function() {\n            if (this.isVisible()) {\n                this.initialize();\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        showHint: function() {\n            this.$hint.velocity('fadeIn', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = true;\n        },\n\n        hideHint: function() {\n            this.$hint.velocity('fadeOut', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = false;\n        },\n\n        onTextChange: function() {\n            this.getVal();\n\n            if (this.$hint) {\n                if (this.showingHint && this.val) {\n                    this.hideHint();\n                }\n                else if (!this.showingHint && !this.val) {\n                    this.showHint();\n                }\n            }\n\n            if (this.autoHeight) {\n                this.updateHeight();\n            }\n\n            if (this.showCharsLeft) {\n                this.updateCharsLeft();\n            }\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                display: 'block',\n                position: 'absolute',\n                top: -9999,\n                left: -9999\n            });\n\n            this.inputBoxSizing = this.$input.css('box-sizing');\n\n            if (this.inputBoxSizing == 'border-box') {\n                this.$stage.css({\n                    'border-top': this.$input.css('border-top'),\n                    'border-right': this.$input.css('border-right'),\n                    'border-bottom': this.$input.css('border-bottom'),\n                    'border-left': this.$input.css('border-left'),\n                    'padding-top': this.$input.css('padding-top'),\n                    'padding-right': this.$input.css('padding-right'),\n                    'padding-bottom': this.$input.css('padding-bottom'),\n                    'padding-left': this.$input.css('padding-left'),\n                    '-webkit-box-sizing': this.inputBoxSizing,\n                    '-moz-box-sizing': this.inputBoxSizing,\n                    'box-sizing': this.inputBoxSizing\n                });\n            }\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getHeightForValue: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (this.inputBoxSizing == 'border-box') {\n                this.$stage.css('width', this.$input.outerWidth());\n            }\n            else {\n                this.$stage.css('width', this.$input.width());\n            }\n\n            if (!val) {\n                val = '&nbsp;';\n                for (var i = 1; i < this.$input.prop('rows'); i++) {\n                    val += '<br/>&nbsp;';\n                }\n            }\n            else {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Multiple spaces\n                val = val.replace(/ {2,}/g, function(spaces) {\n                    // TODO: replace with String.repeat() when more broadly available?\n                    var replace = '';\n                    for (var i = 0; i < spaces.length - 1; i++) {\n                        replace += '&nbsp;';\n                    }\n                    return replace + ' ';\n                });\n\n                // Line breaks\n                val = val.replace(/[\\n\\r]$/g, '<br/>&nbsp;');\n                val = val.replace(/[\\n\\r]/g, '<br/>');\n            }\n\n            this.$stage.html(val);\n\n            if (this.inputBoxSizing == 'border-box') {\n                this.getHeightForValue._height = this.$stage.outerHeight();\n            }\n            else {\n                this.getHeightForValue._height = this.$stage.height();\n            }\n\n            if (this.minHeight && this.getHeightForValue._height < this.minHeight) {\n                this.getHeightForValue._height = this.minHeight;\n            }\n\n            return this.getHeightForValue._height;\n        },\n\n        updateHeight: function() {\n            // has the height changed?\n            if (this.height !== (this.height = this.getHeightForValue(this.val))) {\n                this.$input.css('min-height', this.height);\n\n                if (this.initialized) {\n                    this.onHeightChange();\n                }\n            }\n        },\n\n        updateHeightIfWidthChanged: function() {\n            if (this.isVisible() && this.width !== (this.width = this.$input.width()) && this.width) {\n                this.updateHeight();\n            }\n        },\n\n        onHeightChange: function() {\n            this.settings.onHeightChange();\n        },\n\n        updateCharsLeft: function() {\n            this.updateCharsLeft._charsLeft = this.maxLength - this.val.length;\n            this.$charsLeft.text(this.updateCharsLeft._charsLeft);\n\n            if (this.updateCharsLeft._charsLeft >= 0) {\n                this.$charsLeft.removeClass(this.settings.negativeCharsLeftClass);\n            }\n            else {\n                this.$charsLeft.addClass(this.settings.negativeCharsLeftClass);\n            }\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$input.removeData('nicetext');\n\n            if (this.$hint) {\n                this.$hint.remove();\n            }\n\n            if (this.$stage) {\n                this.$stage.remove();\n            }\n\n            this.base();\n        }\n    },\n    {\n        interval: 100,\n        hintFadeDuration: 50,\n        defaults: {\n            autoHeight: true,\n            showCharsLeft: false,\n            charsLeftClass: 'chars-left',\n            negativeCharsLeftClass: 'negative-chars-left',\n            onHeightChange: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Pill\n */\nGarnish.Pill = Garnish.Base.extend(\n    {\n        $outerContainer: null,\n        $innerContainer: null,\n        $btns: null,\n        $selectedBtn: null,\n        $input: null,\n\n        init: function(outerContainer) {\n            this.$outerContainer = $(outerContainer);\n\n            // Is this already a pill?\n            if (this.$outerContainer.data('pill')) {\n                Garnish.log('Double-instantiating a pill on an element');\n                this.$outerContainer.data('pill').destroy();\n            }\n\n            this.$outerContainer.data('pill', this);\n\n            this.$innerContainer = this.$outerContainer.find('.btngroup:first');\n            this.$btns = this.$innerContainer.find('.btn');\n            this.$selectedBtn = this.$btns.filter('.active:first');\n            this.$input = this.$outerContainer.find('input:first');\n\n            Garnish.preventOutlineOnMouseFocus(this.$innerContainer);\n            this.addListener(this.$btns, 'mousedown', 'onMouseDown');\n            this.addListener(this.$innerContainer, 'keydown', 'onKeyDown');\n        },\n\n        select: function(btn) {\n            this.$selectedBtn.removeClass('active');\n            var $btn = $(btn);\n            $btn.addClass('active');\n            this.$input.val($btn.attr('data-value'));\n            this.$selectedBtn = $btn;\n        },\n\n        selectNext: function() {\n            if (!this.$selectedBtn.length) {\n                this.select(this.$btns[this.$btns.length - 1]);\n            }\n            else {\n                var nextIndex = this._getSelectedBtnIndex() + 1;\n\n                if (this.$btns[nextIndex] !== undefined) {\n                    this.select(this.$btns[nextIndex]);\n                }\n            }\n        },\n\n        selectPrev: function() {\n            if (!this.$selectedBtn.length) {\n                this.select(this.$btns[0]);\n            }\n            else {\n                var prevIndex = this._getSelectedBtnIndex() - 1;\n\n                if (this.$btns[prevIndex] !== undefined) {\n                    this.select(this.$btns[prevIndex]);\n                }\n            }\n        },\n\n        onMouseDown: function(ev) {\n            this.select(ev.currentTarget);\n        },\n\n        _getSelectedBtnIndex: function() {\n            if (this.$selectedBtn[0] !== undefined) {\n                return $.inArray(this.$selectedBtn[0], this.$btns);\n            }\n            else {\n                return -1;\n            }\n        },\n\n        onKeyDown: function(ev) {\n            switch (ev.keyCode) {\n                case Garnish.RIGHT_KEY: {\n                    if (Garnish.ltr) {\n                        this.selectNext();\n                    }\n                    else {\n                        this.selectPrev();\n                    }\n\n                    ev.preventDefault();\n                    break;\n                }\n\n                case Garnish.LEFT_KEY: {\n                    if (Garnish.ltr) {\n                        this.selectPrev();\n                    }\n                    else {\n                        this.selectNext();\n                    }\n\n                    ev.preventDefault();\n                    break;\n                }\n            }\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$outerContainer.removeData('pill');\n            this.base();\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Select\n */\nGarnish.Select = Garnish.Base.extend(\n    {\n        $container: null,\n        $items: null,\n        $selectedItems: null,\n\n        mousedownTarget: null,\n        mouseUpTimeout: null,\n        callbackFrame: null,\n\n        $focusable: null,\n        $first: null,\n        first: null,\n        $last: null,\n        last: null,\n\n        /**\n         * Constructor\n         */\n        init: function(container, items, settings) {\n            this.$container = $(container);\n\n            // Param mapping\n            if (items === undefined && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n                items = null;\n            }\n            else if (settings === undefined && $.isPlainObject(items)) {\n                // (container, settings)\n                settings = items;\n                items = null;\n            }\n\n            // Is this already a select?\n            if (this.$container.data('select')) {\n                Garnish.log('Double-instantiating a select on an element');\n                this.$container.data('select').destroy();\n            }\n\n            this.$container.data('select', this);\n\n            this.setSettings(settings, Garnish.Select.defaults);\n\n            this.$items = $();\n            this.$selectedItems = $();\n\n            this.addItems(items);\n\n            // --------------------------------------------------------------------\n\n            if (this.settings.allowEmpty && !this.settings.checkboxMode) {\n                this.addListener(this.$container, 'click', function(ev) {\n                    if (this.ignoreClick) {\n                        this.ignoreClick = false;\n                    }\n                    else {\n                        // Deselect all items on container click\n                        this.deselectAll(true);\n                    }\n                });\n            }\n        },\n\n        /**\n         * Get Item Index\n         */\n        getItemIndex: function($item) {\n            return this.$items.index($item[0]);\n        },\n\n        /**\n         * Is Selected?\n         */\n        isSelected: function(item) {\n            if (Garnish.isJquery(item)) {\n                if (!item[0]) {\n                    return false;\n                }\n\n                item = item[0];\n            }\n\n            return ($.inArray(item, this.$selectedItems) != -1);\n        },\n\n        /**\n         * Select Item\n         */\n        selectItem: function($item, focus, preventScroll) {\n            if (!this.settings.multi) {\n                this.deselectAll();\n            }\n\n            this.$first = this.$last = $item;\n            this.first = this.last = this.getItemIndex($item);\n\n            if (focus) {\n                this.setFocusableItem($item);\n                this.focusItem($item, preventScroll);\n            }\n\n            this._selectItems($item);\n        },\n\n        selectAll: function() {\n            if (!this.settings.multi || !this.$items.length) {\n                return;\n            }\n\n            this.first = 0;\n            this.last = this.$items.length - 1;\n            this.$first = this.$items.eq(this.first);\n            this.$last = this.$items.eq(this.last);\n\n            this._selectItems(this.$items);\n        },\n\n        /**\n         * Select Range\n         */\n        selectRange: function($item, preventScroll) {\n            if (!this.settings.multi) {\n                return this.selectItem($item, true);\n            }\n\n            this.deselectAll();\n\n            this.$last = $item;\n            this.last = this.getItemIndex($item);\n\n            this.setFocusableItem($item);\n            this.focusItem($item, preventScroll);\n\n            // prepare params for $.slice()\n            if (this.first < this.last) {\n                var sliceFrom = this.first,\n                    sliceTo = this.last + 1;\n            }\n            else {\n                var sliceFrom = this.last,\n                    sliceTo = this.first + 1;\n            }\n\n            this._selectItems(this.$items.slice(sliceFrom, sliceTo));\n        },\n\n        /**\n         * Deselect Item\n         */\n        deselectItem: function($item) {\n            var index = this.getItemIndex($item);\n            if (this.first === index) {\n                this.$first = this.first = null;\n            }\n            if (this.last === index) {\n                this.$last = this.last = null;\n            }\n\n            this._deselectItems($item);\n        },\n\n        /**\n         * Deselect All\n         */\n        deselectAll: function(clearFirst) {\n            if (clearFirst) {\n                this.$first = this.first = this.$last = this.last = null;\n            }\n\n            this._deselectItems(this.$items);\n        },\n\n        /**\n         * Deselect Others\n         */\n        deselectOthers: function($item) {\n            this.deselectAll();\n            this.selectItem($item, true);\n        },\n\n        /**\n         * Toggle Item\n         */\n        toggleItem: function($item, preventScroll) {\n            if (!this.isSelected($item)) {\n                this.selectItem($item, true, preventScroll);\n            }\n            else {\n                if (this._canDeselect($item)) {\n                    this.deselectItem($item, true);\n                }\n            }\n        },\n\n        clearMouseUpTimeout: function() {\n            clearTimeout(this.mouseUpTimeout);\n        },\n\n        getFirstItem: function() {\n            if (this.$items.length) {\n                return this.$items.first();\n            }\n        },\n\n        getLastItem: function() {\n            if (this.$items.length) {\n                return this.$items.last();\n            }\n        },\n\n        isPreviousItem: function(index) {\n            return (index > 0);\n        },\n\n        isNextItem: function(index) {\n            return (index < this.$items.length - 1);\n        },\n\n        getPreviousItem: function(index) {\n            if (this.isPreviousItem(index)) {\n                return this.$items.eq(index - 1);\n            }\n        },\n\n        getNextItem: function(index) {\n            if (this.isNextItem(index)) {\n                return this.$items.eq(index + 1);\n            }\n        },\n\n        getItemToTheLeft: function(index) {\n            var func = (Garnish.ltr ? 'Previous' : 'Next');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '<');\n                }\n            }\n        },\n\n        getItemToTheRight: function(index) {\n            var func = (Garnish.ltr ? 'Next' : 'Previous');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                else if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '>');\n                }\n            }\n        },\n\n        getItemAbove: function(index) {\n            if (this.isPreviousItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getPreviousItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '<');\n                }\n            }\n        },\n\n        getItemBelow: function(index) {\n            if (this.isNextItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getNextItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '>');\n                }\n            }\n        },\n\n        getClosestItem: function(index, axis, dir) {\n            var axisProps = Garnish.Select.closestItemAxisProps[axis],\n                dirProps = Garnish.Select.closestItemDirectionProps[dir];\n\n            var $thisItem = this.$items.eq(index),\n                thisOffset = $thisItem.offset(),\n                thisMidpoint = thisOffset[axisProps.midpointOffset] + Math.round($thisItem[axisProps.midpointSizeFunc]() / 2),\n                otherRowPos = null,\n                smallestMidpointDiff = null,\n                $closestItem = null;\n\n            // Go the other way if this is the X axis and a RTL page\n            if (Garnish.rtl && axis == Garnish.X_AXIS) {\n                var step = dirProps.step * -1;\n            }\n            else {\n                var step = dirProps.step;\n            }\n\n            for (var i = index + step; (this.$items[i] !== undefined); i += step) {\n                var $otherItem = this.$items.eq(i),\n                    otherOffset = $otherItem.offset();\n\n                // Are we on the next row yet?\n                if (dirProps.isNextRow(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    // Is this the first time we've seen this row?\n                    if (otherRowPos === null) {\n                        otherRowPos = otherOffset[axisProps.rowOffset];\n                    }\n                    // Have we gone too far?\n                    else if (otherOffset[axisProps.rowOffset] != otherRowPos) {\n                        break;\n                    }\n\n                    var otherMidpoint = otherOffset[axisProps.midpointOffset] + Math.round($otherItem[axisProps.midpointSizeFunc]() / 2),\n                        midpointDiff = Math.abs(thisMidpoint - otherMidpoint);\n\n                    // Are we getting warmer?\n                    if (smallestMidpointDiff === null || midpointDiff < smallestMidpointDiff) {\n                        smallestMidpointDiff = midpointDiff;\n                        $closestItem = $otherItem;\n                    }\n                    // Getting colder?\n                    else {\n                        break;\n                    }\n                }\n                // Getting colder?\n                else if (dirProps.isWrongDirection(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    break;\n                }\n            }\n\n            return $closestItem;\n        },\n\n        getFurthestItemToTheLeft: function(index) {\n            return this.getFurthestItem(index, 'ToTheLeft');\n        },\n\n        getFurthestItemToTheRight: function(index) {\n            return this.getFurthestItem(index, 'ToTheRight');\n        },\n\n        getFurthestItemAbove: function(index) {\n            return this.getFurthestItem(index, 'Above');\n        },\n\n        getFurthestItemBelow: function(index) {\n            return this.getFurthestItem(index, 'Below');\n        },\n\n        getFurthestItem: function(index, dir) {\n            var $item, $testItem;\n\n            while ($testItem = this['getItem' + dir](index)) {\n                $item = $testItem;\n                index = this.getItemIndex($item);\n            }\n\n            return $item;\n        },\n\n        /**\n         * totalSelected getter\n         */\n        get totalSelected() {\n            return this.getTotalSelected();\n        },\n\n        /**\n         * Get Total Selected\n         */\n        getTotalSelected: function() {\n            return this.$selectedItems.length;\n        },\n\n        /**\n         * Add Items\n         */\n        addItems: function(items) {\n            var $items = $(items);\n\n            for (var i = 0; i < $items.length; i++) {\n                var item = $items[i];\n\n                // Make sure this element doesn't belong to another selector\n                if ($.data(item, 'select')) {\n                    Garnish.log('Element was added to more than one selector');\n                    $.data(item, 'select').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'select', this);\n\n                // Get the handle\n                if (this.settings.handle) {\n                    if (typeof this.settings.handle == 'object') {\n                        var $handle = $(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle == 'string') {\n                        var $handle = $(item).find(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle == 'function') {\n                        var $handle = $(this.settings.handle(item));\n                    }\n                }\n                else {\n                    var $handle = $(item);\n                }\n\n                $.data(item, 'select-handle', $handle);\n                $handle.data('select-item', item);\n\n                this.addListener($handle, 'mousedown', 'onMouseDown');\n                this.addListener($handle, 'mouseup', 'onMouseUp');\n                this.addListener($handle, 'click', function(ev) {\n                    this.ignoreClick = true;\n                });\n\n                this.addListener(item, 'keydown', 'onKeyDown');\n            }\n\n            this.$items = this.$items.add($items);\n            this.updateIndexes();\n        },\n\n        /**\n         * Remove Items\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            var itemsChanged = false,\n                selectionChanged = false;\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index != -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                    itemsChanged = true;\n\n                    var selectedIndex = $.inArray(item, this.$selectedItems);\n                    if (selectedIndex != -1) {\n                        this.$selectedItems.splice(selectedIndex, 1);\n                        selectionChanged = true;\n                    }\n                }\n            }\n\n            if (itemsChanged) {\n                this.updateIndexes();\n\n                if (selectionChanged) {\n                    $(items).removeClass(this.settings.selectedClass);\n                    this.onSelectionChange();\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n            this.$selectedItems = $();\n            this.updateIndexes();\n        },\n\n        /**\n         * Update First/Last indexes\n         */\n        updateIndexes: function() {\n            if (this.first !== null) {\n                this.first = this.getItemIndex(this.$first);\n                this.setFocusableItem(this.$first);\n            }\n            else if (this.$items.length) {\n                this.setFocusableItem($(this.$items[0]));\n            }\n\n            if (this.last !== null) {\n                this.last = this.getItemIndex(this.$last);\n            }\n        },\n\n        /**\n         * Reset Item Order\n         */\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.$selectedItems = $().add(this.$selectedItems);\n            this.updateIndexes();\n        },\n\n        /**\n         * Sets the focusable item.\n         *\n         * We only want to have one focusable item per selection list, so that the user\n         * doesn't have to tab through a million items.\n         *\n         * @param object $item\n         */\n        setFocusableItem: function($item) {\n            if (this.$focusable) {\n                this.$focusable.removeAttr('tabindex');\n            }\n\n            this.$focusable = $item.attr('tabindex', '0');\n        },\n\n        /**\n         * Sets the focus on an item.\n         */\n        focusItem: function($item, preventScroll) {\n            if (preventScroll) {\n                var scrollLeft = Garnish.$doc.scrollLeft(),\n                    scrollTop = Garnish.$doc.scrollTop();\n                $item.focus();\n                window.scrollTo(scrollLeft, scrollTop);\n            }\n            else {\n                $item.focus();\n            }\n        },\n\n        /**\n         * Get Selected Items\n         */\n        getSelectedItems: function() {\n            return this.$selectedItems;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('select');\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Mouse Down\n         */\n        onMouseDown: function(ev) {\n            // ignore right clicks\n            if (ev.which != Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enforce the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            this.mousedownTarget = ev.currentTarget;\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            if (this.first !== null && ev.shiftKey) {\n                // Shift key is consistent for both selection modes\n                this.selectRange($item, true);\n            }\n            else if (this._actAsCheckbox(ev)) {\n                this.toggleItem($item, true);\n            }\n        },\n\n        /**\n         * On Mouse Up\n         */\n        onMouseUp: function(ev) {\n            // ignore right clicks\n            if (ev.which != Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enfore the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            // was this a click?\n            if (\n                !this._actAsCheckbox(ev) && !ev.shiftKey &&\n                ev.currentTarget == this.mousedownTarget\n            ) {\n                // If this is already selected, wait a moment to see if this is a double click before making any rash decisions\n                if (this.isSelected($item)) {\n                    this.clearMouseUpTimeout();\n\n                    this.mouseUpTimeout = setTimeout($.proxy(function() {\n                        this.deselectOthers($item);\n                    }, this), 300);\n                }\n                else {\n                    this.deselectAll();\n                    this.selectItem($item, true, true);\n                }\n            }\n        },\n\n        /**\n         * On Key Down\n         */\n        onKeyDown: function(ev) {\n            // Ignore if the focus isn't on one of our items\n            if (ev.target != ev.currentTarget) {\n                return;\n            }\n\n            var ctrlKey = Garnish.isCtrlKeyPressed(ev);\n\n            if (!this.settings.checkboxMode || !this.$focusable.length) {\n                var anchor = ev.shiftKey ? this.last : this.first;\n            }\n            else {\n                var anchor = $.inArray(this.$focusable[0], this.$items);\n\n                if (anchor == -1) {\n                    anchor = 0;\n                }\n            }\n\n            // Ok, what are we doing here?\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            var $item = this.getLastItem();\n                        }\n                        else {\n                            var $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            var $item = this.getFurthestItemToTheLeft(anchor);\n                        }\n                        else {\n                            var $item = this.getItemToTheLeft(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            var $item = this.getFirstItem();\n                        }\n                        else {\n                            var $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            var $item = this.getFurthestItemToTheRight(anchor);\n                        }\n                        else {\n                            var $item = this.getItemToTheRight(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            var $item = this.$focusable.prev();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            var $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            var $item = this.getFurthestItemAbove(anchor);\n                        }\n                        else {\n                            var $item = this.getItemAbove(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getFirstItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            var $item = this.$focusable.next();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            var $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            var $item = this.getFurthestItemBelow(anchor);\n                        }\n                        else {\n                            var $item = this.getItemBelow(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getLastItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    if (!ctrlKey) {\n                        ev.preventDefault();\n\n                        if (this.isSelected(this.$focusable)) {\n                            if (this._canDeselect(this.$focusable)) {\n                                this.deselectItem(this.$focusable);\n                            }\n                        }\n                        else {\n                            this.selectItem(this.$focusable, true);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.A_KEY: {\n                    if (ctrlKey) {\n                        ev.preventDefault();\n                        this.selectAll();\n                    }\n\n                    break;\n                }\n            }\n\n            // Is there an item queued up for focus/selection?\n            if ($item && $item.length) {\n                if (!this.settings.checkboxMode) {\n                    // select it\n                    if (this.first !== null && ev.shiftKey) {\n                        this.selectRange($item);\n                    }\n                    else {\n                        this.deselectAll();\n                        this.selectItem($item, true);\n                    }\n                }\n                else {\n                    // just set the new item to be focussable\n                    this.setFocusableItem($item);\n                    $item.focus();\n                }\n            }\n        },\n\n        /**\n         * Set Callback Timeout\n         */\n        onSelectionChange: function() {\n            if (this.callbackFrame) {\n                Garnish.cancelAnimationFrame(this.callbackFrame);\n                this.callbackFrame = null;\n            }\n\n            this.callbackFrame = Garnish.requestAnimationFrame($.proxy(function() {\n                this.callbackFrame = null;\n                this.trigger('selectionChange');\n                this.settings.onSelectionChange();\n            }, this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _actAsCheckbox: function(ev) {\n            if (Garnish.isCtrlKeyPressed(ev)) {\n                return !this.settings.checkboxMode;\n            }\n            else {\n                return this.settings.checkboxMode;\n            }\n        },\n\n        _canDeselect: function($items) {\n            return (this.settings.allowEmpty || this.totalSelected > $items.length);\n        },\n\n        _selectItems: function($items) {\n            $items.addClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.add($items);\n            this.onSelectionChange();\n        },\n\n        _deselectItems: function($items) {\n            $items.removeClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.not($items);\n            this.onSelectionChange();\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            var $handle = $.data(item, 'select-handle');\n\n            if ($handle) {\n                $handle.removeData('select-item');\n                this.removeAllListeners($handle);\n            }\n\n            $.removeData(item, 'select');\n            $.removeData(item, 'select-handle');\n        }\n    },\n    {\n        defaults: {\n            selectedClass: 'sel',\n            multi: false,\n            allowEmpty: true,\n            vertical: false,\n            horizontal: false,\n            handle: null,\n            filter: null,\n            checkboxMode: false,\n            onSelectionChange: $.noop\n        },\n\n        closestItemAxisProps: {\n            x: {\n                midpointOffset: 'top',\n                midpointSizeFunc: 'outerHeight',\n                rowOffset: 'left'\n            },\n            y: {\n                midpointOffset: 'left',\n                midpointSizeFunc: 'outerWidth',\n                rowOffset: 'top'\n            }\n        },\n\n        closestItemDirectionProps: {\n            '<': {\n                step: -1,\n                isNextRow: function(a, b) {\n                    return (a < b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a > b);\n                }\n            },\n            '>': {\n                step: 1,\n                isNextRow: function(a, b) {\n                    return (a > b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a < b);\n                }\n            }\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Select Menu\n */\nGarnish.SelectMenu = Garnish.Menu.extend(\n    {\n        /**\n         * Constructor\n         */\n        init: function(btn, options, settings, callback) {\n            // argument mapping\n            if (typeof settings == 'function') {\n                // (btn, options, callback)\n                callback = settings;\n                settings = {};\n            }\n\n            settings = $.extend({}, Garnish.SelectMenu.defaults, settings);\n\n            this.base(btn, options, settings, callback);\n\n            this.selected = -1;\n        },\n\n        /**\n         * Build\n         */\n        build: function() {\n            this.base();\n\n            if (this.selected != -1) {\n                this._addSelectedOptionClass(this.selected);\n            }\n        },\n\n        /**\n         * Select\n         */\n        select: function(option) {\n            // ignore if it's already selected\n            if (option == this.selected) {\n                return;\n            }\n\n            if (this.dom.ul) {\n                if (this.selected != -1) {\n                    this.dom.options[this.selected].className = '';\n                }\n\n                this._addSelectedOptionClass(option);\n            }\n\n            this.selected = option;\n\n            // set the button text to the selected option\n            this.setBtnText($(this.options[option].label).text());\n\n            this.base(option);\n        },\n\n        /**\n         * Add Selected Option Class\n         */\n        _addSelectedOptionClass: function(option) {\n            this.dom.options[option].className = 'sel';\n        },\n\n        /**\n         * Set Button Text\n         */\n        setBtnText: function(text) {\n            this.dom.$btnLabel.text(text);\n        }\n\n    },\n    {\n        defaults: {\n            ulClass: 'menu select'\n        }\n    }\n);\n\n})(jQuery);\n"]}