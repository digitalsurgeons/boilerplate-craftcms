"use strict";function FlatpickrInstance(e,t){function n(){ve.element=ve.input=e,ve.instanceConfig=t||{},ve.parseDate=FlatpickrInstance.prototype.parseDate.bind(ve),ve.formatDate=FlatpickrInstance.prototype.formatDate.bind(ve),X(),B(),J(),ee(),Z(),Q(),ve.isOpen=!1,ve.isMobile=!ve.config.disableMobile&&!ve.config.inline&&"single"===ve.config.mode&&!ve.config.disable.length&&!ve.config.enable.length&&!ve.config.weekNumbers&&/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),ve.isMobile||C(),u(),(ve.selectedDates.length||ve.config.noCalendar)&&(ve.config.enableTime&&o(ve.config.noCalendar?ve.latestSelectedDateObj||ve.config.minDate:null),ce(!1)),ve.showTimeInput=ve.selectedDates.length>0||ve.config.noCalendar,ve.config.weekNumbers&&(ve.calendarContainer.style.width=ve.daysContainer.offsetWidth+ve.weekWrapper.offsetWidth+"px"),ve.isMobile||K(),ae("Ready")}function a(e){return e.bind(ve)}function i(e){ve.config.noCalendar&&!ve.selectedDates.length&&(ve.selectedDates=[ve.now]),De(e),ve.selectedDates.length&&(!ve.minDateHasTime||"input"!==e.type||e.target.value.length>=2?(r(),ce()):setTimeout(function(){r(),ce()},1e3))}function r(){if(ve.config.enableTime){var e=(parseInt(ve.hourElement.value,10)||0)%(ve.amPM?12:24),t=(parseInt(ve.minuteElement.value,10)||0)%60,n=ve.config.enableSeconds?(parseInt(ve.secondElement.value,10)||0)%60:0;void 0!==ve.amPM&&(e=e%12+12*("PM"===ve.amPM.textContent)),ve.minDateHasTime&&0===he(ve.latestSelectedDateObj,ve.config.minDate)&&(e=Math.max(e,ve.config.minDate.getHours()),e===ve.config.minDate.getHours()&&(t=Math.max(t,ve.config.minDate.getMinutes()))),ve.maxDateHasTime&&0===he(ve.latestSelectedDateObj,ve.config.maxDate)&&(e=Math.min(e,ve.config.maxDate.getHours()),e===ve.config.maxDate.getHours()&&(t=Math.min(t,ve.config.maxDate.getMinutes()))),l(e,t,n)}}function o(e){var t=e||ve.latestSelectedDateObj;t&&l(t.getHours(),t.getMinutes(),t.getSeconds())}function l(e,t,n){ve.selectedDates.length&&ve.latestSelectedDateObj.setHours(e%24,t,n||0,0),ve.config.enableTime&&!ve.isMobile&&(ve.hourElement.value=ve.pad(ve.config.time_24hr?e:(12+e)%12+12*(e%12===0)),ve.minuteElement.value=ve.pad(t),ve.config.time_24hr||(ve.amPM.textContent=e>=12?"PM":"AM"),ve.config.enableSeconds===!0&&(ve.secondElement.value=ve.pad(n)))}function c(e){var t=e.target.value;e.delta&&(t=(parseInt(t)+e.delta).toString()),4!==t.length&&"Enter"!==e.key||(ve.currentYearElement.blur(),/[^\d]/.test(t)||A(t))}function s(e,t,n){return t instanceof Array?t.forEach(function(t){return s(e,t,n)}):e instanceof Array?e.forEach(function(e){return s(e,t,n)}):(e.addEventListener(t,n),void ve._handlers.push({element:e,event:t,handler:n}))}function d(e){return function(t){return 1===t.which&&e(t)}}function u(){if(ve._handlers=[],ve._animationLoop=[],ve.config.wrap&&["open","close","toggle","clear"].forEach(function(e){Array.prototype.forEach.call(ve.element.querySelectorAll("[data-"+e+"]"),function(t){return s(t,"mousedown",d(ve[e]))})}),ve.isMobile)return te();if(ve.debouncedResize=pe(H,50),ve.triggerChange=function(){ae("Change")},ve.debouncedChange=pe(ve.triggerChange,300),"range"===ve.config.mode&&ve.daysContainer&&s(ve.daysContainer,"mouseover",function(e){return j(e.target)}),s(window.document.body,"keydown",P),ve.config["static"]||s(ve._input,"keydown",P),ve.config.inline||ve.config["static"]||s(window,"resize",ve.debouncedResize),void 0!==window.ontouchstart&&s(window.document,"touchstart",O),s(window.document,"mousedown",d(O)),s(ve._input,"blur",O),ve.config.clickOpens===!0&&(s(ve._input,"focus",ve.open),s(ve._input,"mousedown",d(ve.open))),ve.config.noCalendar||(ve.monthNav.addEventListener("wheel",function(e){return e.preventDefault()}),s(ve.monthNav,"wheel",pe(de,10)),s(ve.monthNav,"mousedown",d(ue)),s(ve.monthNav,["keyup","increment"],c),s(ve.daysContainer,"mousedown",d($)),ve.config.animate&&(s(ve.daysContainer,["webkitAnimationEnd","animationend"],m),s(ve.monthNav,["webkitAnimationEnd","animationend"],g))),ve.config.enableTime){var e=function(e){return e.target.select()};s(ve.timeContainer,["wheel","input","increment"],i),s(ve.timeContainer,"mousedown",d(h)),s(ve.timeContainer,["wheel","increment"],ve.debouncedChange),s(ve.timeContainer,"input",ve.triggerChange),s([ve.hourElement,ve.minuteElement],"focus",e),void 0!==ve.secondElement&&s(ve.secondElement,"focus",function(){return ve.secondElement.select()}),void 0!==ve.amPM&&s(ve.amPM,"mousedown",d(function(e){i(e),ve.triggerChange(e)}))}}function f(){for(var e=ve._animationLoop.length;e--;)ve._animationLoop[e](),ve._animationLoop.splice(e,1)}function m(e){if(ve.daysContainer.childNodes.length>1)switch(e.animationName){case"fpSlideLeft":ve.daysContainer.lastChild.classList.remove("slideLeftNew"),ve.daysContainer.removeChild(ve.daysContainer.firstChild),ve.days=ve.daysContainer.firstChild,f();break;case"fpSlideRight":ve.daysContainer.firstChild.classList.remove("slideRightNew"),ve.daysContainer.removeChild(ve.daysContainer.lastChild),ve.days=ve.daysContainer.firstChild,f()}}function g(e){switch(e.animationName){case"fpSlideLeftNew":case"fpSlideRightNew":ve.navigationCurrentMonth.classList.remove("slideLeftNew"),ve.navigationCurrentMonth.classList.remove("slideRightNew");for(var t=ve.navigationCurrentMonth;t.nextSibling&&/curr/.test(t.nextSibling.className);)ve.monthNav.removeChild(t.nextSibling);for(;t.previousSibling&&/curr/.test(t.previousSibling.className);)ve.monthNav.removeChild(t.previousSibling);ve.oldCurMonth=null}}function p(e){e=e?ve.parseDate(e):ve.latestSelectedDateObj||(ve.config.minDate>ve.now?ve.config.minDate:ve.config.maxDate&&ve.config.maxDate<ve.now?ve.config.maxDate:ve.now);try{ve.currentYear=e.getFullYear(),ve.currentMonth=e.getMonth()}catch(t){console.error(t.stack),console.warn("Invalid date supplied: "+e)}ve.redraw()}function h(e){~e.target.className.indexOf("arrow")&&D(e,e.target.classList.contains("arrowUp")?1:-1)}function D(e,t,n){var a=n||e.target.parentNode.childNodes[0],i=ie("increment");i.delta=t,a.dispatchEvent(i)}function v(e){var t=fe("div","numInputWrapper"),n=fe("input","numInput "+e),a=fe("span","arrowUp"),i=fe("span","arrowDown");return n.type="text",n.pattern="\\d*",t.appendChild(n),t.appendChild(a),t.appendChild(i),t}function C(){var e=window.document.createDocumentFragment();ve.calendarContainer=fe("div","flatpickr-calendar"),ve.calendarContainer.tabIndex=-1,ve.config.noCalendar||(e.appendChild(x()),ve.innerContainer=fe("div","flatpickr-innerContainer"),ve.config.weekNumbers&&ve.innerContainer.appendChild(T()),ve.rContainer=fe("div","flatpickr-rContainer"),ve.rContainer.appendChild(N()),ve.daysContainer||(ve.daysContainer=fe("div","flatpickr-days"),ve.daysContainer.tabIndex=-1),y(),ve.rContainer.appendChild(ve.daysContainer),ve.innerContainer.appendChild(ve.rContainer),e.appendChild(ve.innerContainer)),ve.config.enableTime&&e.appendChild(E()),ge(ve.calendarContainer,"rangeMode","range"===ve.config.mode),ge(ve.calendarContainer,"animate",ve.config.animate),ve.calendarContainer.appendChild(e);var t=ve.config.appendTo&&ve.config.appendTo.nodeType;if(ve.config.inline||ve.config["static"]){if(ve.calendarContainer.classList.add(ve.config.inline?"inline":"static"),ve.config.inline&&!t)return ve.element.parentNode.insertBefore(ve.calendarContainer,ve._input.nextSibling);if(ve.config["static"]){var n=fe("div","flatpickr-wrapper");return ve.element.parentNode.insertBefore(n,ve.element),n.appendChild(ve.element),ve.altInput&&n.appendChild(ve.altInput),void n.appendChild(ve.calendarContainer)}}(t?ve.config.appendTo:window.document.body).appendChild(ve.calendarContainer)}function w(e,t,n,a){var i=L(t,!0),r=fe("span","flatpickr-day "+e,t.getDate());return r.dateObj=t,r.$i=a,r.setAttribute("aria-label",ve.formatDate(t,ve.config.ariaDateFormat)),0===he(t,ve.now)&&(ve.todayDateElem=r,r.classList.add("today")),i?(r.tabIndex=-1,re(t)&&(r.classList.add("selected"),ve.selectedDateElem=r,"range"===ve.config.mode&&(ge(r,"startRange",0===he(t,ve.selectedDates[0])),ge(r,"endRange",0===he(t,ve.selectedDates[1]))))):(r.classList.add("disabled"),ve.selectedDates[0]&&t>ve.minRangeDate&&t<ve.selectedDates[0]?ve.minRangeDate=t:ve.selectedDates[0]&&t<ve.maxRangeDate&&t>ve.selectedDates[0]&&(ve.maxRangeDate=t)),"range"===ve.config.mode&&(oe(t)&&!re(t)&&r.classList.add("inRange"),1===ve.selectedDates.length&&(t<ve.minRangeDate||t>ve.maxRangeDate)&&r.classList.add("notAllowed")),ve.config.weekNumbers&&"prevMonthDay"!==e&&n%7===1&&ve.weekNumbers.insertAdjacentHTML("beforeend","<span class='disabled flatpickr-day'>"+ve.config.getWeek(t)+"</span>"),ae("DayCreate",r),r}function b(e,t){var n=e+t||0,a=void 0!==e?ve.days.childNodes[n]:ve.selectedDateElem||ve.todayDateElem||ve.days.childNodes[0],i=function(){a=a||ve.days.childNodes[n],a.focus(),"range"===ve.config.mode&&j(a)};return void 0===a&&0!==t?(t>0?(ve.changeMonth(1),n%=42):t<0&&(ve.changeMonth(-1),n+=42),M(i)):void i()}function M(e){return ve.config.animate===!0?ve._animationLoop.push(e):void e()}function y(e){var t=(new Date(ve.currentYear,ve.currentMonth,1).getDay()-ve.l10n.firstDayOfWeek+7)%7,n="range"===ve.config.mode;ve.prevMonthDays=ve.utils.getDaysinMonth((ve.currentMonth-1+12)%12),ve.selectedDateElem=void 0,ve.todayDateElem=void 0;var a=ve.utils.getDaysinMonth(),i=window.document.createDocumentFragment(),r=ve.prevMonthDays+1-t,o=0;for(ve.config.weekNumbers&&ve.weekNumbers.firstChild&&(ve.weekNumbers.textContent=""),n&&(ve.minRangeDate=new Date(ve.currentYear,ve.currentMonth-1,r),ve.maxRangeDate=new Date(ve.currentYear,ve.currentMonth+1,(42-t)%a));r<=ve.prevMonthDays;r++,o++)i.appendChild(w("prevMonthDay",new Date(ve.currentYear,ve.currentMonth-1,r),r,o));for(r=1;r<=a;r++,o++)i.appendChild(w("",new Date(ve.currentYear,ve.currentMonth,r),r,o));for(var l=a+1;l<=42-t;l++,o++)i.appendChild(w("nextMonthDay",new Date(ve.currentYear,ve.currentMonth+1,l%a),l,o));n&&1===ve.selectedDates.length&&i.childNodes[0]?(ve._hidePrevMonthArrow=ve._hidePrevMonthArrow||ve.minRangeDate>i.childNodes[0].dateObj,ve._hideNextMonthArrow=ve._hideNextMonthArrow||ve.maxRangeDate<new Date(ve.currentYear,ve.currentMonth+1,1)):le();var c=fe("div","dayContainer");if(c.appendChild(i),ve.config.animate&&void 0!==e)for(;ve.daysContainer.childNodes.length>1;)ve.daysContainer.removeChild(ve.daysContainer.firstChild);else k(ve.daysContainer);return e>=0?ve.daysContainer.appendChild(c):ve.daysContainer.insertBefore(c,ve.daysContainer.firstChild),ve.days=ve.daysContainer.firstChild,ve.daysContainer}function k(e){for(;e.firstChild;)e.removeChild(e.firstChild)}function x(){var e=window.document.createDocumentFragment();ve.monthNav=fe("div","flatpickr-month"),ve.prevMonthNav=fe("span","flatpickr-prev-month"),ve.prevMonthNav.innerHTML=ve.config.prevArrow,ve.currentMonthElement=fe("span","cur-month"),ve.currentMonthElement.title=ve.l10n.scrollTitle;var t=v("cur-year");return ve.currentYearElement=t.childNodes[0],ve.currentYearElement.title=ve.l10n.scrollTitle,ve.config.minDate&&(ve.currentYearElement.min=ve.config.minDate.getFullYear()),ve.config.maxDate&&(ve.currentYearElement.max=ve.config.maxDate.getFullYear(),ve.currentYearElement.disabled=ve.config.minDate&&ve.config.minDate.getFullYear()===ve.config.maxDate.getFullYear()),ve.nextMonthNav=fe("span","flatpickr-next-month"),ve.nextMonthNav.innerHTML=ve.config.nextArrow,ve.navigationCurrentMonth=fe("span","flatpickr-current-month"),ve.navigationCurrentMonth.appendChild(ve.currentMonthElement),ve.navigationCurrentMonth.appendChild(t),e.appendChild(ve.prevMonthNav),e.appendChild(ve.navigationCurrentMonth),e.appendChild(ve.nextMonthNav),ve.monthNav.appendChild(e),Object.defineProperty(ve,"_hidePrevMonthArrow",{get:function(){return this.__hidePrevMonthArrow},set:function(e){this.__hidePrevMonthArrow!==e&&(ve.prevMonthNav.style.display=e?"none":"block"),this.__hidePrevMonthArrow=e}}),Object.defineProperty(ve,"_hideNextMonthArrow",{get:function(){return this.__hideNextMonthArrow},set:function(e){this.__hideNextMonthArrow!==e&&(ve.nextMonthNav.style.display=e?"none":"block"),this.__hideNextMonthArrow=e}}),le(),ve.monthNav}function E(){ve.calendarContainer.classList.add("hasTime"),ve.config.noCalendar&&ve.calendarContainer.classList.add("noCalendar"),ve.timeContainer=fe("div","flatpickr-time"),ve.timeContainer.tabIndex=-1;var e=fe("span","flatpickr-time-separator",":"),t=v("flatpickr-hour");ve.hourElement=t.childNodes[0];var n=v("flatpickr-minute");if(ve.minuteElement=n.childNodes[0],ve.hourElement.tabIndex=ve.minuteElement.tabIndex=-1,ve.hourElement.value=ve.pad(ve.latestSelectedDateObj?ve.latestSelectedDateObj.getHours():ve.config.defaultHour),ve.minuteElement.value=ve.pad(ve.latestSelectedDateObj?ve.latestSelectedDateObj.getMinutes():ve.config.defaultMinute),ve.hourElement.step=ve.config.hourIncrement,ve.minuteElement.step=ve.config.minuteIncrement,ve.hourElement.min=ve.config.time_24hr?0:1,ve.hourElement.max=ve.config.time_24hr?23:12,ve.minuteElement.min=0,ve.minuteElement.max=59,ve.hourElement.title=ve.minuteElement.title=ve.l10n.scrollTitle,ve.timeContainer.appendChild(t),ve.timeContainer.appendChild(e),ve.timeContainer.appendChild(n),ve.config.time_24hr&&ve.timeContainer.classList.add("time24hr"),ve.config.enableSeconds){ve.timeContainer.classList.add("hasSeconds");var a=v("flatpickr-second");ve.secondElement=a.childNodes[0],ve.secondElement.value=ve.latestSelectedDateObj?ve.pad(ve.latestSelectedDateObj.getSeconds()):"00",ve.secondElement.step=ve.minuteElement.step,ve.secondElement.min=ve.minuteElement.min,ve.secondElement.max=ve.minuteElement.max,ve.timeContainer.appendChild(fe("span","flatpickr-time-separator",":")),ve.timeContainer.appendChild(a)}return ve.config.time_24hr||(ve.amPM=fe("span","flatpickr-am-pm",["AM","PM"][ve.hourElement.value>11|0]),ve.amPM.title=ve.l10n.toggleTitle,ve.amPM.tabIndex=-1,ve.timeContainer.appendChild(ve.amPM)),ve.timeContainer}function N(){ve.weekdayContainer||(ve.weekdayContainer=fe("div","flatpickr-weekdays"));var e=ve.l10n.firstDayOfWeek,t=ve.l10n.weekdays.shorthand.slice();return e>0&&e<t.length&&(t=[].concat(t.splice(e,t.length),t.splice(0,e))),ve.weekdayContainer.innerHTML="\n\t\t<span class=flatpickr-weekday>\n\t\t\t"+t.join("</span><span class=flatpickr-weekday>")+"\n\t\t</span>\n\t\t",ve.weekdayContainer}function T(){return ve.calendarContainer.classList.add("hasWeeks"),ve.weekWrapper=fe("div","flatpickr-weekwrapper"),ve.weekWrapper.appendChild(fe("span","flatpickr-weekday",ve.l10n.weekAbbreviation)),ve.weekNumbers=fe("div","flatpickr-weeks"),ve.weekWrapper.appendChild(ve.weekNumbers),ve.weekWrapper}function _(e,t,n){t=void 0===t||t;var a=t?e:e-ve.currentMonth,i=!ve.config.animate||n===!1;if(!(a<0&&ve._hidePrevMonthArrow||a>0&&ve._hideNextMonthArrow)){if(ve.currentMonth+=a,(ve.currentMonth<0||ve.currentMonth>11)&&(ve.currentYear+=ve.currentMonth>11?1:-1,ve.currentMonth=(ve.currentMonth+12)%12,ae("YearChange")),y(i?void 0:a),i)return ae("MonthChange"),le();var r=ve.navigationCurrentMonth;if(a<0)for(;r.nextSibling&&/curr/.test(r.nextSibling.className);)ve.monthNav.removeChild(r.nextSibling);else if(a>0)for(;r.previousSibling&&/curr/.test(r.previousSibling.className);)ve.monthNav.removeChild(r.previousSibling);if(ve.oldCurMonth=ve.navigationCurrentMonth,ve.navigationCurrentMonth=ve.monthNav.insertBefore(ve.oldCurMonth.cloneNode(!0),a>0?ve.oldCurMonth.nextSibling:ve.oldCurMonth),a>0?(ve.daysContainer.firstChild.classList.add("slideLeft"),ve.daysContainer.lastChild.classList.add("slideLeftNew"),ve.oldCurMonth.classList.add("slideLeft"),ve.navigationCurrentMonth.classList.add("slideLeftNew")):a<0&&(ve.daysContainer.firstChild.classList.add("slideRightNew"),ve.daysContainer.lastChild.classList.add("slideRight"),ve.oldCurMonth.classList.add("slideRight"),ve.navigationCurrentMonth.classList.add("slideRightNew")),ve.currentMonthElement=ve.navigationCurrentMonth.firstChild,ve.currentYearElement=ve.navigationCurrentMonth.lastChild.childNodes[0],le(),ve.oldCurMonth.firstChild.textContent=ve.utils.monthToStr(ve.currentMonth-a),ae("MonthChange"),document.activeElement&&document.activeElement.$i){var o=document.activeElement.$i;M(function(){b(o,0)})}}}function I(e){ve.input.value="",ve.altInput&&(ve.altInput.value=""),ve.mobileInput&&(ve.mobileInput.value=""),ve.selectedDates=[],ve.latestSelectedDateObj=void 0,ve.showTimeInput=!1,ve.redraw(),e!==!1&&ae("Change")}function S(){ve.isOpen=!1,ve.isMobile||(ve.calendarContainer.classList.remove("open"),ve._input.classList.remove("active")),ae("Close")}function F(){void 0!==ve.config&&ae("Destroy");for(var e=ve._handlers.length;e--;){var t=ve._handlers[e];t.element.removeEventListener(t.event,t.handler)}ve._handlers=[],ve.mobileInput?(ve.mobileInput.parentNode&&ve.mobileInput.parentNode.removeChild(ve.mobileInput),ve.mobileInput=null):ve.calendarContainer&&ve.calendarContainer.parentNode&&ve.calendarContainer.parentNode.removeChild(ve.calendarContainer),ve.altInput&&(ve.input.type="text",ve.altInput.parentNode&&ve.altInput.parentNode.removeChild(ve.altInput),delete ve.altInput),ve.input&&(ve.input.type=ve.input._type,ve.input.classList.remove("flatpickr-input"),ve.input.removeAttribute("readonly"),ve.input.value=""),["_showTimeInput","latestSelectedDateObj","_hideNextMonthArrow","_hidePrevMonthArrow","__hideNextMonthArrow","__hidePrevMonthArrow","isMobile","isOpen","selectedDateElem","minDateHasTime","maxDateHasTime","days","daysContainer","_input","_positionElement","innerContainer","rContainer","monthNav","todayDateElem","calendarContainer","weekdayContainer","prevMonthNav","nextMonthNav","currentMonthElement","currentYearElement","navigationCurrentMonth","selectedDateElem","config"].forEach(function(e){try{delete ve[e]}catch(t){}})}function Y(e){return!(!ve.config.appendTo||!ve.config.appendTo.contains(e))||ve.calendarContainer.contains(e)}function O(e){if(ve.isOpen&&!ve.config.inline){var t=Y(e.target),n=e.target===ve.input||e.target===ve.altInput||ve.element.contains(e.target)||e.path&&e.path.indexOf&&(~e.path.indexOf(ve.input)||~e.path.indexOf(ve.altInput)),a="blur"===e.type?n&&e.relatedTarget&&!Y(e.relatedTarget):!n&&!t;a&&ve.config.ignoredFocusElements.indexOf(e.target)===-1&&(ve.close(),"range"===ve.config.mode&&1===ve.selectedDates.length&&(ve.clear(!1),ve.redraw()))}}function A(e){if(!(!e||ve.currentYearElement.min&&e<ve.currentYearElement.min||ve.currentYearElement.max&&e>ve.currentYearElement.max)){var t=parseInt(e,10),n=ve.currentYear!==t;ve.currentYear=t||ve.currentYear,ve.config.maxDate&&ve.currentYear===ve.config.maxDate.getFullYear()?ve.currentMonth=Math.min(ve.config.maxDate.getMonth(),ve.currentMonth):ve.config.minDate&&ve.currentYear===ve.config.minDate.getFullYear()&&(ve.currentMonth=Math.max(ve.config.minDate.getMonth(),ve.currentMonth)),n&&(ve.redraw(),ae("YearChange"))}}function L(e,t){if(ve.config.minDate&&he(e,ve.config.minDate,void 0!==t?t:!ve.minDateHasTime)<0||ve.config.maxDate&&he(e,ve.config.maxDate,void 0!==t?t:!ve.maxDateHasTime)>0)return!1;if(!ve.config.enable.length&&!ve.config.disable.length)return!0;for(var n,a=ve.parseDate(e,null,!0),i=ve.config.enable.length>0,r=i?ve.config.enable:ve.config.disable,o=0;o<r.length;o++){if(n=r[o],n instanceof Function&&n(a))return i;if(n instanceof Date&&n.getTime()===a.getTime())return i;if("string"==typeof n&&ve.parseDate(n,null,!0).getTime()===a.getTime())return i;if("object"===("undefined"==typeof n?"undefined":_typeof(n))&&n.from&&n.to&&a>=n.from&&a<=n.to)return i}return!i}function P(e){var t=e.target===ve._input,n=Y(e.target),a=ve.config.allowInput,o=ve.isOpen&&(!a||!t),l=ve.config.inline&&t&&!a;if("Enter"===e.key&&a&&t)return ve.setDate(ve._input.value,!0,e.target===ve.altInput?ve.config.altFormat:ve.config.dateFormat),e.target.blur();if(n||o||l){var c=ve.timeContainer&&ve.timeContainer.contains(e.target);switch(e.key){case"Enter":c?ce():$(e);break;case"Escape":e.preventDefault(),ve.close();break;case"ArrowLeft":case"ArrowRight":if(!c)if(e.preventDefault(),ve.daysContainer){var s="ArrowRight"===e.key?1:-1;e.ctrlKey?_(s,!0):b(e.target.$i,s)}else ve.config.enableTime&&!c&&ve.hourElement.focus();break;case"ArrowUp":case"ArrowDown":e.preventDefault();var d="ArrowDown"===e.key?1:-1;ve.daysContainer?e.ctrlKey?(A(ve.currentYear-d),b(e.target.$i,0)):c||b(e.target.$i,7*d):ve.config.enableTime&&(c||ve.hourElement.focus(),i(e),ve.debouncedChange());break;case"Tab":e.target===ve.hourElement?(e.preventDefault(),ve.minuteElement.select()):e.target===ve.minuteElement&&(ve.secondElement||ve.amPM)?(e.preventDefault(),(ve.secondElement||ve.amPM).focus()):e.target===ve.secondElement&&(e.preventDefault(),ve.amPM.focus());break;case"a":e.target===ve.amPM&&(ve.amPM.textContent="AM",r(),ce());break;case"p":e.target===ve.amPM&&(ve.amPM.textContent="PM",r(),ce())}ae("KeyDown",e)}}function j(e){if(1===ve.selectedDates.length&&e.classList.contains("flatpickr-day")){for(var t=e.dateObj,n=ve.parseDate(ve.selectedDates[0],null,!0),a=Math.min(t.getTime(),ve.selectedDates[0].getTime()),i=Math.max(t.getTime(),ve.selectedDates[0].getTime()),r=!1,o=a;o<i;o+=ve.utils.duration.DAY)if(!L(new Date(o))){r=!0;break}for(var l=function(o,l){var c=o<ve.minRangeDate.getTime()||o>ve.maxRangeDate.getTime(),s=ve.days.childNodes[l];if(c)return ve.days.childNodes[l].classList.add("notAllowed"),["inRange","startRange","endRange"].forEach(function(e){s.classList.remove(e)}),"continue";if(r&&!c)return"continue";["startRange","inRange","endRange","notAllowed"].forEach(function(e){s.classList.remove(e)});var d=Math.max(ve.minRangeDate.getTime(),a),u=Math.min(ve.maxRangeDate.getTime(),i);e.classList.add(t<ve.selectedDates[0]?"startRange":"endRange"),n<t&&o===n.getTime()?s.classList.add("startRange"):n>t&&o===n.getTime()&&s.classList.add("endRange"),o>=d&&o<=u&&s.classList.add("inRange")},c=ve.days.childNodes[0].dateObj.getTime(),s=0;s<42;s++,c+=ve.utils.duration.DAY){l(c,s)}}}function H(){!ve.isOpen||ve.config["static"]||ve.config.inline||K()}function R(e,t){return ve.isMobile?(e&&(e.preventDefault(),e.target.blur()),setTimeout(function(){ve.mobileInput.click()},0),void ae("Open")):void(ve.isOpen||ve._input.disabled||ve.config.inline||(ve.isOpen=!0,ve.calendarContainer.classList.add("open"),K(t),ve._input.classList.add("active"),ae("Open")))}function W(e){return function(t){var n=ve.config["_"+e+"Date"]=ve.parseDate(t),a=ve.config["_"+("min"===e?"max":"min")+"Date"],i=t&&n instanceof Date;i&&(ve[e+"DateHasTime"]=n.getHours()||n.getMinutes()||n.getSeconds()),ve.selectedDates&&(ve.selectedDates=ve.selectedDates.filter(function(e){return L(e)}),ve.selectedDates.length||"min"!==e||o(n),ce()),ve.daysContainer&&(U(),i?ve.currentYearElement[e]=n.getFullYear():ve.currentYearElement.removeAttribute(e),ve.currentYearElement.disabled=a&&n&&a.getFullYear()===n.getFullYear())}}function B(){var e=["wrap","weekNumbers","allowInput","clickOpens","time_24hr","enableTime","noCalendar","altInput","shorthandCurrentMonth","inline","static","enableSeconds","disableMobile"],t=["onChange","onClose","onDayCreate","onDestroy","onKeyDown","onMonthChange","onOpen","onParseConfig","onReady","onValueUpdate","onYearChange"];ve.config=Object.create(flatpickr.defaultConfig);var n=Object.assign({},ve.instanceConfig,JSON.parse(JSON.stringify(ve.element.dataset||{})));ve.config.parseDate=n.parseDate,ve.config.formatDate=n.formatDate,Object.defineProperty(ve.config,"enable",{get:function(){return ve.config._enable||[]},set:function(e){return ve.config._enable=V(e)}}),Object.defineProperty(ve.config,"disable",{get:function(){return ve.config._disable||[]},set:function(e){return ve.config._disable=V(e)}}),Object.assign(ve.config,n),!n.dateFormat&&n.enableTime&&(ve.config.dateFormat=ve.config.noCalendar?"H:i"+(ve.config.enableSeconds?":S":""):flatpickr.defaultConfig.dateFormat+" H:i"+(ve.config.enableSeconds?":S":"")),n.altInput&&n.enableTime&&!n.altFormat&&(ve.config.altFormat=ve.config.noCalendar?"h:i"+(ve.config.enableSeconds?":S K":" K"):flatpickr.defaultConfig.altFormat+(" h:i"+(ve.config.enableSeconds?":S":"")+" K")),Object.defineProperty(ve.config,"minDate",{get:function(){return this._minDate},set:W("min")}),Object.defineProperty(ve.config,"maxDate",{get:function(){return this._maxDate},set:W("max")}),ve.config.minDate=n.minDate,ve.config.maxDate=n.maxDate;for(var i=0;i<e.length;i++)ve.config[e[i]]=ve.config[e[i]]===!0||"true"===ve.config[e[i]];for(var r=t.length;r--;)void 0!==ve.config[t[r]]&&(ve.config[t[r]]=me(ve.config[t[r]]||[]).map(a));for(var o=0;o<ve.config.plugins.length;o++){var l=ve.config.plugins[o](ve)||{};for(var c in l)ve.config[c]instanceof Array||~t.indexOf(c)?ve.config[c]=me(l[c]).map(a).concat(ve.config[c]):"undefined"==typeof n[c]&&(ve.config[c]=l[c])}ae("ParseConfig")}function J(){"object"!==_typeof(ve.config.locale)&&"undefined"==typeof flatpickr.l10ns[ve.config.locale]&&console.warn("flatpickr: invalid locale "+ve.config.locale),ve.l10n=Object.assign(Object.create(flatpickr.l10ns["default"]),"object"===_typeof(ve.config.locale)?ve.config.locale:"default"!==ve.config.locale?flatpickr.l10ns[ve.config.locale]||{}:{})}function K(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:ve._positionElement;if(void 0!==ve.calendarContainer){var t=ve.calendarContainer.offsetHeight,n=ve.calendarContainer.offsetWidth,a=ve.config.position,i=e.getBoundingClientRect(),r=window.innerHeight-i.bottom,o="above"===a||"below"!==a&&r<t&&i.top>t,l=window.pageYOffset+i.top+(o?-t-2:e.offsetHeight+2);if(ge(ve.calendarContainer,"arrowTop",!o),ge(ve.calendarContainer,"arrowBottom",o),!ve.config.inline){var c=window.pageXOffset+i.left,s=window.document.body.offsetWidth-i.right,d=c+n>window.document.body.offsetWidth;ge(ve.calendarContainer,"rightMost",d),ve.config["static"]||(ve.calendarContainer.style.top=l+"px",d?(ve.calendarContainer.style.left="auto",ve.calendarContainer.style.right=s+"px"):(ve.calendarContainer.style.left=c+"px",ve.calendarContainer.style.right="auto"))}}}function U(){ve.config.noCalendar||ve.isMobile||(N(),le(),y())}function $(e){if(e.preventDefault(),e.stopPropagation(),e.target.classList.contains("flatpickr-day")&&!e.target.classList.contains("disabled")&&!e.target.classList.contains("notAllowed")){var t=ve.latestSelectedDateObj=new Date(e.target.dateObj.getTime()),n=t.getMonth()!==ve.currentMonth&&"range"!==ve.config.mode;if(ve.selectedDateElem=e.target,"single"===ve.config.mode)ve.selectedDates=[t];else if("multiple"===ve.config.mode){var a=re(t);a?ve.selectedDates.splice(a,1):ve.selectedDates.push(t)}else"range"===ve.config.mode&&(2===ve.selectedDates.length&&ve.clear(),ve.selectedDates.push(t),0!==he(t,ve.selectedDates[0],!0)&&ve.selectedDates.sort(function(e,t){return e.getTime()-t.getTime()}));if(r(),n){var i=ve.currentYear!==t.getFullYear();ve.currentYear=t.getFullYear(),ve.currentMonth=t.getMonth(),i&&ae("YearChange"),ae("MonthChange")}if(y(),ve.minDateHasTime&&ve.config.enableTime&&0===he(t,ve.config.minDate)&&o(ve.config.minDate),ce(),ve.config.enableTime&&setTimeout(function(){return ve.showTimeInput=!0},50),"range"===ve.config.mode&&(1===ve.selectedDates.length?(j(e.target),ve._hidePrevMonthArrow=ve._hidePrevMonthArrow||ve.minRangeDate>ve.days.childNodes[0].dateObj,ve._hideNextMonthArrow=ve._hideNextMonthArrow||ve.maxRangeDate<new Date(ve.currentYear,ve.currentMonth+1,1)):le()),ae("Change"),n?M(function(){return ve.selectedDateElem.focus()}):b(e.target.$i,0),ve.config.enableTime&&setTimeout(function(){return ve.hourElement.select()},451),ve.config.closeOnSelect){var l="single"===ve.config.mode&&!ve.config.enableTime,c="range"===ve.config.mode&&2===ve.selectedDates.length&&!ve.config.enableTime;(l||c)&&ve.close()}}}function z(e,t){ve.config[e]=t,ve.redraw(),p()}function q(e,t){if(e instanceof Array)ve.selectedDates=e.map(function(e){return ve.parseDate(e,t)});else if(e instanceof Date||!isNaN(e))ve.selectedDates=[ve.parseDate(e,t)];else if(e&&e.substring)switch(ve.config.mode){case"single":ve.selectedDates=[ve.parseDate(e,t)];break;case"multiple":ve.selectedDates=e.split("; ").map(function(e){return ve.parseDate(e,t)});break;case"range":ve.selectedDates=e.split(ve.l10n.rangeSeparator).map(function(e){return ve.parseDate(e,t)})}ve.selectedDates=ve.selectedDates.filter(function(e){return e instanceof Date&&L(e,!1)}),ve.selectedDates.sort(function(e,t){return e.getTime()-t.getTime()})}function G(e,t,n){return 0===e||e?(q(e,n),ve.showTimeInput=ve.selectedDates.length>0,ve.latestSelectedDateObj=ve.selectedDates[0],ve.redraw(),p(),o(),ce(t),void(t&&ae("Change"))):ve.clear(t)}function V(e){for(var t=e.length;t--;)"string"==typeof e[t]||+e[t]?e[t]=ve.parseDate(e[t],null,!0):e[t]&&e[t].from&&e[t].to&&(e[t].from=ve.parseDate(e[t].from),e[t].to=ve.parseDate(e[t].to));return e.filter(function(e){return e})}function Z(){ve.selectedDates=[],ve.now=new Date;var e=ve.config.defaultDate||ve.input.value;e&&q(e,ve.config.dateFormat);var t=ve.selectedDates.length?ve.selectedDates[0]:ve.config.minDate&&ve.config.minDate.getTime()>ve.now?ve.config.minDate:ve.config.maxDate&&ve.config.maxDate.getTime()<ve.now?ve.config.maxDate:ve.now;ve.currentYear=t.getFullYear(),ve.currentMonth=t.getMonth(),ve.selectedDates.length&&(ve.latestSelectedDateObj=ve.selectedDates[0]),ve.minDateHasTime=ve.config.minDate&&(ve.config.minDate.getHours()||ve.config.minDate.getMinutes()||ve.config.minDate.getSeconds()),ve.maxDateHasTime=ve.config.maxDate&&(ve.config.maxDate.getHours()||ve.config.maxDate.getMinutes()||ve.config.maxDate.getSeconds()),Object.defineProperty(ve,"latestSelectedDateObj",{get:function(){return ve._selectedDateObj||ve.selectedDates[ve.selectedDates.length-1]},set:function(e){ve._selectedDateObj=e}}),ve.isMobile||Object.defineProperty(ve,"showTimeInput",{get:function(){return ve._showTimeInput},set:function(e){ve._showTimeInput=e,ve.calendarContainer&&ge(ve.calendarContainer,"showTimeInput",e),K()}})}function Q(){ve.utils={duration:{DAY:864e5},getDaysinMonth:function(e,t){return e="undefined"==typeof e?ve.currentMonth:e,t="undefined"==typeof t?ve.currentYear:t,1===e&&(t%4===0&&t%100!==0||t%400===0)?29:ve.l10n.daysInMonth[e]},monthToStr:function(e,t){return t="undefined"==typeof t?ve.config.shorthandCurrentMonth:t,ve.l10n.months[(t?"short":"long")+"hand"][e]}}}function X(){ve.formats=Object.create(FlatpickrInstance.prototype.formats),["D","F","J","M","W","l"].forEach(function(e){ve.formats[e]=FlatpickrInstance.prototype.formats[e].bind(ve)}),ve.revFormat.F=FlatpickrInstance.prototype.revFormat.F.bind(ve),ve.revFormat.M=FlatpickrInstance.prototype.revFormat.M.bind(ve)}function ee(){return ve.input=ve.config.wrap?ve.element.querySelector("[data-input]"):ve.element,ve.input?(ve.input._type=ve.input.type,ve.input.type="text",ve.input.classList.add("flatpickr-input"),ve._input=ve.input,ve.config.altInput&&(ve.altInput=fe(ve.input.nodeName,ve.input.className+" "+ve.config.altInputClass),ve._input=ve.altInput,ve.altInput.placeholder=ve.input.placeholder,ve.altInput.disabled=ve.input.disabled,ve.altInput.required=ve.input.required,ve.altInput.type="text",ve.input.type="hidden",!ve.config["static"]&&ve.input.parentNode&&ve.input.parentNode.insertBefore(ve.altInput,ve.input.nextSibling)),ve.config.allowInput||ve._input.setAttribute("readonly","readonly"),void(ve._positionElement=ve.config.positionElement||ve._input)):console.warn("Error: invalid input element specified",ve.input)}function te(){var e=ve.config.enableTime?ve.config.noCalendar?"time":"datetime-local":"date";ve.mobileInput=fe("input",ve.input.className+" flatpickr-mobile"),ve.mobileInput.step=ve.input.getAttribute("step")||"any",ve.mobileInput.tabIndex=1,ve.mobileInput.type=e,ve.mobileInput.disabled=ve.input.disabled,ve.mobileInput.placeholder=ve.input.placeholder,ve.mobileFormatStr="datetime-local"===e?"Y-m-d\\TH:i:S":"date"===e?"Y-m-d":"H:i:S",ve.selectedDates.length&&(ve.mobileInput.defaultValue=ve.mobileInput.value=ve.formatDate(ve.selectedDates[0],ve.mobileFormatStr)),ve.config.minDate&&(ve.mobileInput.min=ve.formatDate(ve.config.minDate,"Y-m-d")),ve.config.maxDate&&(ve.mobileInput.max=ve.formatDate(ve.config.maxDate,"Y-m-d")),
ve.input.type="hidden",ve.config.altInput&&(ve.altInput.type="hidden");try{ve.input.parentNode.insertBefore(ve.mobileInput,ve.input.nextSibling)}catch(t){}ve.mobileInput.addEventListener("change",function(e){ve.setDate(e.target.value,!1,ve.mobileFormatStr),ae("Change"),ae("Close")})}function ne(){return ve.isOpen?ve.close():void ve.open()}function ae(e,t){var n=ve.config["on"+e];if(void 0!==n&&n.length>0)for(var a=0;n[a]&&a<n.length;a++)n[a](ve.selectedDates,ve.input.value,ve,t);"Change"===e&&(ve.input.dispatchEvent(ie("change")),ve.input.dispatchEvent(ie("input")))}function ie(e){return ve._supportsEvents?new Event(e,{bubbles:!0}):(ve._[e+"Event"]=document.createEvent("Event"),ve._[e+"Event"].initEvent(e,!0,!0),ve._[e+"Event"])}function re(e){for(var t=0;t<ve.selectedDates.length;t++)if(0===he(ve.selectedDates[t],e))return""+t;return!1}function oe(e){return!("range"!==ve.config.mode||ve.selectedDates.length<2)&&(he(e,ve.selectedDates[0])>=0&&he(e,ve.selectedDates[1])<=0)}function le(){ve.config.noCalendar||ve.isMobile||!ve.monthNav||(ve.currentMonthElement.textContent=ve.utils.monthToStr(ve.currentMonth)+" ",ve.currentYearElement.value=ve.currentYear,ve._hidePrevMonthArrow=ve.config.minDate&&(ve.currentYear===ve.config.minDate.getFullYear()?ve.currentMonth<=ve.config.minDate.getMonth():ve.currentYear<ve.config.minDate.getFullYear()),ve._hideNextMonthArrow=ve.config.maxDate&&(ve.currentYear===ve.config.maxDate.getFullYear()?ve.currentMonth+1>ve.config.maxDate.getMonth():ve.currentYear>ve.config.maxDate.getFullYear()))}function ce(e){if(!ve.selectedDates.length)return ve.clear(e);ve.isMobile&&(ve.mobileInput.value=ve.selectedDates.length?ve.formatDate(ve.latestSelectedDateObj,ve.mobileFormatStr):"");var t="range"!==ve.config.mode?"; ":ve.l10n.rangeSeparator;ve.input.value=ve.selectedDates.map(function(e){return ve.formatDate(e,ve.config.dateFormat)}).join(t),ve.config.altInput&&(ve.altInput.value=ve.selectedDates.map(function(e){return ve.formatDate(e,ve.config.altFormat)}).join(t)),e!==!1&&ae("ValueUpdate")}function se(e){return Math.max(-1,Math.min(1,e.wheelDelta||-e.deltaY))}function de(e){e.preventDefault();var t=ve.currentYearElement.parentNode.contains(e.target);if(e.target===ve.currentMonthElement||t){var n=se(e);t?(A(ve.currentYear+n),e.target.value=ve.currentYear):ve.changeMonth(n,!0,!1)}}function ue(e){var t=ve.prevMonthNav.contains(e.target),n=ve.nextMonthNav.contains(e.target);t||n?_(t?-1:1):e.target===ve.currentYearElement?(e.preventDefault(),ve.currentYearElement.select()):"arrowUp"===e.target.className?ve.changeYear(ve.currentYear+1):"arrowDown"===e.target.className&&ve.changeYear(ve.currentYear-1)}function fe(e,t,n){var a=window.document.createElement(e);return t=t||"",n=n||"",a.className=t,void 0!==n&&(a.textContent=n),a}function me(e){return e instanceof Array?e:[e]}function ge(e,t,n){return n?e.classList.add(t):void e.classList.remove(t)}function pe(e,t,n){var a=void 0;return function(){var i=this,r=arguments;clearTimeout(a),a=setTimeout(function(){a=null,n||e.apply(i,r)},t),n&&!a&&e.apply(i,r)}}function he(e,t,n){return e instanceof Date&&t instanceof Date&&(n!==!1?new Date(e.getTime()).setHours(0,0,0,0)-new Date(t.getTime()).setHours(0,0,0,0):e.getTime()-t.getTime())}function De(e){e.preventDefault();var t="keydown"===e.type,n=("wheel"===e.type,"increment"===e.type,e.target);if(ve.amPM&&e.target===ve.amPM)return e.target.textContent=["AM","PM"]["AM"===e.target.textContent|0];var a=Number(n.min),i=Number(n.max),r=Number(n.step),o=parseInt(n.value,10),l=e.delta||(t?38===e.which?1:-1:Math.max(-1,Math.min(1,e.wheelDelta||-e.deltaY))||0),c=o+r*l;if("undefined"!=typeof n.value&&2===n.value.length){var s=n===ve.hourElement,d=n===ve.minuteElement;c<a?(c=i+c+!s+(s&&!ve.amPM),d&&D(null,-1,ve.hourElement)):c>i&&(c=n===ve.hourElement?c-i-!ve.amPM:a,d&&D(null,1,ve.hourElement)),ve.amPM&&s&&(1===r?c+o===23:Math.abs(c-o)>r)&&(ve.amPM.textContent="PM"===ve.amPM.textContent?"AM":"PM"),n.value=ve.pad(c)}}var ve=this;return ve._={},ve._.afterDayAnim=M,ve._bind=s,ve._compareDates=he,ve._setHoursFromDate=o,ve.changeMonth=_,ve.changeYear=A,ve.clear=I,ve.close=S,ve._createElement=fe,ve.destroy=F,ve.isEnabled=L,ve.jumpToDate=p,ve.open=R,ve.redraw=U,ve.set=z,ve.setDate=G,ve.toggle=ne,n(),ve}function _flatpickr(e,t){for(var n=Array.prototype.slice.call(e),a=[],i=0;i<n.length;i++)try{if(null!==n[i].getAttribute("data-fp-omit"))continue;n[i]._flatpickr&&(n[i]._flatpickr.destroy(),n[i]._flatpickr=null),n[i]._flatpickr=new FlatpickrInstance(n[i],t||{}),a.push(n[i]._flatpickr)}catch(r){console.warn(r,r.stack)}return 1===a.length?a[0]:a}function flatpickr(e,t){return e instanceof NodeList?_flatpickr(e,t):e instanceof HTMLElement?_flatpickr([e],t):_flatpickr(window.document.querySelectorAll(e),t)}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};FlatpickrInstance.prototype={formats:{Z:function(e){return e.toISOString()},D:function(e){return this.l10n.weekdays.shorthand[this.formats.w(e)]},F:function(e){return this.utils.monthToStr(this.formats.n(e)-1,!1)},G:function(e){return FlatpickrInstance.prototype.pad(FlatpickrInstance.prototype.formats.h(e))},H:function(e){return FlatpickrInstance.prototype.pad(e.getHours())},J:function(e){return e.getDate()+this.l10n.ordinal(e.getDate())},K:function(e){return e.getHours()>11?"PM":"AM"},M:function(e){return this.utils.monthToStr(e.getMonth(),!0)},S:function(e){return FlatpickrInstance.prototype.pad(e.getSeconds())},U:function(e){return e.getTime()/1e3},W:function(e){return this.config.getWeek(e)},Y:function(e){return e.getFullYear()},d:function(e){return FlatpickrInstance.prototype.pad(e.getDate())},h:function(e){return e.getHours()%12?e.getHours()%12:12},i:function(e){return FlatpickrInstance.prototype.pad(e.getMinutes())},j:function(e){return e.getDate()},l:function(e){return this.l10n.weekdays.longhand[e.getDay()]},m:function(e){return FlatpickrInstance.prototype.pad(e.getMonth()+1)},n:function(e){return e.getMonth()+1},s:function(e){return e.getSeconds()},w:function(e){return e.getDay()},y:function(e){return String(e.getFullYear()).substring(2)}},formatDate:function(e,t){var n=this;return void 0!==this.config&&void 0!==this.config.formatDate?this.config.formatDate(e,t):t.split("").map(function(t,a,i){return n.formats[t]&&"\\"!==i[a-1]?n.formats[t](e):"\\"!==t?t:""}).join("")},revFormat:{D:function(){},F:function(e,t){e.setMonth(this.l10n.months.longhand.indexOf(t))},G:function(e,t){e.setHours(parseFloat(t))},H:function(e,t){e.setHours(parseFloat(t))},J:function(e,t){e.setDate(parseFloat(t))},K:function(e,t){var n=e.getHours();12!==n&&e.setHours(n%12+12*/pm/i.test(t))},M:function(e,t){e.setMonth(this.l10n.months.shorthand.indexOf(t))},S:function(e,t){e.setSeconds(t)},U:function(e,t){return new Date(1e3*parseFloat(t))},W:function(e,t){return t=parseInt(t),new Date(e.getFullYear(),0,2+7*(t-1),0,0,0,0,0)},Y:function(e,t){e.setFullYear(t)},Z:function(e,t){return new Date(t)},d:function(e,t){e.setDate(parseFloat(t))},h:function(e,t){e.setHours(parseFloat(t))},i:function(e,t){e.setMinutes(parseFloat(t))},j:function(e,t){e.setDate(parseFloat(t))},l:function(){},m:function(e,t){e.setMonth(parseFloat(t)-1)},n:function(e,t){e.setMonth(parseFloat(t)-1)},s:function(e,t){e.setSeconds(parseFloat(t))},w:function(){},y:function(e,t){e.setFullYear(2e3+parseFloat(t))}},tokenRegex:{D:"(\\w+)",F:"(\\w+)",G:"(\\d\\d|\\d)",H:"(\\d\\d|\\d)",J:"(\\d\\d|\\d)\\w+",K:"(am|AM|Am|aM|pm|PM|Pm|pM)",M:"(\\w+)",S:"(\\d\\d|\\d)",U:"(.+)",W:"(\\d\\d|\\d)",Y:"(\\d{4})",Z:"(.+)",d:"(\\d\\d|\\d)",h:"(\\d\\d|\\d)",i:"(\\d\\d|\\d)",j:"(\\d\\d|\\d)",l:"(\\w+)",m:"(\\d\\d|\\d)",n:"(\\d\\d|\\d)",s:"(\\d\\d|\\d)",w:"(\\d\\d|\\d)",y:"(\\d{2})"},pad:function(e){return("0"+e).slice(-2)},parseDate:function(e,t,n){if(0!==e&&!e)return null;var a=e;if(e instanceof Date)e=new Date(e.getTime());else if(void 0!==e.toFixed)e=new Date(e);else{var i=t||(this.config||flatpickr.defaultConfig).dateFormat;if(e=String(e).trim(),"today"===e)e=new Date,n=!0;else if(/Z$/.test(e)||/GMT$/.test(e))e=new Date(e);else if(this.config&&this.config.parseDate)e=this.config.parseDate(e,i);else{for(var r=this.config&&this.config.noCalendar?new Date((new Date).setHours(0,0,0,0)):new Date((new Date).getFullYear(),0,1,0,0,0,0),o=void 0,l=0,c=0,s="";l<i.length;l++){var d=i[l],u="\\"===d,f="\\"===i[l-1]||u;if(this.tokenRegex[d]&&!f){s+=this.tokenRegex[d];var m=new RegExp(s).exec(e);m&&(o=!0)&&(r=this.revFormat[d](r,m[++c])||r)}else u||(s+=".")}e=o?r:null}}return e instanceof Date?(n===!0&&e.setHours(0,0,0,0),e):(console.warn("flatpickr: invalid date "+a),console.info(this.element),null)}},"undefined"!=typeof HTMLElement&&(HTMLCollection.prototype.flatpickr=NodeList.prototype.flatpickr=function(e){return _flatpickr(this,e)},HTMLElement.prototype.flatpickr=function(e){return _flatpickr([this],e)}),flatpickr.defaultConfig=FlatpickrInstance.defaultConfig={mode:"single",position:"auto",animate:window.navigator.userAgent.indexOf("MSIE")===-1,wrap:!1,weekNumbers:!1,allowInput:!1,clickOpens:!0,closeOnSelect:!0,time_24hr:!1,enableTime:!1,noCalendar:!1,dateFormat:"Y-m-d",ariaDateFormat:"F j, Y",altInput:!1,altInputClass:"form-control input",altFormat:"F j, Y",defaultDate:null,minDate:null,maxDate:null,parseDate:null,formatDate:null,getWeek:function(e){var t=new Date(e.getTime()),n=new Date(t.getFullYear(),0,1);return Math.ceil(((t-n)/864e5+n.getDay()+1)/7)},enable:[],disable:[],shorthandCurrentMonth:!1,inline:!1,"static":!1,appendTo:null,prevArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",nextArrow:"<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",enableSeconds:!1,hourIncrement:1,minuteIncrement:5,defaultHour:12,defaultMinute:0,disableMobile:!1,locale:"default",plugins:[],ignoredFocusElements:[],onClose:void 0,onChange:void 0,onDayCreate:void 0,onMonthChange:void 0,onOpen:void 0,onParseConfig:void 0,onReady:void 0,onValueUpdate:void 0,onYearChange:void 0,onKeyDown:void 0,onDestroy:void 0},flatpickr.l10ns={en:{weekdays:{shorthand:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],longhand:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},months:{shorthand:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],longhand:["January","February","March","April","May","June","July","August","September","October","November","December"]},daysInMonth:[31,28,31,30,31,30,31,31,30,31,30,31],firstDayOfWeek:0,ordinal:function(e){var t=e%100;if(t>3&&t<21)return"th";switch(t%10){case 1:return"st";case 2:return"nd";case 3:return"rd";default:return"th"}},rangeSeparator:" to ",weekAbbreviation:"Wk",scrollTitle:"Scroll to increment",toggleTitle:"Click to toggle"}},flatpickr.l10ns["default"]=Object.create(flatpickr.l10ns.en),flatpickr.localize=function(e){return Object.assign(flatpickr.l10ns["default"],e||{})},flatpickr.setDefaults=function(e){return Object.assign(flatpickr.defaultConfig,e||{})},"undefined"!=typeof jQuery&&(jQuery.fn.flatpickr=function(e){return _flatpickr(this,e)}),Date.prototype.fp_incr=function(e){return new Date(this.getFullYear(),this.getMonth(),this.getDate()+parseInt(e,10))},"undefined"!=typeof module&&(module.exports=flatpickr);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
